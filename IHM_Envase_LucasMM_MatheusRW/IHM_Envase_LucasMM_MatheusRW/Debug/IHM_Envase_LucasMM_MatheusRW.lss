
IHM_Envase_LucasMM_MatheusRW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000de  00800100  00000b94  00000c28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b94  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  008001de  008001de  00000d06  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d06  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000da4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016c8  00000000  00000000  00000e04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000092b  00000000  00000000  000024cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008cd  00000000  00000000  00002df7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  000036c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000535  00000000  00000000  0000378c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ae5  00000000  00000000  00003cc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000047a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 98 02 	jmp	0x530	; 0x530 <__vector_1>
   8:	0c 94 ac 02 	jmp	0x558	; 0x558 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e9       	ldi	r30, 0x94	; 148
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 3d       	cpi	r26, 0xDE	; 222
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae ed       	ldi	r26, 0xDE	; 222
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 3e       	cpi	r26, 0xE6	; 230
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 0a 01 	call	0x214	; 0x214 <main>
  9e:	0c 94 c8 05 	jmp	0xb90	; 0xb90 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <lcd_cmd>:
   send a single command to the display.
*/
void lcd_cmd(unsigned char c, /*!< command to send */
             cmdType_t cmd /*!< command to send */)
{
    switch(cmd) {
  a6:	66 23       	and	r22, r22
  a8:	19 f0       	breq	.+6      	; 0xb0 <lcd_cmd+0xa>
  aa:	61 30       	cpi	r22, 0x01	; 1
  ac:	19 f0       	breq	.+6      	; 0xb4 <lcd_cmd+0xe>
  ae:	03 c0       	rjmp	.+6      	; 0xb6 <lcd_cmd+0x10>
    case LCD_CMD:
        rst_bit(LCD_RS);
  b0:	59 98       	cbi	0x0b, 1	; 11
        break;
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <lcd_cmd+0x10>
    case LCD_CHAR:
        set_bit(LCD_RS);
  b4:	59 9a       	sbi	0x0b, 1	; 11

    /*send first nibble (high half) of data*/
#if USE_LOWER_NIBLE == 1
    LCD_PORT = (LCD_PORT & 0xf0) | ((c & 0xf0) >> 4);
#else
    LCD_PORT = (LCD_PORT & 0x0f) | (c & 0xf0);
  b6:	9b b1       	in	r25, 0x0b	; 11
  b8:	9f 70       	andi	r25, 0x0F	; 15
  ba:	28 2f       	mov	r18, r24
  bc:	20 7f       	andi	r18, 0xF0	; 240
  be:	92 2b       	or	r25, r18
  c0:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	45 e0       	ldi	r20, 0x05	; 5
  c4:	4a 95       	dec	r20
  c6:	f1 f7       	brne	.-4      	; 0xc4 <lcd_cmd+0x1e>
  c8:	00 00       	nop
#endif
    enable_pulse();
  ca:	58 9a       	sbi	0x0b, 0	; 11
  cc:	95 e0       	ldi	r25, 0x05	; 5
  ce:	9a 95       	dec	r25
  d0:	f1 f7       	brne	.-4      	; 0xce <lcd_cmd+0x28>
  d2:	00 00       	nop
  d4:	58 98       	cbi	0x0b, 0	; 11
  d6:	40 ef       	ldi	r20, 0xF0	; 240
  d8:	4a 95       	dec	r20
  da:	f1 f7       	brne	.-4      	; 0xd8 <lcd_cmd+0x32>

    /*send second (lower) nibble of data*/
#if USE_LOWER_NIBLE == 1
    LCD_PORT = (LCD_PORT & 0xf0) | (c & 0x0f);
#else
    LCD_PORT = (LCD_PORT & 0x0f) | ((c & 0x0f) << 4);
  dc:	2b b1       	in	r18, 0x0b	; 11
  de:	92 2f       	mov	r25, r18
  e0:	9f 70       	andi	r25, 0x0F	; 15
  e2:	40 e1       	ldi	r20, 0x10	; 16
  e4:	84 9f       	mul	r24, r20
  e6:	90 01       	movw	r18, r0
  e8:	11 24       	eor	r1, r1
  ea:	29 2b       	or	r18, r25
  ec:	2b b9       	out	0x0b, r18	; 11
  ee:	95 e0       	ldi	r25, 0x05	; 5
  f0:	9a 95       	dec	r25
  f2:	f1 f7       	brne	.-4      	; 0xf0 <lcd_cmd+0x4a>
  f4:	00 00       	nop
#endif
    enable_pulse();
  f6:	58 9a       	sbi	0x0b, 0	; 11
  f8:	45 e0       	ldi	r20, 0x05	; 5
  fa:	4a 95       	dec	r20
  fc:	f1 f7       	brne	.-4      	; 0xfa <lcd_cmd+0x54>
  fe:	00 00       	nop
 100:	58 98       	cbi	0x0b, 0	; 11
 102:	90 ef       	ldi	r25, 0xF0	; 240
 104:	9a 95       	dec	r25
 106:	f1 f7       	brne	.-4      	; 0x104 <lcd_cmd+0x5e>

    //wait if cmd is clear or return home (exec time ~1.52ms)
    if(c<4 && cmd == LCD_CMD)
 108:	84 30       	cpi	r24, 0x04	; 4
 10a:	40 f4       	brcc	.+16     	; 0x11c <lcd_cmd+0x76>
 10c:	61 11       	cpse	r22, r1
 10e:	06 c0       	rjmp	.+12     	; 0x11c <lcd_cmd+0x76>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 110:	8f e3       	ldi	r24, 0x3F	; 63
 112:	9f e1       	ldi	r25, 0x1F	; 31
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <lcd_cmd+0x6e>
 118:	00 c0       	rjmp	.+0      	; 0x11a <lcd_cmd+0x74>
 11a:	00 00       	nop
    {
        _delay_ms(2);
    }
    //set_bit(LCD_RS);
    LCD_PORT &= ~(LCD_DATA_MASK);
 11c:	8b b1       	in	r24, 0x0b	; 11
 11e:	8f 70       	andi	r24, 0x0F	; 15
 120:	8b b9       	out	0x0b, r24	; 11
 122:	08 95       	ret

00000124 <lcd_4bit_init>:
void lcd_4bit_init(void)
{

    /* reset lcd port bits and set RS low */
    //LCD_PORT &= 0x0f;
    rst_bit(LCD_RS);
 124:	59 98       	cbi	0x0b, 1	; 11
    rst_bit(LCD_EN);
 126:	58 98       	cbi	0x0b, 0	; 11
 128:	2f ef       	ldi	r18, 0xFF	; 255
 12a:	89 ef       	ldi	r24, 0xF9	; 249
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	21 50       	subi	r18, 0x01	; 1
 130:	80 40       	sbci	r24, 0x00	; 0
 132:	90 40       	sbci	r25, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <lcd_4bit_init+0xa>
 136:	00 c0       	rjmp	.+0      	; 0x138 <lcd_4bit_init+0x14>
 138:	00 00       	nop
       @see https://www.sparkfun.com/datasheets/LCD/HD44780.pdf
    */
#if USE_LOWER_NIBLE == 1
    LCD_PORT = (LCD_PORT & 0xf0) | 0x03;
#else
    LCD_PORT = (LCD_PORT & 0x0f) | 0x30;
 13a:	8b b1       	in	r24, 0x0b	; 11
 13c:	8f 70       	andi	r24, 0x0F	; 15
 13e:	80 63       	ori	r24, 0x30	; 48
 140:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 142:	25 e0       	ldi	r18, 0x05	; 5
 144:	2a 95       	dec	r18
 146:	f1 f7       	brne	.-4      	; 0x144 <lcd_4bit_init+0x20>
 148:	00 00       	nop
#endif
    enable_pulse();
 14a:	58 9a       	sbi	0x0b, 0	; 11
 14c:	85 e0       	ldi	r24, 0x05	; 5
 14e:	8a 95       	dec	r24
 150:	f1 f7       	brne	.-4      	; 0x14e <lcd_4bit_init+0x2a>
 152:	00 00       	nop
 154:	58 98       	cbi	0x0b, 0	; 11
 156:	90 ef       	ldi	r25, 0xF0	; 240
 158:	9a 95       	dec	r25
 15a:	f1 f7       	brne	.-4      	; 0x158 <lcd_4bit_init+0x34>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15c:	8f e1       	ldi	r24, 0x1F	; 31
 15e:	9e e4       	ldi	r25, 0x4E	; 78
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <lcd_4bit_init+0x3c>
 164:	00 c0       	rjmp	.+0      	; 0x166 <lcd_4bit_init+0x42>
 166:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 168:	95 e0       	ldi	r25, 0x05	; 5
 16a:	9a 95       	dec	r25
 16c:	f1 f7       	brne	.-4      	; 0x16a <lcd_4bit_init+0x46>
 16e:	00 00       	nop
    _delay_ms(5);
    enable_pulse();
 170:	58 9a       	sbi	0x0b, 0	; 11
 172:	25 e0       	ldi	r18, 0x05	; 5
 174:	2a 95       	dec	r18
 176:	f1 f7       	brne	.-4      	; 0x174 <lcd_4bit_init+0x50>
 178:	00 00       	nop
 17a:	58 98       	cbi	0x0b, 0	; 11
 17c:	80 ef       	ldi	r24, 0xF0	; 240
 17e:	8a 95       	dec	r24
 180:	f1 f7       	brne	.-4      	; 0x17e <lcd_4bit_init+0x5a>
 182:	8f e1       	ldi	r24, 0x1F	; 31
 184:	93 e0       	ldi	r25, 0x03	; 3
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <lcd_4bit_init+0x62>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <lcd_4bit_init+0x68>
 18c:	00 00       	nop
 18e:	95 e0       	ldi	r25, 0x05	; 5
 190:	9a 95       	dec	r25
 192:	f1 f7       	brne	.-4      	; 0x190 <lcd_4bit_init+0x6c>
 194:	00 00       	nop
    _delay_us(200);
    enable_pulse();
 196:	58 9a       	sbi	0x0b, 0	; 11
 198:	25 e0       	ldi	r18, 0x05	; 5
 19a:	2a 95       	dec	r18
 19c:	f1 f7       	brne	.-4      	; 0x19a <lcd_4bit_init+0x76>
 19e:	00 00       	nop
 1a0:	58 98       	cbi	0x0b, 0	; 11
 1a2:	80 ef       	ldi	r24, 0xF0	; 240
 1a4:	8a 95       	dec	r24
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <lcd_4bit_init+0x80>

#if USE_LOWER_NIBLE
    LCD_PORT = (LCD_PORT & 0xf0) | 0x02;
#else
    LCD_PORT = (LCD_PORT & 0x0f) | 0x20;
 1a8:	8b b1       	in	r24, 0x0b	; 11
 1aa:	8f 70       	andi	r24, 0x0F	; 15
 1ac:	80 62       	ori	r24, 0x20	; 32
 1ae:	8b b9       	out	0x0b, r24	; 11
 1b0:	95 e0       	ldi	r25, 0x05	; 5
 1b2:	9a 95       	dec	r25
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <lcd_4bit_init+0x8e>
 1b6:	00 00       	nop
#endif
    enable_pulse();
 1b8:	58 9a       	sbi	0x0b, 0	; 11
 1ba:	25 e0       	ldi	r18, 0x05	; 5
 1bc:	2a 95       	dec	r18
 1be:	f1 f7       	brne	.-4      	; 0x1bc <lcd_4bit_init+0x98>
 1c0:	00 00       	nop
 1c2:	58 98       	cbi	0x0b, 0	; 11
 1c4:	80 ef       	ldi	r24, 0xF0	; 240
 1c6:	8a 95       	dec	r24
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <lcd_4bit_init+0xa2>


    /* set interface 4 bits, 2 lines, 8 dots font  */
    lcd_cmd(0b00101000,LCD_CMD);
 1ca:	60 e0       	ldi	r22, 0x00	; 0
 1cc:	88 e2       	ldi	r24, 0x28	; 40
 1ce:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
    lcd_cmd(0x08,LCD_CMD); // turn off display
 1d2:	60 e0       	ldi	r22, 0x00	; 0
 1d4:	88 e0       	ldi	r24, 0x08	; 8
 1d6:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
    lcd_cmd(0x01,LCD_CMD); // clear display
 1da:	60 e0       	ldi	r22, 0x00	; 0
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
    lcd_cmd(0x0c,LCD_CMD); // turn displ. on, visible cursor, no blink
 1e2:	60 e0       	ldi	r22, 0x00	; 0
 1e4:	8c e0       	ldi	r24, 0x0C	; 12
 1e6:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
    lcd_cmd(0x80,LCD_CMD); //set CGRAM adress to 0 (1st position)
 1ea:	60 e0       	ldi	r22, 0x00	; 0
 1ec:	80 e8       	ldi	r24, 0x80	; 128
 1ee:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
 1f2:	08 95       	ret

000001f4 <lcd_write>:

/**
   write a string to the display.
 */
void lcd_write(const char * str)
{
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	ec 01       	movw	r28, r24
    for (;*str;++str)
 1fa:	88 81       	ld	r24, Y
 1fc:	88 23       	and	r24, r24
 1fe:	39 f0       	breq	.+14     	; 0x20e <lcd_write+0x1a>
 200:	21 96       	adiw	r28, 0x01	; 1
    {
        lcd_cmd(*str,LCD_CHAR);
 202:	61 e0       	ldi	r22, 0x01	; 1
 204:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
/**
   write a string to the display.
 */
void lcd_write(const char * str)
{
    for (;*str;++str)
 208:	89 91       	ld	r24, Y+
 20a:	81 11       	cpse	r24, r1
 20c:	fa cf       	rjmp	.-12     	; 0x202 <lcd_write+0xe>
    {
        lcd_cmd(*str,LCD_CHAR);
    }
}
 20e:	df 91       	pop	r29
 210:	cf 91       	pop	r28
 212:	08 95       	ret

00000214 <main>:
uint8_t lot_quantity = LOT_QUANTITY_DEFAULT;    //Caixas prontas no lote atual
uint8_t lot_number = LOT_NUMBER_DEFAULT;        //Número do lote (quantos lotes já foram feitos)

/*--------- Main ---------*/
int main(void)
{
 214:	cf 93       	push	r28
 216:	df 93       	push	r29
 218:	cd b7       	in	r28, 0x3d	; 61
 21a:	de b7       	in	r29, 0x3e	; 62
 21c:	61 97       	sbiw	r28, 0x11	; 17
 21e:	0f b6       	in	r0, 0x3f	; 63
 220:	f8 94       	cli
 222:	de bf       	out	0x3e, r29	; 62
 224:	0f be       	out	0x3f, r0	; 63
 226:	cd bf       	out	0x3d, r28	; 61
    //configure interrupts
    EICRA |= 0b00001010; //set INT0 and INT1 as falling edge
 228:	e9 e6       	ldi	r30, 0x69	; 105
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	80 81       	ld	r24, Z
 22e:	8a 60       	ori	r24, 0x0A	; 10
 230:	80 83       	st	Z, r24

    EIMSK |= 0x03; //enable INT 1 and 0
 232:	8d b3       	in	r24, 0x1d	; 29
 234:	83 60       	ori	r24, 0x03	; 3
 236:	8d bb       	out	0x1d, r24	; 29

    //set up pin directions
    DDRB = 0x00;
 238:	14 b8       	out	0x04, r1	; 4
    DDRC = 0b00111000;
 23a:	88 e3       	ldi	r24, 0x38	; 56
 23c:	87 b9       	out	0x07, r24	; 7
    DDRD = 0b11110011;
 23e:	83 ef       	ldi	r24, 0xF3	; 243
 240:	8a b9       	out	0x0a, r24	; 10

    sei();
 242:	78 94       	sei

    lcd_4bit_init();
 244:	0e 94 92 00 	call	0x124	; 0x124 <lcd_4bit_init>

    lcd_write("Booting...     ");
 248:	82 e0       	ldi	r24, 0x02	; 2
 24a:	91 e0       	ldi	r25, 0x01	; 1
 24c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 250:	2f ef       	ldi	r18, 0xFF	; 255
 252:	37 ea       	ldi	r19, 0xA7	; 167
 254:	81 e6       	ldi	r24, 0x61	; 97
 256:	21 50       	subi	r18, 0x01	; 1
 258:	30 40       	sbci	r19, 0x00	; 0
 25a:	80 40       	sbci	r24, 0x00	; 0
 25c:	e1 f7       	brne	.-8      	; 0x256 <main+0x42>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <main+0x4c>
 260:	00 00       	nop
        case READY:
			lcd_move_cursor(0,0);
			lcd_write("Ready press STR");
			if (get_bit(STRT_STOP_BTN)==0)
			{
				major_state=RUN;
 262:	68 94       	set
 264:	ee 24       	eor	r14, r14
 266:	e2 f8       	bld	r14, 2
                    _delay_ms(50);
                }
            }
        case CONFIG:
            //TODO: ask for lot size, fill_delay
			major_state=READY;
 268:	0f 2e       	mov	r0, r31
 26a:	f3 e0       	ldi	r31, 0x03	; 3
 26c:	ff 2e       	mov	r15, r31
 26e:	f0 2d       	mov	r31, r0
            break;
        case RUN:
			;
			//Segunda linha do LCD, status do lote:
			char buff[17];
			snprintf(buff,17, "Lot %02i, box %02i ",lot_number,lot_quantity+1);
 270:	0f 2e       	mov	r0, r31
 272:	f2 e2       	ldi	r31, 0x22	; 34
 274:	af 2e       	mov	r10, r31
 276:	f1 e0       	ldi	r31, 0x01	; 1
 278:	bf 2e       	mov	r11, r31
 27a:	f0 2d       	mov	r31, r0
 27c:	0f 2e       	mov	r0, r31
 27e:	f1 e1       	ldi	r31, 0x11	; 17
 280:	cf 2e       	mov	r12, r31
 282:	f0 2d       	mov	r31, r0
 284:	8e 01       	movw	r16, r28
 286:	0f 5f       	subi	r16, 0xFF	; 255
 288:	1f 4f       	sbci	r17, 0xFF	; 255
                lcd_move_cursor(0,0);
                lcd_write("Box detected   ");
                set_bit(CYL_A);
                set_bit(CYL_B);
                if(get_bit(A_1)==0 && get_bit(B_1)==0) {
                    run_state = LOADING;
 28a:	68 94       	set
 28c:	dd 24       	eor	r13, r13
 28e:	d1 f8       	bld	r13, 1
    lcd_4bit_init();

    lcd_write("Booting...     ");
    _delay_ms(2000);
    while(1) {
        switch(major_state) {
 290:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <major_state>
 294:	82 30       	cpi	r24, 0x02	; 2
 296:	09 f4       	brne	.+2      	; 0x29a <main+0x86>
 298:	6e c0       	rjmp	.+220    	; 0x376 <main+0x162>
 29a:	28 f4       	brcc	.+10     	; 0x2a6 <main+0x92>
 29c:	88 23       	and	r24, r24
 29e:	61 f0       	breq	.+24     	; 0x2b8 <main+0xa4>
 2a0:	81 30       	cpi	r24, 0x01	; 1
 2a2:	d9 f0       	breq	.+54     	; 0x2da <main+0xc6>
 2a4:	3c c1       	rjmp	.+632    	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
 2a6:	84 30       	cpi	r24, 0x04	; 4
 2a8:	09 f4       	brne	.+2      	; 0x2ac <main+0x98>
 2aa:	74 c0       	rjmp	.+232    	; 0x394 <main+0x180>
 2ac:	08 f4       	brcc	.+2      	; 0x2b0 <main+0x9c>
 2ae:	65 c0       	rjmp	.+202    	; 0x37a <main+0x166>
 2b0:	85 30       	cpi	r24, 0x05	; 5
 2b2:	09 f4       	brne	.+2      	; 0x2b6 <main+0xa2>
 2b4:	2b c1       	rjmp	.+598    	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
 2b6:	33 c1       	rjmp	.+614    	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
        case START:
            major_state = READY; //TODO: mudar depois que resolver o PWD
 2b8:	f0 92 e5 01 	sts	0x01E5, r15	; 0x8001e5 <major_state>
            run_state = WAITING;
 2bc:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <run_state>
            rst_bit(CYL_A);
 2c0:	43 98       	cbi	0x08, 3	; 8
            rst_bit(CYL_B);
 2c2:	44 98       	cbi	0x08, 4	; 8
            set_bit(CYL_C);
 2c4:	45 9a       	sbi	0x08, 5	; 8
            if(get_bit(A_0)==0 && get_bit(B_1)==0 && get_bit(C_1)==0) {
 2c6:	18 99       	sbic	0x03, 0	; 3
 2c8:	e3 cf       	rjmp	.-58     	; 0x290 <main+0x7c>
 2ca:	1b 99       	sbic	0x03, 3	; 3
 2cc:	e1 cf       	rjmp	.-62     	; 0x290 <main+0x7c>
 2ce:	1d 99       	sbic	0x03, 5	; 3
 2d0:	df cf       	rjmp	.-66     	; 0x290 <main+0x7c>
                major_state = PWD;
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <major_state>
 2d8:	db cf       	rjmp	.-74     	; 0x290 <main+0x7c>
            }
            break;
        case PWD:
            lcd_clear();
 2da:	60 e0       	ldi	r22, 0x00	; 0
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
void lcd_4bit_init(void);
void lcd_cmd(unsigned char c, cmdType_t type);

inline void lcd_move_cursor(uint8_t c, uint8_t l)
{
    lcd_cmd(0x80 + (c < 0x0f ? c : 0x0f ) + (l > 0 ? 0x40 : 0), LCD_CMD);
 2e2:	60 e0       	ldi	r22, 0x00	; 0
 2e4:	80 e8       	ldi	r24, 0x80	; 128
 2e6:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
            lcd_move_cursor(0,0);
            lcd_write(pwd_txt);
 2ea:	83 ed       	ldi	r24, 0xD3	; 211
 2ec:	91 e0       	ldi	r25, 0x01	; 1
 2ee:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
            //draw * equivalent to the input password len
            uint8_t curr_opt = 0;
 2f2:	10 e0       	ldi	r17, 0x00	; 0
 2f4:	60 e0       	ldi	r22, 0x00	; 0
 2f6:	80 ec       	ldi	r24, 0xC0	; 192
 2f8:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
            uint8_t pwd_pos = 0;
            while(1)
            {
                lcd_move_cursor(0, 1);
                lcd_write(pwd_buff);
 2fc:	8f ed       	ldi	r24, 0xDF	; 223
 2fe:	91 e0       	ldi	r25, 0x01	; 1
 300:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
                while(get_bit(UP_BTN) && get_bit(DWN_BTN) && get_bit(ENTR_BTN)) {
 304:	1f 9b       	sbis	0x03, 7	; 3
 306:	04 c0       	rjmp	.+8      	; 0x310 <main+0xfc>
 308:	30 9b       	sbis	0x06, 0	; 6
 30a:	02 c0       	rjmp	.+4      	; 0x310 <main+0xfc>
 30c:	31 99       	sbic	0x06, 1	; 6
 30e:	fa cf       	rjmp	.-12     	; 0x304 <main+0xf0>
                    //draw_idle();
                }

                if(!get_bit(UP_BTN)) {
 310:	1f 99       	sbic	0x03, 7	; 3
 312:	0f c0       	rjmp	.+30     	; 0x332 <main+0x11e>
                    curr_opt = curr_opt >= 9 ? 0 : curr_opt + 1;
 314:	19 30       	cpi	r17, 0x09	; 9
 316:	10 f4       	brcc	.+4      	; 0x31c <main+0x108>
 318:	1f 5f       	subi	r17, 0xFF	; 255
 31a:	01 c0       	rjmp	.+2      	; 0x31e <main+0x10a>
 31c:	10 e0       	ldi	r17, 0x00	; 0
 31e:	9f ef       	ldi	r25, 0xFF	; 255
 320:	20 e7       	ldi	r18, 0x70	; 112
 322:	32 e0       	ldi	r19, 0x02	; 2
 324:	91 50       	subi	r25, 0x01	; 1
 326:	20 40       	sbci	r18, 0x00	; 0
 328:	30 40       	sbci	r19, 0x00	; 0
 32a:	e1 f7       	brne	.-8      	; 0x324 <main+0x110>
 32c:	00 c0       	rjmp	.+0      	; 0x32e <main+0x11a>
 32e:	00 00       	nop
 330:	e1 cf       	rjmp	.-62     	; 0x2f4 <main+0xe0>
                    _delay_ms(50);
                } else if (!get_bit(DWN_BTN)) {
 332:	30 99       	sbic	0x06, 0	; 6
 334:	0f c0       	rjmp	.+30     	; 0x354 <main+0x140>
                    curr_opt = curr_opt == 0 ? 9 : curr_opt - 1;
 336:	11 23       	and	r17, r17
 338:	11 f0       	breq	.+4      	; 0x33e <main+0x12a>
 33a:	11 50       	subi	r17, 0x01	; 1
 33c:	01 c0       	rjmp	.+2      	; 0x340 <main+0x12c>
 33e:	19 e0       	ldi	r17, 0x09	; 9
 340:	8f ef       	ldi	r24, 0xFF	; 255
 342:	90 e7       	ldi	r25, 0x70	; 112
 344:	22 e0       	ldi	r18, 0x02	; 2
 346:	81 50       	subi	r24, 0x01	; 1
 348:	90 40       	sbci	r25, 0x00	; 0
 34a:	20 40       	sbci	r18, 0x00	; 0
 34c:	e1 f7       	brne	.-8      	; 0x346 <main+0x132>
 34e:	00 c0       	rjmp	.+0      	; 0x350 <main+0x13c>
 350:	00 00       	nop
 352:	d0 cf       	rjmp	.-96     	; 0x2f4 <main+0xe0>
                    _delay_ms(50);
                } else if (!get_bit(ENTR_BTN)) {
 354:	31 99       	sbic	0x06, 1	; 6
 356:	ce cf       	rjmp	.-100    	; 0x2f4 <main+0xe0>
                            lcd_write("                ");
                            pwd_pos = 0;
                        }
                    }
                    else {
                        pwd_buff[pwd_pos] = '0' + curr_opt;
 358:	80 e3       	ldi	r24, 0x30	; 48
 35a:	81 0f       	add	r24, r17
 35c:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <pwd_buff>
                        ++curr_opt;
 360:	1f 5f       	subi	r17, 0xFF	; 255
 362:	3f ef       	ldi	r19, 0xFF	; 255
 364:	80 e7       	ldi	r24, 0x70	; 112
 366:	92 e0       	ldi	r25, 0x02	; 2
 368:	31 50       	subi	r19, 0x01	; 1
 36a:	80 40       	sbci	r24, 0x00	; 0
 36c:	90 40       	sbci	r25, 0x00	; 0
 36e:	e1 f7       	brne	.-8      	; 0x368 <main+0x154>
 370:	00 c0       	rjmp	.+0      	; 0x372 <main+0x15e>
 372:	00 00       	nop
 374:	bf cf       	rjmp	.-130    	; 0x2f4 <main+0xe0>
                    _delay_ms(50);
                }
            }
        case CONFIG:
            //TODO: ask for lot size, fill_delay
			major_state=READY;
 376:	f0 92 e5 01 	sts	0x01E5, r15	; 0x8001e5 <major_state>
 37a:	60 e0       	ldi	r22, 0x00	; 0
 37c:	80 e8       	ldi	r24, 0x80	; 128
 37e:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>

        case READY:
			lcd_move_cursor(0,0);
			lcd_write("Ready press STR");
 382:	82 e1       	ldi	r24, 0x12	; 18
 384:	91 e0       	ldi	r25, 0x01	; 1
 386:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
			if (get_bit(STRT_STOP_BTN)==0)
 38a:	32 99       	sbic	0x06, 2	; 6
 38c:	81 cf       	rjmp	.-254    	; 0x290 <main+0x7c>
			{
				major_state=RUN;
 38e:	e0 92 e5 01 	sts	0x01E5, r14	; 0x8001e5 <major_state>
 392:	7e cf       	rjmp	.-260    	; 0x290 <main+0x7c>
            break;
        case RUN:
			;
			//Segunda linha do LCD, status do lote:
			char buff[17];
			snprintf(buff,17, "Lot %02i, box %02i ",lot_number,lot_quantity+1);
 394:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <__data_end>
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	01 96       	adiw	r24, 0x01	; 1
 39c:	9f 93       	push	r25
 39e:	8f 93       	push	r24
 3a0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 3a4:	1f 92       	push	r1
 3a6:	8f 93       	push	r24
 3a8:	bf 92       	push	r11
 3aa:	af 92       	push	r10
 3ac:	1f 92       	push	r1
 3ae:	cf 92       	push	r12
 3b0:	1f 93       	push	r17
 3b2:	0f 93       	push	r16
 3b4:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <snprintf>
 3b8:	60 e0       	ldi	r22, 0x00	; 0
 3ba:	80 ec       	ldi	r24, 0xC0	; 192
 3bc:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
			lcd_move_cursor(0,1);
			lcd_write(buff);
 3c0:	c8 01       	movw	r24, r16
 3c2:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
            //TODO: prever casos impossíveis / erros, trocar lcd_clears por comando de mover cursor pro inicio do lcd
            switch(run_state) {
 3c6:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <run_state>
 3ca:	0f b6       	in	r0, 0x3f	; 63
 3cc:	f8 94       	cli
 3ce:	de bf       	out	0x3e, r29	; 62
 3d0:	0f be       	out	0x3f, r0	; 63
 3d2:	cd bf       	out	0x3d, r28	; 61
 3d4:	82 30       	cpi	r24, 0x02	; 2
 3d6:	51 f1       	breq	.+84     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 3d8:	28 f4       	brcc	.+10     	; 0x3e4 <main+0x1d0>
 3da:	88 23       	and	r24, r24
 3dc:	41 f0       	breq	.+16     	; 0x3ee <main+0x1da>
 3de:	81 30       	cpi	r24, 0x01	; 1
 3e0:	a1 f0       	breq	.+40     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3e2:	56 cf       	rjmp	.-340    	; 0x290 <main+0x7c>
 3e4:	83 30       	cpi	r24, 0x03	; 3
 3e6:	81 f1       	breq	.+96     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 3e8:	84 30       	cpi	r24, 0x04	; 4
 3ea:	e1 f1       	breq	.+120    	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 3ec:	51 cf       	rjmp	.-350    	; 0x290 <main+0x7c>
 3ee:	60 e0       	ldi	r22, 0x00	; 0
 3f0:	80 e8       	ldi	r24, 0x80	; 128
 3f2:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
            case WAITING:
                lcd_move_cursor(0,0);
                lcd_write("Waiting box    ");
 3f6:	86 e3       	ldi	r24, 0x36	; 54
 3f8:	91 e0       	ldi	r25, 0x01	; 1
 3fa:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
                if(get_bit(SNS_CX)==0) {
 3fe:	1e 99       	sbic	0x03, 6	; 3
 400:	47 cf       	rjmp	.-370    	; 0x290 <main+0x7c>
                    run_state = DETECTED;
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <run_state>
 408:	43 cf       	rjmp	.-378    	; 0x290 <main+0x7c>
 40a:	60 e0       	ldi	r22, 0x00	; 0
 40c:	80 e8       	ldi	r24, 0x80	; 128
 40e:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
                }
                break;
            case DETECTED:
                lcd_move_cursor(0,0);
                lcd_write("Box detected   ");
 412:	86 e4       	ldi	r24, 0x46	; 70
 414:	91 e0       	ldi	r25, 0x01	; 1
 416:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
                set_bit(CYL_A);
 41a:	43 9a       	sbi	0x08, 3	; 8
                set_bit(CYL_B);
 41c:	44 9a       	sbi	0x08, 4	; 8
                if(get_bit(A_1)==0 && get_bit(B_1)==0) {
 41e:	19 99       	sbic	0x03, 1	; 3
 420:	37 cf       	rjmp	.-402    	; 0x290 <main+0x7c>
 422:	1b 99       	sbic	0x03, 3	; 3
 424:	35 cf       	rjmp	.-406    	; 0x290 <main+0x7c>
                    run_state = LOADING;
 426:	d0 92 e4 01 	sts	0x01E4, r13	; 0x8001e4 <run_state>
 42a:	32 cf       	rjmp	.-412    	; 0x290 <main+0x7c>
 42c:	60 e0       	ldi	r22, 0x00	; 0
 42e:	80 e8       	ldi	r24, 0x80	; 128
 430:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
                }
                break;
            case LOADING:
                lcd_move_cursor(0,0);
                lcd_write("Loading box    ");
 434:	86 e5       	ldi	r24, 0x56	; 86
 436:	91 e0       	ldi	r25, 0x01	; 1
 438:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
                rst_bit(CYL_C);
 43c:	45 98       	cbi	0x08, 5	; 8
                //_delay_ms(fill_delay_ms); TODO
                if(get_bit(C_0)==0) {
 43e:	1c 99       	sbic	0x03, 4	; 3
 440:	27 cf       	rjmp	.-434    	; 0x290 <main+0x7c>
                    run_state = CLOSING;
 442:	f0 92 e4 01 	sts	0x01E4, r15	; 0x8001e4 <run_state>
 446:	24 cf       	rjmp	.-440    	; 0x290 <main+0x7c>
 448:	60 e0       	ldi	r22, 0x00	; 0
 44a:	80 e8       	ldi	r24, 0x80	; 128
 44c:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
                }
                break;
            case CLOSING:
                lcd_move_cursor(0,0);
                lcd_write("Closing disp.  ");
 450:	86 e6       	ldi	r24, 0x66	; 102
 452:	91 e0       	ldi	r25, 0x01	; 1
 454:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
                set_bit(CYL_C);
 458:	45 9a       	sbi	0x08, 5	; 8
                if(get_bit(C_1)==0) {
 45a:	1d 99       	sbic	0x03, 5	; 3
 45c:	19 cf       	rjmp	.-462    	; 0x290 <main+0x7c>
                    run_state = RELEASING;
 45e:	e0 92 e4 01 	sts	0x01E4, r14	; 0x8001e4 <run_state>
 462:	16 cf       	rjmp	.-468    	; 0x290 <main+0x7c>
 464:	60 e0       	ldi	r22, 0x00	; 0
 466:	80 e8       	ldi	r24, 0x80	; 128
 468:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
                }
                break;
            case RELEASING:
                lcd_move_cursor(0,0);
                lcd_write("Releasing box  ");
 46c:	86 e7       	ldi	r24, 0x76	; 118
 46e:	91 e0       	ldi	r25, 0x01	; 1
 470:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
                rst_bit(CYL_A);
 474:	43 98       	cbi	0x08, 3	; 8
                rst_bit(CYL_B);
 476:	44 98       	cbi	0x08, 4	; 8
                if(get_bit(A_0)==0 && get_bit(B_0)==0) {
 478:	18 99       	sbic	0x03, 0	; 3
 47a:	0a cf       	rjmp	.-492    	; 0x290 <main+0x7c>
 47c:	1a 99       	sbic	0x03, 2	; 3
 47e:	08 cf       	rjmp	.-496    	; 0x290 <main+0x7c>
 480:	60 e0       	ldi	r22, 0x00	; 0
 482:	80 e8       	ldi	r24, 0x80	; 128
 484:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
                    lcd_move_cursor(0,0);
                    lcd_write("Box finished   ");
 488:	86 e8       	ldi	r24, 0x86	; 134
 48a:	91 e0       	ldi	r25, 0x01	; 1
 48c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
 490:	3f ef       	ldi	r19, 0xFF	; 255
 492:	87 ea       	ldi	r24, 0xA7	; 167
 494:	91 e6       	ldi	r25, 0x61	; 97
 496:	31 50       	subi	r19, 0x01	; 1
 498:	80 40       	sbci	r24, 0x00	; 0
 49a:	90 40       	sbci	r25, 0x00	; 0
 49c:	e1 f7       	brne	.-8      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 49e:	00 c0       	rjmp	.+0      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 4a0:	00 00       	nop
					_delay_ms(2000);
                    ++ lot_quantity; //Incrementa uma caixa no lote atual
 4a2:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <__data_end>
 4a6:	8f 5f       	subi	r24, 0xFF	; 255
 4a8:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <__data_end>
                    if (lot_quantity == lot_size) //Se o lote atuala atingiu o número de caixas desejado
 4ac:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <lot_size>
 4b0:	89 13       	cpse	r24, r25
 4b2:	29 c0       	rjmp	.+82     	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
                    {
                        ++ lot_number; //Incrementa número de lotes prontos
 4b4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 4b8:	8f 5f       	subi	r24, 0xFF	; 255
 4ba:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
                        lot_quantity = 0; //Reinicia contagem de caixas no lote
 4be:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <__data_end>
 4c2:	60 e0       	ldi	r22, 0x00	; 0
 4c4:	80 e8       	ldi	r24, 0x80	; 128
 4c6:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
                        lcd_move_cursor(0,0);
                        lcd_write("Lot finished   ");
 4ca:	86 e9       	ldi	r24, 0x96	; 150
 4cc:	91 e0       	ldi	r25, 0x01	; 1
 4ce:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
 4d2:	2f ef       	ldi	r18, 0xFF	; 255
 4d4:	33 ed       	ldi	r19, 0xD3	; 211
 4d6:	80 e3       	ldi	r24, 0x30	; 48
 4d8:	21 50       	subi	r18, 0x01	; 1
 4da:	30 40       	sbci	r19, 0x00	; 0
 4dc:	80 40       	sbci	r24, 0x00	; 0
 4de:	e1 f7       	brne	.-8      	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
 4e0:	00 c0       	rjmp	.+0      	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
 4e2:	00 00       	nop
 4e4:	60 e0       	ldi	r22, 0x00	; 0
 4e6:	80 e8       	ldi	r24, 0x80	; 128
 4e8:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
                        _delay_ms(1000);
                        lcd_move_cursor(0,0);
                        lcd_write("Start next lot ");
 4ec:	86 ea       	ldi	r24, 0xA6	; 166
 4ee:	91 e0       	ldi	r25, 0x01	; 1
 4f0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
 4f4:	9f ef       	ldi	r25, 0xFF	; 255
 4f6:	23 ed       	ldi	r18, 0xD3	; 211
 4f8:	30 e3       	ldi	r19, 0x30	; 48
 4fa:	91 50       	subi	r25, 0x01	; 1
 4fc:	20 40       	sbci	r18, 0x00	; 0
 4fe:	30 40       	sbci	r19, 0x00	; 0
 500:	e1 f7       	brne	.-8      	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
 502:	00 c0       	rjmp	.+0      	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
 504:	00 00       	nop
                        _delay_ms(1000);
                    }
                    run_state = WAITING;
 506:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <run_state>
 50a:	c2 ce       	rjmp	.-636    	; 0x290 <main+0x7c>
 50c:	60 e0       	ldi	r22, 0x00	; 0
 50e:	80 e8       	ldi	r24, 0x80	; 128
 510:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
                break;
            }
            break;
        case PAUSE:
            lcd_move_cursor(0,0);
            lcd_write("System paused..");
 514:	86 eb       	ldi	r24, 0xB6	; 182
 516:	91 e0       	ldi	r25, 0x01	; 1
 518:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
            break;
 51c:	b9 ce       	rjmp	.-654    	; 0x290 <main+0x7c>
        default:
        case ERROR:
            lcd_clear();
 51e:	60 e0       	ldi	r22, 0x00	; 0
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
            lcd_write("SYSTEM ERROR");
 526:	86 ec       	ldi	r24, 0xC6	; 198
 528:	91 e0       	ldi	r25, 0x01	; 1
 52a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
            break;
        }
    }
 52e:	b0 ce       	rjmp	.-672    	; 0x290 <main+0x7c>

00000530 <__vector_1>:
}

/*--------- Interrupts ---------*/
ISR(E_STOP_INTR) //Emergency stop button ISR
{
 530:	1f 92       	push	r1
 532:	0f 92       	push	r0
 534:	0f b6       	in	r0, 0x3f	; 63
 536:	0f 92       	push	r0
 538:	11 24       	eor	r1, r1
 53a:	8f 93       	push	r24
    major_state = ERROR;
 53c:	86 e0       	ldi	r24, 0x06	; 6
 53e:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <major_state>
    set_bit(CYL_B);
 542:	44 9a       	sbi	0x08, 4	; 8
    set_bit(CYL_C);
 544:	45 9a       	sbi	0x08, 5	; 8
    rst_bit(CYL_A);
 546:	43 98       	cbi	0x08, 3	; 8

    while(!get_bit(E_STOP_BTN)); //lock the machine while the emergency button is pressed
 548:	4a 9b       	sbis	0x09, 2	; 9
 54a:	fe cf       	rjmp	.-4      	; 0x548 <__vector_1+0x18>
}
 54c:	8f 91       	pop	r24
 54e:	0f 90       	pop	r0
 550:	0f be       	out	0x3f, r0	; 63
 552:	0f 90       	pop	r0
 554:	1f 90       	pop	r1
 556:	18 95       	reti

00000558 <__vector_2>:
ISR(PAUSE_INT)
{
 558:	1f 92       	push	r1
 55a:	0f 92       	push	r0
 55c:	0f b6       	in	r0, 0x3f	; 63
 55e:	0f 92       	push	r0
 560:	11 24       	eor	r1, r1
 562:	8f 93       	push	r24
 564:	9f 93       	push	r25
    major_state = (major_state == RUN ? PAUSE : (major_state ==  PAUSE ? RUN : major_state));
 566:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <major_state>
 56a:	84 30       	cpi	r24, 0x04	; 4
 56c:	39 f0       	breq	.+14     	; 0x57c <__vector_2+0x24>
 56e:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <major_state>
 572:	85 30       	cpi	r24, 0x05	; 5
 574:	29 f0       	breq	.+10     	; 0x580 <__vector_2+0x28>
 576:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <major_state>
 57a:	03 c0       	rjmp	.+6      	; 0x582 <__vector_2+0x2a>
 57c:	85 e0       	ldi	r24, 0x05	; 5
 57e:	01 c0       	rjmp	.+2      	; 0x582 <__vector_2+0x2a>
 580:	84 e0       	ldi	r24, 0x04	; 4
 582:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <major_state>
 586:	8f e3       	ldi	r24, 0x3F	; 63
 588:	9c e9       	ldi	r25, 0x9C	; 156
 58a:	01 97       	sbiw	r24, 0x01	; 1
 58c:	f1 f7       	brne	.-4      	; 0x58a <__vector_2+0x32>
 58e:	00 c0       	rjmp	.+0      	; 0x590 <__vector_2+0x38>
 590:	00 00       	nop
    _delay_ms(10); //button debounce
}
 592:	9f 91       	pop	r25
 594:	8f 91       	pop	r24
 596:	0f 90       	pop	r0
 598:	0f be       	out	0x3f, r0	; 63
 59a:	0f 90       	pop	r0
 59c:	1f 90       	pop	r1
 59e:	18 95       	reti

000005a0 <snprintf>:
 5a0:	ae e0       	ldi	r26, 0x0E	; 14
 5a2:	b0 e0       	ldi	r27, 0x00	; 0
 5a4:	e6 ed       	ldi	r30, 0xD6	; 214
 5a6:	f2 e0       	ldi	r31, 0x02	; 2
 5a8:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__prologue_saves__+0x1c>
 5ac:	0d 89       	ldd	r16, Y+21	; 0x15
 5ae:	1e 89       	ldd	r17, Y+22	; 0x16
 5b0:	8f 89       	ldd	r24, Y+23	; 0x17
 5b2:	98 8d       	ldd	r25, Y+24	; 0x18
 5b4:	26 e0       	ldi	r18, 0x06	; 6
 5b6:	2c 83       	std	Y+4, r18	; 0x04
 5b8:	1a 83       	std	Y+2, r17	; 0x02
 5ba:	09 83       	std	Y+1, r16	; 0x01
 5bc:	97 ff       	sbrs	r25, 7
 5be:	02 c0       	rjmp	.+4      	; 0x5c4 <snprintf+0x24>
 5c0:	80 e0       	ldi	r24, 0x00	; 0
 5c2:	90 e8       	ldi	r25, 0x80	; 128
 5c4:	01 97       	sbiw	r24, 0x01	; 1
 5c6:	9e 83       	std	Y+6, r25	; 0x06
 5c8:	8d 83       	std	Y+5, r24	; 0x05
 5ca:	ae 01       	movw	r20, r28
 5cc:	45 5e       	subi	r20, 0xE5	; 229
 5ce:	5f 4f       	sbci	r21, 0xFF	; 255
 5d0:	69 8d       	ldd	r22, Y+25	; 0x19
 5d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
 5d4:	ce 01       	movw	r24, r28
 5d6:	01 96       	adiw	r24, 0x01	; 1
 5d8:	0e 94 00 03 	call	0x600	; 0x600 <vfprintf>
 5dc:	4d 81       	ldd	r20, Y+5	; 0x05
 5de:	5e 81       	ldd	r21, Y+6	; 0x06
 5e0:	57 fd       	sbrc	r21, 7
 5e2:	0a c0       	rjmp	.+20     	; 0x5f8 <snprintf+0x58>
 5e4:	2f 81       	ldd	r18, Y+7	; 0x07
 5e6:	38 85       	ldd	r19, Y+8	; 0x08
 5e8:	42 17       	cp	r20, r18
 5ea:	53 07       	cpc	r21, r19
 5ec:	0c f4       	brge	.+2      	; 0x5f0 <snprintf+0x50>
 5ee:	9a 01       	movw	r18, r20
 5f0:	f8 01       	movw	r30, r16
 5f2:	e2 0f       	add	r30, r18
 5f4:	f3 1f       	adc	r31, r19
 5f6:	10 82       	st	Z, r1
 5f8:	2e 96       	adiw	r28, 0x0e	; 14
 5fa:	e4 e0       	ldi	r30, 0x04	; 4
 5fc:	0c 94 bb 05 	jmp	0xb76	; 0xb76 <__epilogue_restores__+0x1c>

00000600 <vfprintf>:
 600:	ab e0       	ldi	r26, 0x0B	; 11
 602:	b0 e0       	ldi	r27, 0x00	; 0
 604:	e6 e0       	ldi	r30, 0x06	; 6
 606:	f3 e0       	ldi	r31, 0x03	; 3
 608:	0c 94 91 05 	jmp	0xb22	; 0xb22 <__prologue_saves__>
 60c:	6c 01       	movw	r12, r24
 60e:	7b 01       	movw	r14, r22
 610:	8a 01       	movw	r16, r20
 612:	fc 01       	movw	r30, r24
 614:	17 82       	std	Z+7, r1	; 0x07
 616:	16 82       	std	Z+6, r1	; 0x06
 618:	83 81       	ldd	r24, Z+3	; 0x03
 61a:	81 ff       	sbrs	r24, 1
 61c:	cc c1       	rjmp	.+920    	; 0x9b6 <__stack+0xb7>
 61e:	ce 01       	movw	r24, r28
 620:	01 96       	adiw	r24, 0x01	; 1
 622:	3c 01       	movw	r6, r24
 624:	f6 01       	movw	r30, r12
 626:	93 81       	ldd	r25, Z+3	; 0x03
 628:	f7 01       	movw	r30, r14
 62a:	93 fd       	sbrc	r25, 3
 62c:	85 91       	lpm	r24, Z+
 62e:	93 ff       	sbrs	r25, 3
 630:	81 91       	ld	r24, Z+
 632:	7f 01       	movw	r14, r30
 634:	88 23       	and	r24, r24
 636:	09 f4       	brne	.+2      	; 0x63a <vfprintf+0x3a>
 638:	ba c1       	rjmp	.+884    	; 0x9ae <__stack+0xaf>
 63a:	85 32       	cpi	r24, 0x25	; 37
 63c:	39 f4       	brne	.+14     	; 0x64c <vfprintf+0x4c>
 63e:	93 fd       	sbrc	r25, 3
 640:	85 91       	lpm	r24, Z+
 642:	93 ff       	sbrs	r25, 3
 644:	81 91       	ld	r24, Z+
 646:	7f 01       	movw	r14, r30
 648:	85 32       	cpi	r24, 0x25	; 37
 64a:	29 f4       	brne	.+10     	; 0x656 <vfprintf+0x56>
 64c:	b6 01       	movw	r22, r12
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	0e 94 f7 04 	call	0x9ee	; 0x9ee <fputc>
 654:	e7 cf       	rjmp	.-50     	; 0x624 <vfprintf+0x24>
 656:	91 2c       	mov	r9, r1
 658:	21 2c       	mov	r2, r1
 65a:	31 2c       	mov	r3, r1
 65c:	ff e1       	ldi	r31, 0x1F	; 31
 65e:	f3 15       	cp	r31, r3
 660:	d8 f0       	brcs	.+54     	; 0x698 <vfprintf+0x98>
 662:	8b 32       	cpi	r24, 0x2B	; 43
 664:	79 f0       	breq	.+30     	; 0x684 <vfprintf+0x84>
 666:	38 f4       	brcc	.+14     	; 0x676 <vfprintf+0x76>
 668:	80 32       	cpi	r24, 0x20	; 32
 66a:	79 f0       	breq	.+30     	; 0x68a <vfprintf+0x8a>
 66c:	83 32       	cpi	r24, 0x23	; 35
 66e:	a1 f4       	brne	.+40     	; 0x698 <vfprintf+0x98>
 670:	23 2d       	mov	r18, r3
 672:	20 61       	ori	r18, 0x10	; 16
 674:	1d c0       	rjmp	.+58     	; 0x6b0 <vfprintf+0xb0>
 676:	8d 32       	cpi	r24, 0x2D	; 45
 678:	61 f0       	breq	.+24     	; 0x692 <vfprintf+0x92>
 67a:	80 33       	cpi	r24, 0x30	; 48
 67c:	69 f4       	brne	.+26     	; 0x698 <vfprintf+0x98>
 67e:	23 2d       	mov	r18, r3
 680:	21 60       	ori	r18, 0x01	; 1
 682:	16 c0       	rjmp	.+44     	; 0x6b0 <vfprintf+0xb0>
 684:	83 2d       	mov	r24, r3
 686:	82 60       	ori	r24, 0x02	; 2
 688:	38 2e       	mov	r3, r24
 68a:	e3 2d       	mov	r30, r3
 68c:	e4 60       	ori	r30, 0x04	; 4
 68e:	3e 2e       	mov	r3, r30
 690:	2a c0       	rjmp	.+84     	; 0x6e6 <vfprintf+0xe6>
 692:	f3 2d       	mov	r31, r3
 694:	f8 60       	ori	r31, 0x08	; 8
 696:	1d c0       	rjmp	.+58     	; 0x6d2 <vfprintf+0xd2>
 698:	37 fc       	sbrc	r3, 7
 69a:	2d c0       	rjmp	.+90     	; 0x6f6 <vfprintf+0xf6>
 69c:	20 ed       	ldi	r18, 0xD0	; 208
 69e:	28 0f       	add	r18, r24
 6a0:	2a 30       	cpi	r18, 0x0A	; 10
 6a2:	40 f0       	brcs	.+16     	; 0x6b4 <vfprintf+0xb4>
 6a4:	8e 32       	cpi	r24, 0x2E	; 46
 6a6:	b9 f4       	brne	.+46     	; 0x6d6 <vfprintf+0xd6>
 6a8:	36 fc       	sbrc	r3, 6
 6aa:	81 c1       	rjmp	.+770    	; 0x9ae <__stack+0xaf>
 6ac:	23 2d       	mov	r18, r3
 6ae:	20 64       	ori	r18, 0x40	; 64
 6b0:	32 2e       	mov	r3, r18
 6b2:	19 c0       	rjmp	.+50     	; 0x6e6 <vfprintf+0xe6>
 6b4:	36 fe       	sbrs	r3, 6
 6b6:	06 c0       	rjmp	.+12     	; 0x6c4 <vfprintf+0xc4>
 6b8:	8a e0       	ldi	r24, 0x0A	; 10
 6ba:	98 9e       	mul	r9, r24
 6bc:	20 0d       	add	r18, r0
 6be:	11 24       	eor	r1, r1
 6c0:	92 2e       	mov	r9, r18
 6c2:	11 c0       	rjmp	.+34     	; 0x6e6 <vfprintf+0xe6>
 6c4:	ea e0       	ldi	r30, 0x0A	; 10
 6c6:	2e 9e       	mul	r2, r30
 6c8:	20 0d       	add	r18, r0
 6ca:	11 24       	eor	r1, r1
 6cc:	22 2e       	mov	r2, r18
 6ce:	f3 2d       	mov	r31, r3
 6d0:	f0 62       	ori	r31, 0x20	; 32
 6d2:	3f 2e       	mov	r3, r31
 6d4:	08 c0       	rjmp	.+16     	; 0x6e6 <vfprintf+0xe6>
 6d6:	8c 36       	cpi	r24, 0x6C	; 108
 6d8:	21 f4       	brne	.+8      	; 0x6e2 <vfprintf+0xe2>
 6da:	83 2d       	mov	r24, r3
 6dc:	80 68       	ori	r24, 0x80	; 128
 6de:	38 2e       	mov	r3, r24
 6e0:	02 c0       	rjmp	.+4      	; 0x6e6 <vfprintf+0xe6>
 6e2:	88 36       	cpi	r24, 0x68	; 104
 6e4:	41 f4       	brne	.+16     	; 0x6f6 <vfprintf+0xf6>
 6e6:	f7 01       	movw	r30, r14
 6e8:	93 fd       	sbrc	r25, 3
 6ea:	85 91       	lpm	r24, Z+
 6ec:	93 ff       	sbrs	r25, 3
 6ee:	81 91       	ld	r24, Z+
 6f0:	7f 01       	movw	r14, r30
 6f2:	81 11       	cpse	r24, r1
 6f4:	b3 cf       	rjmp	.-154    	; 0x65c <vfprintf+0x5c>
 6f6:	98 2f       	mov	r25, r24
 6f8:	9f 7d       	andi	r25, 0xDF	; 223
 6fa:	95 54       	subi	r25, 0x45	; 69
 6fc:	93 30       	cpi	r25, 0x03	; 3
 6fe:	28 f4       	brcc	.+10     	; 0x70a <vfprintf+0x10a>
 700:	0c 5f       	subi	r16, 0xFC	; 252
 702:	1f 4f       	sbci	r17, 0xFF	; 255
 704:	9f e3       	ldi	r25, 0x3F	; 63
 706:	99 83       	std	Y+1, r25	; 0x01
 708:	0d c0       	rjmp	.+26     	; 0x724 <vfprintf+0x124>
 70a:	83 36       	cpi	r24, 0x63	; 99
 70c:	31 f0       	breq	.+12     	; 0x71a <vfprintf+0x11a>
 70e:	83 37       	cpi	r24, 0x73	; 115
 710:	71 f0       	breq	.+28     	; 0x72e <vfprintf+0x12e>
 712:	83 35       	cpi	r24, 0x53	; 83
 714:	09 f0       	breq	.+2      	; 0x718 <vfprintf+0x118>
 716:	59 c0       	rjmp	.+178    	; 0x7ca <vfprintf+0x1ca>
 718:	21 c0       	rjmp	.+66     	; 0x75c <vfprintf+0x15c>
 71a:	f8 01       	movw	r30, r16
 71c:	80 81       	ld	r24, Z
 71e:	89 83       	std	Y+1, r24	; 0x01
 720:	0e 5f       	subi	r16, 0xFE	; 254
 722:	1f 4f       	sbci	r17, 0xFF	; 255
 724:	88 24       	eor	r8, r8
 726:	83 94       	inc	r8
 728:	91 2c       	mov	r9, r1
 72a:	53 01       	movw	r10, r6
 72c:	13 c0       	rjmp	.+38     	; 0x754 <vfprintf+0x154>
 72e:	28 01       	movw	r4, r16
 730:	f2 e0       	ldi	r31, 0x02	; 2
 732:	4f 0e       	add	r4, r31
 734:	51 1c       	adc	r5, r1
 736:	f8 01       	movw	r30, r16
 738:	a0 80       	ld	r10, Z
 73a:	b1 80       	ldd	r11, Z+1	; 0x01
 73c:	36 fe       	sbrs	r3, 6
 73e:	03 c0       	rjmp	.+6      	; 0x746 <vfprintf+0x146>
 740:	69 2d       	mov	r22, r9
 742:	70 e0       	ldi	r23, 0x00	; 0
 744:	02 c0       	rjmp	.+4      	; 0x74a <vfprintf+0x14a>
 746:	6f ef       	ldi	r22, 0xFF	; 255
 748:	7f ef       	ldi	r23, 0xFF	; 255
 74a:	c5 01       	movw	r24, r10
 74c:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <strnlen>
 750:	4c 01       	movw	r8, r24
 752:	82 01       	movw	r16, r4
 754:	f3 2d       	mov	r31, r3
 756:	ff 77       	andi	r31, 0x7F	; 127
 758:	3f 2e       	mov	r3, r31
 75a:	16 c0       	rjmp	.+44     	; 0x788 <vfprintf+0x188>
 75c:	28 01       	movw	r4, r16
 75e:	22 e0       	ldi	r18, 0x02	; 2
 760:	42 0e       	add	r4, r18
 762:	51 1c       	adc	r5, r1
 764:	f8 01       	movw	r30, r16
 766:	a0 80       	ld	r10, Z
 768:	b1 80       	ldd	r11, Z+1	; 0x01
 76a:	36 fe       	sbrs	r3, 6
 76c:	03 c0       	rjmp	.+6      	; 0x774 <vfprintf+0x174>
 76e:	69 2d       	mov	r22, r9
 770:	70 e0       	ldi	r23, 0x00	; 0
 772:	02 c0       	rjmp	.+4      	; 0x778 <vfprintf+0x178>
 774:	6f ef       	ldi	r22, 0xFF	; 255
 776:	7f ef       	ldi	r23, 0xFF	; 255
 778:	c5 01       	movw	r24, r10
 77a:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <strnlen_P>
 77e:	4c 01       	movw	r8, r24
 780:	f3 2d       	mov	r31, r3
 782:	f0 68       	ori	r31, 0x80	; 128
 784:	3f 2e       	mov	r3, r31
 786:	82 01       	movw	r16, r4
 788:	33 fc       	sbrc	r3, 3
 78a:	1b c0       	rjmp	.+54     	; 0x7c2 <vfprintf+0x1c2>
 78c:	82 2d       	mov	r24, r2
 78e:	90 e0       	ldi	r25, 0x00	; 0
 790:	88 16       	cp	r8, r24
 792:	99 06       	cpc	r9, r25
 794:	b0 f4       	brcc	.+44     	; 0x7c2 <vfprintf+0x1c2>
 796:	b6 01       	movw	r22, r12
 798:	80 e2       	ldi	r24, 0x20	; 32
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	0e 94 f7 04 	call	0x9ee	; 0x9ee <fputc>
 7a0:	2a 94       	dec	r2
 7a2:	f4 cf       	rjmp	.-24     	; 0x78c <vfprintf+0x18c>
 7a4:	f5 01       	movw	r30, r10
 7a6:	37 fc       	sbrc	r3, 7
 7a8:	85 91       	lpm	r24, Z+
 7aa:	37 fe       	sbrs	r3, 7
 7ac:	81 91       	ld	r24, Z+
 7ae:	5f 01       	movw	r10, r30
 7b0:	b6 01       	movw	r22, r12
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	0e 94 f7 04 	call	0x9ee	; 0x9ee <fputc>
 7b8:	21 10       	cpse	r2, r1
 7ba:	2a 94       	dec	r2
 7bc:	21 e0       	ldi	r18, 0x01	; 1
 7be:	82 1a       	sub	r8, r18
 7c0:	91 08       	sbc	r9, r1
 7c2:	81 14       	cp	r8, r1
 7c4:	91 04       	cpc	r9, r1
 7c6:	71 f7       	brne	.-36     	; 0x7a4 <vfprintf+0x1a4>
 7c8:	e8 c0       	rjmp	.+464    	; 0x99a <__stack+0x9b>
 7ca:	84 36       	cpi	r24, 0x64	; 100
 7cc:	11 f0       	breq	.+4      	; 0x7d2 <vfprintf+0x1d2>
 7ce:	89 36       	cpi	r24, 0x69	; 105
 7d0:	41 f5       	brne	.+80     	; 0x822 <vfprintf+0x222>
 7d2:	f8 01       	movw	r30, r16
 7d4:	37 fe       	sbrs	r3, 7
 7d6:	07 c0       	rjmp	.+14     	; 0x7e6 <vfprintf+0x1e6>
 7d8:	60 81       	ld	r22, Z
 7da:	71 81       	ldd	r23, Z+1	; 0x01
 7dc:	82 81       	ldd	r24, Z+2	; 0x02
 7de:	93 81       	ldd	r25, Z+3	; 0x03
 7e0:	0c 5f       	subi	r16, 0xFC	; 252
 7e2:	1f 4f       	sbci	r17, 0xFF	; 255
 7e4:	08 c0       	rjmp	.+16     	; 0x7f6 <vfprintf+0x1f6>
 7e6:	60 81       	ld	r22, Z
 7e8:	71 81       	ldd	r23, Z+1	; 0x01
 7ea:	07 2e       	mov	r0, r23
 7ec:	00 0c       	add	r0, r0
 7ee:	88 0b       	sbc	r24, r24
 7f0:	99 0b       	sbc	r25, r25
 7f2:	0e 5f       	subi	r16, 0xFE	; 254
 7f4:	1f 4f       	sbci	r17, 0xFF	; 255
 7f6:	f3 2d       	mov	r31, r3
 7f8:	ff 76       	andi	r31, 0x6F	; 111
 7fa:	3f 2e       	mov	r3, r31
 7fc:	97 ff       	sbrs	r25, 7
 7fe:	09 c0       	rjmp	.+18     	; 0x812 <vfprintf+0x212>
 800:	90 95       	com	r25
 802:	80 95       	com	r24
 804:	70 95       	com	r23
 806:	61 95       	neg	r22
 808:	7f 4f       	sbci	r23, 0xFF	; 255
 80a:	8f 4f       	sbci	r24, 0xFF	; 255
 80c:	9f 4f       	sbci	r25, 0xFF	; 255
 80e:	f0 68       	ori	r31, 0x80	; 128
 810:	3f 2e       	mov	r3, r31
 812:	2a e0       	ldi	r18, 0x0A	; 10
 814:	30 e0       	ldi	r19, 0x00	; 0
 816:	a3 01       	movw	r20, r6
 818:	0e 94 33 05 	call	0xa66	; 0xa66 <__ultoa_invert>
 81c:	88 2e       	mov	r8, r24
 81e:	86 18       	sub	r8, r6
 820:	45 c0       	rjmp	.+138    	; 0x8ac <vfprintf+0x2ac>
 822:	85 37       	cpi	r24, 0x75	; 117
 824:	31 f4       	brne	.+12     	; 0x832 <vfprintf+0x232>
 826:	23 2d       	mov	r18, r3
 828:	2f 7e       	andi	r18, 0xEF	; 239
 82a:	b2 2e       	mov	r11, r18
 82c:	2a e0       	ldi	r18, 0x0A	; 10
 82e:	30 e0       	ldi	r19, 0x00	; 0
 830:	25 c0       	rjmp	.+74     	; 0x87c <vfprintf+0x27c>
 832:	93 2d       	mov	r25, r3
 834:	99 7f       	andi	r25, 0xF9	; 249
 836:	b9 2e       	mov	r11, r25
 838:	8f 36       	cpi	r24, 0x6F	; 111
 83a:	c1 f0       	breq	.+48     	; 0x86c <vfprintf+0x26c>
 83c:	18 f4       	brcc	.+6      	; 0x844 <vfprintf+0x244>
 83e:	88 35       	cpi	r24, 0x58	; 88
 840:	79 f0       	breq	.+30     	; 0x860 <vfprintf+0x260>
 842:	b5 c0       	rjmp	.+362    	; 0x9ae <__stack+0xaf>
 844:	80 37       	cpi	r24, 0x70	; 112
 846:	19 f0       	breq	.+6      	; 0x84e <vfprintf+0x24e>
 848:	88 37       	cpi	r24, 0x78	; 120
 84a:	21 f0       	breq	.+8      	; 0x854 <vfprintf+0x254>
 84c:	b0 c0       	rjmp	.+352    	; 0x9ae <__stack+0xaf>
 84e:	e9 2f       	mov	r30, r25
 850:	e0 61       	ori	r30, 0x10	; 16
 852:	be 2e       	mov	r11, r30
 854:	b4 fe       	sbrs	r11, 4
 856:	0d c0       	rjmp	.+26     	; 0x872 <vfprintf+0x272>
 858:	fb 2d       	mov	r31, r11
 85a:	f4 60       	ori	r31, 0x04	; 4
 85c:	bf 2e       	mov	r11, r31
 85e:	09 c0       	rjmp	.+18     	; 0x872 <vfprintf+0x272>
 860:	34 fe       	sbrs	r3, 4
 862:	0a c0       	rjmp	.+20     	; 0x878 <vfprintf+0x278>
 864:	29 2f       	mov	r18, r25
 866:	26 60       	ori	r18, 0x06	; 6
 868:	b2 2e       	mov	r11, r18
 86a:	06 c0       	rjmp	.+12     	; 0x878 <vfprintf+0x278>
 86c:	28 e0       	ldi	r18, 0x08	; 8
 86e:	30 e0       	ldi	r19, 0x00	; 0
 870:	05 c0       	rjmp	.+10     	; 0x87c <vfprintf+0x27c>
 872:	20 e1       	ldi	r18, 0x10	; 16
 874:	30 e0       	ldi	r19, 0x00	; 0
 876:	02 c0       	rjmp	.+4      	; 0x87c <vfprintf+0x27c>
 878:	20 e1       	ldi	r18, 0x10	; 16
 87a:	32 e0       	ldi	r19, 0x02	; 2
 87c:	f8 01       	movw	r30, r16
 87e:	b7 fe       	sbrs	r11, 7
 880:	07 c0       	rjmp	.+14     	; 0x890 <vfprintf+0x290>
 882:	60 81       	ld	r22, Z
 884:	71 81       	ldd	r23, Z+1	; 0x01
 886:	82 81       	ldd	r24, Z+2	; 0x02
 888:	93 81       	ldd	r25, Z+3	; 0x03
 88a:	0c 5f       	subi	r16, 0xFC	; 252
 88c:	1f 4f       	sbci	r17, 0xFF	; 255
 88e:	06 c0       	rjmp	.+12     	; 0x89c <vfprintf+0x29c>
 890:	60 81       	ld	r22, Z
 892:	71 81       	ldd	r23, Z+1	; 0x01
 894:	80 e0       	ldi	r24, 0x00	; 0
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	0e 5f       	subi	r16, 0xFE	; 254
 89a:	1f 4f       	sbci	r17, 0xFF	; 255
 89c:	a3 01       	movw	r20, r6
 89e:	0e 94 33 05 	call	0xa66	; 0xa66 <__ultoa_invert>
 8a2:	88 2e       	mov	r8, r24
 8a4:	86 18       	sub	r8, r6
 8a6:	fb 2d       	mov	r31, r11
 8a8:	ff 77       	andi	r31, 0x7F	; 127
 8aa:	3f 2e       	mov	r3, r31
 8ac:	36 fe       	sbrs	r3, 6
 8ae:	0d c0       	rjmp	.+26     	; 0x8ca <vfprintf+0x2ca>
 8b0:	23 2d       	mov	r18, r3
 8b2:	2e 7f       	andi	r18, 0xFE	; 254
 8b4:	a2 2e       	mov	r10, r18
 8b6:	89 14       	cp	r8, r9
 8b8:	58 f4       	brcc	.+22     	; 0x8d0 <vfprintf+0x2d0>
 8ba:	34 fe       	sbrs	r3, 4
 8bc:	0b c0       	rjmp	.+22     	; 0x8d4 <vfprintf+0x2d4>
 8be:	32 fc       	sbrc	r3, 2
 8c0:	09 c0       	rjmp	.+18     	; 0x8d4 <vfprintf+0x2d4>
 8c2:	83 2d       	mov	r24, r3
 8c4:	8e 7e       	andi	r24, 0xEE	; 238
 8c6:	a8 2e       	mov	r10, r24
 8c8:	05 c0       	rjmp	.+10     	; 0x8d4 <vfprintf+0x2d4>
 8ca:	b8 2c       	mov	r11, r8
 8cc:	a3 2c       	mov	r10, r3
 8ce:	03 c0       	rjmp	.+6      	; 0x8d6 <vfprintf+0x2d6>
 8d0:	b8 2c       	mov	r11, r8
 8d2:	01 c0       	rjmp	.+2      	; 0x8d6 <vfprintf+0x2d6>
 8d4:	b9 2c       	mov	r11, r9
 8d6:	a4 fe       	sbrs	r10, 4
 8d8:	0f c0       	rjmp	.+30     	; 0x8f8 <vfprintf+0x2f8>
 8da:	fe 01       	movw	r30, r28
 8dc:	e8 0d       	add	r30, r8
 8de:	f1 1d       	adc	r31, r1
 8e0:	80 81       	ld	r24, Z
 8e2:	80 33       	cpi	r24, 0x30	; 48
 8e4:	21 f4       	brne	.+8      	; 0x8ee <vfprintf+0x2ee>
 8e6:	9a 2d       	mov	r25, r10
 8e8:	99 7e       	andi	r25, 0xE9	; 233
 8ea:	a9 2e       	mov	r10, r25
 8ec:	09 c0       	rjmp	.+18     	; 0x900 <__stack+0x1>
 8ee:	a2 fe       	sbrs	r10, 2
 8f0:	06 c0       	rjmp	.+12     	; 0x8fe <vfprintf+0x2fe>
 8f2:	b3 94       	inc	r11
 8f4:	b3 94       	inc	r11
 8f6:	04 c0       	rjmp	.+8      	; 0x900 <__stack+0x1>
 8f8:	8a 2d       	mov	r24, r10
 8fa:	86 78       	andi	r24, 0x86	; 134
 8fc:	09 f0       	breq	.+2      	; 0x900 <__stack+0x1>
 8fe:	b3 94       	inc	r11
 900:	a3 fc       	sbrc	r10, 3
 902:	11 c0       	rjmp	.+34     	; 0x926 <__stack+0x27>
 904:	a0 fe       	sbrs	r10, 0
 906:	06 c0       	rjmp	.+12     	; 0x914 <__stack+0x15>
 908:	b2 14       	cp	r11, r2
 90a:	88 f4       	brcc	.+34     	; 0x92e <__stack+0x2f>
 90c:	28 0c       	add	r2, r8
 90e:	92 2c       	mov	r9, r2
 910:	9b 18       	sub	r9, r11
 912:	0e c0       	rjmp	.+28     	; 0x930 <__stack+0x31>
 914:	b2 14       	cp	r11, r2
 916:	60 f4       	brcc	.+24     	; 0x930 <__stack+0x31>
 918:	b6 01       	movw	r22, r12
 91a:	80 e2       	ldi	r24, 0x20	; 32
 91c:	90 e0       	ldi	r25, 0x00	; 0
 91e:	0e 94 f7 04 	call	0x9ee	; 0x9ee <fputc>
 922:	b3 94       	inc	r11
 924:	f7 cf       	rjmp	.-18     	; 0x914 <__stack+0x15>
 926:	b2 14       	cp	r11, r2
 928:	18 f4       	brcc	.+6      	; 0x930 <__stack+0x31>
 92a:	2b 18       	sub	r2, r11
 92c:	02 c0       	rjmp	.+4      	; 0x932 <__stack+0x33>
 92e:	98 2c       	mov	r9, r8
 930:	21 2c       	mov	r2, r1
 932:	a4 fe       	sbrs	r10, 4
 934:	10 c0       	rjmp	.+32     	; 0x956 <__stack+0x57>
 936:	b6 01       	movw	r22, r12
 938:	80 e3       	ldi	r24, 0x30	; 48
 93a:	90 e0       	ldi	r25, 0x00	; 0
 93c:	0e 94 f7 04 	call	0x9ee	; 0x9ee <fputc>
 940:	a2 fe       	sbrs	r10, 2
 942:	17 c0       	rjmp	.+46     	; 0x972 <__stack+0x73>
 944:	a1 fc       	sbrc	r10, 1
 946:	03 c0       	rjmp	.+6      	; 0x94e <__stack+0x4f>
 948:	88 e7       	ldi	r24, 0x78	; 120
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	02 c0       	rjmp	.+4      	; 0x952 <__stack+0x53>
 94e:	88 e5       	ldi	r24, 0x58	; 88
 950:	90 e0       	ldi	r25, 0x00	; 0
 952:	b6 01       	movw	r22, r12
 954:	0c c0       	rjmp	.+24     	; 0x96e <__stack+0x6f>
 956:	8a 2d       	mov	r24, r10
 958:	86 78       	andi	r24, 0x86	; 134
 95a:	59 f0       	breq	.+22     	; 0x972 <__stack+0x73>
 95c:	a1 fe       	sbrs	r10, 1
 95e:	02 c0       	rjmp	.+4      	; 0x964 <__stack+0x65>
 960:	8b e2       	ldi	r24, 0x2B	; 43
 962:	01 c0       	rjmp	.+2      	; 0x966 <__stack+0x67>
 964:	80 e2       	ldi	r24, 0x20	; 32
 966:	a7 fc       	sbrc	r10, 7
 968:	8d e2       	ldi	r24, 0x2D	; 45
 96a:	b6 01       	movw	r22, r12
 96c:	90 e0       	ldi	r25, 0x00	; 0
 96e:	0e 94 f7 04 	call	0x9ee	; 0x9ee <fputc>
 972:	89 14       	cp	r8, r9
 974:	38 f4       	brcc	.+14     	; 0x984 <__stack+0x85>
 976:	b6 01       	movw	r22, r12
 978:	80 e3       	ldi	r24, 0x30	; 48
 97a:	90 e0       	ldi	r25, 0x00	; 0
 97c:	0e 94 f7 04 	call	0x9ee	; 0x9ee <fputc>
 980:	9a 94       	dec	r9
 982:	f7 cf       	rjmp	.-18     	; 0x972 <__stack+0x73>
 984:	8a 94       	dec	r8
 986:	f3 01       	movw	r30, r6
 988:	e8 0d       	add	r30, r8
 98a:	f1 1d       	adc	r31, r1
 98c:	80 81       	ld	r24, Z
 98e:	b6 01       	movw	r22, r12
 990:	90 e0       	ldi	r25, 0x00	; 0
 992:	0e 94 f7 04 	call	0x9ee	; 0x9ee <fputc>
 996:	81 10       	cpse	r8, r1
 998:	f5 cf       	rjmp	.-22     	; 0x984 <__stack+0x85>
 99a:	22 20       	and	r2, r2
 99c:	09 f4       	brne	.+2      	; 0x9a0 <__stack+0xa1>
 99e:	42 ce       	rjmp	.-892    	; 0x624 <vfprintf+0x24>
 9a0:	b6 01       	movw	r22, r12
 9a2:	80 e2       	ldi	r24, 0x20	; 32
 9a4:	90 e0       	ldi	r25, 0x00	; 0
 9a6:	0e 94 f7 04 	call	0x9ee	; 0x9ee <fputc>
 9aa:	2a 94       	dec	r2
 9ac:	f6 cf       	rjmp	.-20     	; 0x99a <__stack+0x9b>
 9ae:	f6 01       	movw	r30, r12
 9b0:	86 81       	ldd	r24, Z+6	; 0x06
 9b2:	97 81       	ldd	r25, Z+7	; 0x07
 9b4:	02 c0       	rjmp	.+4      	; 0x9ba <__stack+0xbb>
 9b6:	8f ef       	ldi	r24, 0xFF	; 255
 9b8:	9f ef       	ldi	r25, 0xFF	; 255
 9ba:	2b 96       	adiw	r28, 0x0b	; 11
 9bc:	e2 e1       	ldi	r30, 0x12	; 18
 9be:	0c 94 ad 05 	jmp	0xb5a	; 0xb5a <__epilogue_restores__>

000009c2 <strnlen_P>:
 9c2:	fc 01       	movw	r30, r24
 9c4:	05 90       	lpm	r0, Z+
 9c6:	61 50       	subi	r22, 0x01	; 1
 9c8:	70 40       	sbci	r23, 0x00	; 0
 9ca:	01 10       	cpse	r0, r1
 9cc:	d8 f7       	brcc	.-10     	; 0x9c4 <strnlen_P+0x2>
 9ce:	80 95       	com	r24
 9d0:	90 95       	com	r25
 9d2:	8e 0f       	add	r24, r30
 9d4:	9f 1f       	adc	r25, r31
 9d6:	08 95       	ret

000009d8 <strnlen>:
 9d8:	fc 01       	movw	r30, r24
 9da:	61 50       	subi	r22, 0x01	; 1
 9dc:	70 40       	sbci	r23, 0x00	; 0
 9de:	01 90       	ld	r0, Z+
 9e0:	01 10       	cpse	r0, r1
 9e2:	d8 f7       	brcc	.-10     	; 0x9da <strnlen+0x2>
 9e4:	80 95       	com	r24
 9e6:	90 95       	com	r25
 9e8:	8e 0f       	add	r24, r30
 9ea:	9f 1f       	adc	r25, r31
 9ec:	08 95       	ret

000009ee <fputc>:
 9ee:	0f 93       	push	r16
 9f0:	1f 93       	push	r17
 9f2:	cf 93       	push	r28
 9f4:	df 93       	push	r29
 9f6:	fb 01       	movw	r30, r22
 9f8:	23 81       	ldd	r18, Z+3	; 0x03
 9fa:	21 fd       	sbrc	r18, 1
 9fc:	03 c0       	rjmp	.+6      	; 0xa04 <fputc+0x16>
 9fe:	8f ef       	ldi	r24, 0xFF	; 255
 a00:	9f ef       	ldi	r25, 0xFF	; 255
 a02:	2c c0       	rjmp	.+88     	; 0xa5c <fputc+0x6e>
 a04:	22 ff       	sbrs	r18, 2
 a06:	16 c0       	rjmp	.+44     	; 0xa34 <fputc+0x46>
 a08:	46 81       	ldd	r20, Z+6	; 0x06
 a0a:	57 81       	ldd	r21, Z+7	; 0x07
 a0c:	24 81       	ldd	r18, Z+4	; 0x04
 a0e:	35 81       	ldd	r19, Z+5	; 0x05
 a10:	42 17       	cp	r20, r18
 a12:	53 07       	cpc	r21, r19
 a14:	44 f4       	brge	.+16     	; 0xa26 <fputc+0x38>
 a16:	a0 81       	ld	r26, Z
 a18:	b1 81       	ldd	r27, Z+1	; 0x01
 a1a:	9d 01       	movw	r18, r26
 a1c:	2f 5f       	subi	r18, 0xFF	; 255
 a1e:	3f 4f       	sbci	r19, 0xFF	; 255
 a20:	31 83       	std	Z+1, r19	; 0x01
 a22:	20 83       	st	Z, r18
 a24:	8c 93       	st	X, r24
 a26:	26 81       	ldd	r18, Z+6	; 0x06
 a28:	37 81       	ldd	r19, Z+7	; 0x07
 a2a:	2f 5f       	subi	r18, 0xFF	; 255
 a2c:	3f 4f       	sbci	r19, 0xFF	; 255
 a2e:	37 83       	std	Z+7, r19	; 0x07
 a30:	26 83       	std	Z+6, r18	; 0x06
 a32:	14 c0       	rjmp	.+40     	; 0xa5c <fputc+0x6e>
 a34:	8b 01       	movw	r16, r22
 a36:	ec 01       	movw	r28, r24
 a38:	fb 01       	movw	r30, r22
 a3a:	00 84       	ldd	r0, Z+8	; 0x08
 a3c:	f1 85       	ldd	r31, Z+9	; 0x09
 a3e:	e0 2d       	mov	r30, r0
 a40:	09 95       	icall
 a42:	89 2b       	or	r24, r25
 a44:	e1 f6       	brne	.-72     	; 0x9fe <fputc+0x10>
 a46:	d8 01       	movw	r26, r16
 a48:	16 96       	adiw	r26, 0x06	; 6
 a4a:	8d 91       	ld	r24, X+
 a4c:	9c 91       	ld	r25, X
 a4e:	17 97       	sbiw	r26, 0x07	; 7
 a50:	01 96       	adiw	r24, 0x01	; 1
 a52:	17 96       	adiw	r26, 0x07	; 7
 a54:	9c 93       	st	X, r25
 a56:	8e 93       	st	-X, r24
 a58:	16 97       	sbiw	r26, 0x06	; 6
 a5a:	ce 01       	movw	r24, r28
 a5c:	df 91       	pop	r29
 a5e:	cf 91       	pop	r28
 a60:	1f 91       	pop	r17
 a62:	0f 91       	pop	r16
 a64:	08 95       	ret

00000a66 <__ultoa_invert>:
 a66:	fa 01       	movw	r30, r20
 a68:	aa 27       	eor	r26, r26
 a6a:	28 30       	cpi	r18, 0x08	; 8
 a6c:	51 f1       	breq	.+84     	; 0xac2 <__ultoa_invert+0x5c>
 a6e:	20 31       	cpi	r18, 0x10	; 16
 a70:	81 f1       	breq	.+96     	; 0xad2 <__ultoa_invert+0x6c>
 a72:	e8 94       	clt
 a74:	6f 93       	push	r22
 a76:	6e 7f       	andi	r22, 0xFE	; 254
 a78:	6e 5f       	subi	r22, 0xFE	; 254
 a7a:	7f 4f       	sbci	r23, 0xFF	; 255
 a7c:	8f 4f       	sbci	r24, 0xFF	; 255
 a7e:	9f 4f       	sbci	r25, 0xFF	; 255
 a80:	af 4f       	sbci	r26, 0xFF	; 255
 a82:	b1 e0       	ldi	r27, 0x01	; 1
 a84:	3e d0       	rcall	.+124    	; 0xb02 <__ultoa_invert+0x9c>
 a86:	b4 e0       	ldi	r27, 0x04	; 4
 a88:	3c d0       	rcall	.+120    	; 0xb02 <__ultoa_invert+0x9c>
 a8a:	67 0f       	add	r22, r23
 a8c:	78 1f       	adc	r23, r24
 a8e:	89 1f       	adc	r24, r25
 a90:	9a 1f       	adc	r25, r26
 a92:	a1 1d       	adc	r26, r1
 a94:	68 0f       	add	r22, r24
 a96:	79 1f       	adc	r23, r25
 a98:	8a 1f       	adc	r24, r26
 a9a:	91 1d       	adc	r25, r1
 a9c:	a1 1d       	adc	r26, r1
 a9e:	6a 0f       	add	r22, r26
 aa0:	71 1d       	adc	r23, r1
 aa2:	81 1d       	adc	r24, r1
 aa4:	91 1d       	adc	r25, r1
 aa6:	a1 1d       	adc	r26, r1
 aa8:	20 d0       	rcall	.+64     	; 0xaea <__ultoa_invert+0x84>
 aaa:	09 f4       	brne	.+2      	; 0xaae <__ultoa_invert+0x48>
 aac:	68 94       	set
 aae:	3f 91       	pop	r19
 ab0:	2a e0       	ldi	r18, 0x0A	; 10
 ab2:	26 9f       	mul	r18, r22
 ab4:	11 24       	eor	r1, r1
 ab6:	30 19       	sub	r19, r0
 ab8:	30 5d       	subi	r19, 0xD0	; 208
 aba:	31 93       	st	Z+, r19
 abc:	de f6       	brtc	.-74     	; 0xa74 <__ultoa_invert+0xe>
 abe:	cf 01       	movw	r24, r30
 ac0:	08 95       	ret
 ac2:	46 2f       	mov	r20, r22
 ac4:	47 70       	andi	r20, 0x07	; 7
 ac6:	40 5d       	subi	r20, 0xD0	; 208
 ac8:	41 93       	st	Z+, r20
 aca:	b3 e0       	ldi	r27, 0x03	; 3
 acc:	0f d0       	rcall	.+30     	; 0xaec <__ultoa_invert+0x86>
 ace:	c9 f7       	brne	.-14     	; 0xac2 <__ultoa_invert+0x5c>
 ad0:	f6 cf       	rjmp	.-20     	; 0xabe <__ultoa_invert+0x58>
 ad2:	46 2f       	mov	r20, r22
 ad4:	4f 70       	andi	r20, 0x0F	; 15
 ad6:	40 5d       	subi	r20, 0xD0	; 208
 ad8:	4a 33       	cpi	r20, 0x3A	; 58
 ada:	18 f0       	brcs	.+6      	; 0xae2 <__ultoa_invert+0x7c>
 adc:	49 5d       	subi	r20, 0xD9	; 217
 ade:	31 fd       	sbrc	r19, 1
 ae0:	40 52       	subi	r20, 0x20	; 32
 ae2:	41 93       	st	Z+, r20
 ae4:	02 d0       	rcall	.+4      	; 0xaea <__ultoa_invert+0x84>
 ae6:	a9 f7       	brne	.-22     	; 0xad2 <__ultoa_invert+0x6c>
 ae8:	ea cf       	rjmp	.-44     	; 0xabe <__ultoa_invert+0x58>
 aea:	b4 e0       	ldi	r27, 0x04	; 4
 aec:	a6 95       	lsr	r26
 aee:	97 95       	ror	r25
 af0:	87 95       	ror	r24
 af2:	77 95       	ror	r23
 af4:	67 95       	ror	r22
 af6:	ba 95       	dec	r27
 af8:	c9 f7       	brne	.-14     	; 0xaec <__ultoa_invert+0x86>
 afa:	00 97       	sbiw	r24, 0x00	; 0
 afc:	61 05       	cpc	r22, r1
 afe:	71 05       	cpc	r23, r1
 b00:	08 95       	ret
 b02:	9b 01       	movw	r18, r22
 b04:	ac 01       	movw	r20, r24
 b06:	0a 2e       	mov	r0, r26
 b08:	06 94       	lsr	r0
 b0a:	57 95       	ror	r21
 b0c:	47 95       	ror	r20
 b0e:	37 95       	ror	r19
 b10:	27 95       	ror	r18
 b12:	ba 95       	dec	r27
 b14:	c9 f7       	brne	.-14     	; 0xb08 <__ultoa_invert+0xa2>
 b16:	62 0f       	add	r22, r18
 b18:	73 1f       	adc	r23, r19
 b1a:	84 1f       	adc	r24, r20
 b1c:	95 1f       	adc	r25, r21
 b1e:	a0 1d       	adc	r26, r0
 b20:	08 95       	ret

00000b22 <__prologue_saves__>:
 b22:	2f 92       	push	r2
 b24:	3f 92       	push	r3
 b26:	4f 92       	push	r4
 b28:	5f 92       	push	r5
 b2a:	6f 92       	push	r6
 b2c:	7f 92       	push	r7
 b2e:	8f 92       	push	r8
 b30:	9f 92       	push	r9
 b32:	af 92       	push	r10
 b34:	bf 92       	push	r11
 b36:	cf 92       	push	r12
 b38:	df 92       	push	r13
 b3a:	ef 92       	push	r14
 b3c:	ff 92       	push	r15
 b3e:	0f 93       	push	r16
 b40:	1f 93       	push	r17
 b42:	cf 93       	push	r28
 b44:	df 93       	push	r29
 b46:	cd b7       	in	r28, 0x3d	; 61
 b48:	de b7       	in	r29, 0x3e	; 62
 b4a:	ca 1b       	sub	r28, r26
 b4c:	db 0b       	sbc	r29, r27
 b4e:	0f b6       	in	r0, 0x3f	; 63
 b50:	f8 94       	cli
 b52:	de bf       	out	0x3e, r29	; 62
 b54:	0f be       	out	0x3f, r0	; 63
 b56:	cd bf       	out	0x3d, r28	; 61
 b58:	09 94       	ijmp

00000b5a <__epilogue_restores__>:
 b5a:	2a 88       	ldd	r2, Y+18	; 0x12
 b5c:	39 88       	ldd	r3, Y+17	; 0x11
 b5e:	48 88       	ldd	r4, Y+16	; 0x10
 b60:	5f 84       	ldd	r5, Y+15	; 0x0f
 b62:	6e 84       	ldd	r6, Y+14	; 0x0e
 b64:	7d 84       	ldd	r7, Y+13	; 0x0d
 b66:	8c 84       	ldd	r8, Y+12	; 0x0c
 b68:	9b 84       	ldd	r9, Y+11	; 0x0b
 b6a:	aa 84       	ldd	r10, Y+10	; 0x0a
 b6c:	b9 84       	ldd	r11, Y+9	; 0x09
 b6e:	c8 84       	ldd	r12, Y+8	; 0x08
 b70:	df 80       	ldd	r13, Y+7	; 0x07
 b72:	ee 80       	ldd	r14, Y+6	; 0x06
 b74:	fd 80       	ldd	r15, Y+5	; 0x05
 b76:	0c 81       	ldd	r16, Y+4	; 0x04
 b78:	1b 81       	ldd	r17, Y+3	; 0x03
 b7a:	aa 81       	ldd	r26, Y+2	; 0x02
 b7c:	b9 81       	ldd	r27, Y+1	; 0x01
 b7e:	ce 0f       	add	r28, r30
 b80:	d1 1d       	adc	r29, r1
 b82:	0f b6       	in	r0, 0x3f	; 63
 b84:	f8 94       	cli
 b86:	de bf       	out	0x3e, r29	; 62
 b88:	0f be       	out	0x3f, r0	; 63
 b8a:	cd bf       	out	0x3d, r28	; 61
 b8c:	ed 01       	movw	r28, r26
 b8e:	08 95       	ret

00000b90 <_exit>:
 b90:	f8 94       	cli

00000b92 <__stop_program>:
 b92:	ff cf       	rjmp	.-2      	; 0xb92 <__stop_program>
