
IHM_Envase_LucasMM_MatheusRW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000014e  00800100  00000f94  00001028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f94  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  0080024e  0080024e  00001176  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001176  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00001214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001dfe  00000000  00000000  00001274  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000972  00000000  00000000  00003072  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c3d  00000000  00000000  000039e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  00004624  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000054f  00000000  00000000  000046ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001031  00000000  00000000  00004c3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00005c6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 68 04 	jmp	0x8d0	; 0x8d0 <__vector_1>
   8:	0c 94 7c 04 	jmp	0x8f8	; 0x8f8 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e9       	ldi	r30, 0x94	; 148
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 34       	cpi	r26, 0x4E	; 78
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	ae e4       	ldi	r26, 0x4E	; 78
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 35       	cpi	r26, 0x56	; 86
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 0a 01 	call	0x214	; 0x214 <main>
  9e:	0c 94 c8 07 	jmp	0xf90	; 0xf90 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <lcd_cmd>:
   send a single command to the display.
*/
void lcd_cmd(unsigned char c, /*!< command to send */
             cmdType_t cmd /*!< command to send */)
{
    switch(cmd) {
  a6:	66 23       	and	r22, r22
  a8:	19 f0       	breq	.+6      	; 0xb0 <lcd_cmd+0xa>
  aa:	61 30       	cpi	r22, 0x01	; 1
  ac:	19 f0       	breq	.+6      	; 0xb4 <lcd_cmd+0xe>
  ae:	03 c0       	rjmp	.+6      	; 0xb6 <lcd_cmd+0x10>
    case LCD_CMD:
        rst_bit(LCD_RS);
  b0:	59 98       	cbi	0x0b, 1	; 11
        break;
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <lcd_cmd+0x10>
    case LCD_CHAR:
        set_bit(LCD_RS);
  b4:	59 9a       	sbi	0x0b, 1	; 11

    /*send first nibble (high half) of data*/
#if USE_LOWER_NIBLE == 1
    LCD_PORT = (LCD_PORT & 0xf0) | ((c & 0xf0) >> 4);
#else
    LCD_PORT = (LCD_PORT & 0x0f) | (c & 0xf0);
  b6:	9b b1       	in	r25, 0x0b	; 11
  b8:	9f 70       	andi	r25, 0x0F	; 15
  ba:	28 2f       	mov	r18, r24
  bc:	20 7f       	andi	r18, 0xF0	; 240
  be:	92 2b       	or	r25, r18
  c0:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	45 e0       	ldi	r20, 0x05	; 5
  c4:	4a 95       	dec	r20
  c6:	f1 f7       	brne	.-4      	; 0xc4 <lcd_cmd+0x1e>
  c8:	00 00       	nop
#endif
    enable_pulse();
  ca:	58 9a       	sbi	0x0b, 0	; 11
  cc:	95 e0       	ldi	r25, 0x05	; 5
  ce:	9a 95       	dec	r25
  d0:	f1 f7       	brne	.-4      	; 0xce <lcd_cmd+0x28>
  d2:	00 00       	nop
  d4:	58 98       	cbi	0x0b, 0	; 11
  d6:	40 ef       	ldi	r20, 0xF0	; 240
  d8:	4a 95       	dec	r20
  da:	f1 f7       	brne	.-4      	; 0xd8 <lcd_cmd+0x32>

    /*send second (lower) nibble of data*/
#if USE_LOWER_NIBLE == 1
    LCD_PORT = (LCD_PORT & 0xf0) | (c & 0x0f);
#else
    LCD_PORT = (LCD_PORT & 0x0f) | ((c & 0x0f) << 4);
  dc:	2b b1       	in	r18, 0x0b	; 11
  de:	92 2f       	mov	r25, r18
  e0:	9f 70       	andi	r25, 0x0F	; 15
  e2:	40 e1       	ldi	r20, 0x10	; 16
  e4:	84 9f       	mul	r24, r20
  e6:	90 01       	movw	r18, r0
  e8:	11 24       	eor	r1, r1
  ea:	29 2b       	or	r18, r25
  ec:	2b b9       	out	0x0b, r18	; 11
  ee:	95 e0       	ldi	r25, 0x05	; 5
  f0:	9a 95       	dec	r25
  f2:	f1 f7       	brne	.-4      	; 0xf0 <lcd_cmd+0x4a>
  f4:	00 00       	nop
#endif
    enable_pulse();
  f6:	58 9a       	sbi	0x0b, 0	; 11
  f8:	45 e0       	ldi	r20, 0x05	; 5
  fa:	4a 95       	dec	r20
  fc:	f1 f7       	brne	.-4      	; 0xfa <lcd_cmd+0x54>
  fe:	00 00       	nop
 100:	58 98       	cbi	0x0b, 0	; 11
 102:	90 ef       	ldi	r25, 0xF0	; 240
 104:	9a 95       	dec	r25
 106:	f1 f7       	brne	.-4      	; 0x104 <lcd_cmd+0x5e>

    //wait if cmd is clear or return home (exec time ~1.52ms)
    if(c<4 && cmd == LCD_CMD)
 108:	84 30       	cpi	r24, 0x04	; 4
 10a:	40 f4       	brcc	.+16     	; 0x11c <lcd_cmd+0x76>
 10c:	61 11       	cpse	r22, r1
 10e:	06 c0       	rjmp	.+12     	; 0x11c <lcd_cmd+0x76>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 110:	8f e3       	ldi	r24, 0x3F	; 63
 112:	9f e1       	ldi	r25, 0x1F	; 31
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <lcd_cmd+0x6e>
 118:	00 c0       	rjmp	.+0      	; 0x11a <lcd_cmd+0x74>
 11a:	00 00       	nop
    {
        _delay_ms(2);
    }
    //set_bit(LCD_RS);
    LCD_PORT &= ~(LCD_DATA_MASK);
 11c:	8b b1       	in	r24, 0x0b	; 11
 11e:	8f 70       	andi	r24, 0x0F	; 15
 120:	8b b9       	out	0x0b, r24	; 11
 122:	08 95       	ret

00000124 <lcd_4bit_init>:
void lcd_4bit_init(void)
{

    /* reset lcd port bits and set RS low */
    //LCD_PORT &= 0x0f;
    rst_bit(LCD_RS);
 124:	59 98       	cbi	0x0b, 1	; 11
    rst_bit(LCD_EN);
 126:	58 98       	cbi	0x0b, 0	; 11
 128:	2f ef       	ldi	r18, 0xFF	; 255
 12a:	89 ef       	ldi	r24, 0xF9	; 249
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	21 50       	subi	r18, 0x01	; 1
 130:	80 40       	sbci	r24, 0x00	; 0
 132:	90 40       	sbci	r25, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <lcd_4bit_init+0xa>
 136:	00 c0       	rjmp	.+0      	; 0x138 <lcd_4bit_init+0x14>
 138:	00 00       	nop
       @see https://www.sparkfun.com/datasheets/LCD/HD44780.pdf
    */
#if USE_LOWER_NIBLE == 1
    LCD_PORT = (LCD_PORT & 0xf0) | 0x03;
#else
    LCD_PORT = (LCD_PORT & 0x0f) | 0x30;
 13a:	8b b1       	in	r24, 0x0b	; 11
 13c:	8f 70       	andi	r24, 0x0F	; 15
 13e:	80 63       	ori	r24, 0x30	; 48
 140:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 142:	25 e0       	ldi	r18, 0x05	; 5
 144:	2a 95       	dec	r18
 146:	f1 f7       	brne	.-4      	; 0x144 <lcd_4bit_init+0x20>
 148:	00 00       	nop
#endif
    enable_pulse();
 14a:	58 9a       	sbi	0x0b, 0	; 11
 14c:	85 e0       	ldi	r24, 0x05	; 5
 14e:	8a 95       	dec	r24
 150:	f1 f7       	brne	.-4      	; 0x14e <lcd_4bit_init+0x2a>
 152:	00 00       	nop
 154:	58 98       	cbi	0x0b, 0	; 11
 156:	90 ef       	ldi	r25, 0xF0	; 240
 158:	9a 95       	dec	r25
 15a:	f1 f7       	brne	.-4      	; 0x158 <lcd_4bit_init+0x34>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15c:	8f e1       	ldi	r24, 0x1F	; 31
 15e:	9e e4       	ldi	r25, 0x4E	; 78
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <lcd_4bit_init+0x3c>
 164:	00 c0       	rjmp	.+0      	; 0x166 <lcd_4bit_init+0x42>
 166:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 168:	95 e0       	ldi	r25, 0x05	; 5
 16a:	9a 95       	dec	r25
 16c:	f1 f7       	brne	.-4      	; 0x16a <lcd_4bit_init+0x46>
 16e:	00 00       	nop
    _delay_ms(5);
    enable_pulse();
 170:	58 9a       	sbi	0x0b, 0	; 11
 172:	25 e0       	ldi	r18, 0x05	; 5
 174:	2a 95       	dec	r18
 176:	f1 f7       	brne	.-4      	; 0x174 <lcd_4bit_init+0x50>
 178:	00 00       	nop
 17a:	58 98       	cbi	0x0b, 0	; 11
 17c:	80 ef       	ldi	r24, 0xF0	; 240
 17e:	8a 95       	dec	r24
 180:	f1 f7       	brne	.-4      	; 0x17e <lcd_4bit_init+0x5a>
 182:	8f e1       	ldi	r24, 0x1F	; 31
 184:	93 e0       	ldi	r25, 0x03	; 3
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <lcd_4bit_init+0x62>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <lcd_4bit_init+0x68>
 18c:	00 00       	nop
 18e:	95 e0       	ldi	r25, 0x05	; 5
 190:	9a 95       	dec	r25
 192:	f1 f7       	brne	.-4      	; 0x190 <lcd_4bit_init+0x6c>
 194:	00 00       	nop
    _delay_us(200);
    enable_pulse();
 196:	58 9a       	sbi	0x0b, 0	; 11
 198:	25 e0       	ldi	r18, 0x05	; 5
 19a:	2a 95       	dec	r18
 19c:	f1 f7       	brne	.-4      	; 0x19a <lcd_4bit_init+0x76>
 19e:	00 00       	nop
 1a0:	58 98       	cbi	0x0b, 0	; 11
 1a2:	80 ef       	ldi	r24, 0xF0	; 240
 1a4:	8a 95       	dec	r24
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <lcd_4bit_init+0x80>

#if USE_LOWER_NIBLE
    LCD_PORT = (LCD_PORT & 0xf0) | 0x02;
#else
    LCD_PORT = (LCD_PORT & 0x0f) | 0x20;
 1a8:	8b b1       	in	r24, 0x0b	; 11
 1aa:	8f 70       	andi	r24, 0x0F	; 15
 1ac:	80 62       	ori	r24, 0x20	; 32
 1ae:	8b b9       	out	0x0b, r24	; 11
 1b0:	95 e0       	ldi	r25, 0x05	; 5
 1b2:	9a 95       	dec	r25
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <lcd_4bit_init+0x8e>
 1b6:	00 00       	nop
#endif
    enable_pulse();
 1b8:	58 9a       	sbi	0x0b, 0	; 11
 1ba:	25 e0       	ldi	r18, 0x05	; 5
 1bc:	2a 95       	dec	r18
 1be:	f1 f7       	brne	.-4      	; 0x1bc <lcd_4bit_init+0x98>
 1c0:	00 00       	nop
 1c2:	58 98       	cbi	0x0b, 0	; 11
 1c4:	80 ef       	ldi	r24, 0xF0	; 240
 1c6:	8a 95       	dec	r24
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <lcd_4bit_init+0xa2>


    /* set interface 4 bits, 2 lines, 8 dots font  */
    lcd_cmd(0b00101000,LCD_CMD);
 1ca:	60 e0       	ldi	r22, 0x00	; 0
 1cc:	88 e2       	ldi	r24, 0x28	; 40
 1ce:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
    lcd_cmd(0x08,LCD_CMD); // turn off display
 1d2:	60 e0       	ldi	r22, 0x00	; 0
 1d4:	88 e0       	ldi	r24, 0x08	; 8
 1d6:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
    lcd_cmd(0x01,LCD_CMD); // clear display
 1da:	60 e0       	ldi	r22, 0x00	; 0
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
    lcd_cmd(0x0c,LCD_CMD); // turn displ. on, visible cursor, no blink
 1e2:	60 e0       	ldi	r22, 0x00	; 0
 1e4:	8c e0       	ldi	r24, 0x0C	; 12
 1e6:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
    lcd_cmd(0x80,LCD_CMD); //set CGRAM adress to 0 (1st position)
 1ea:	60 e0       	ldi	r22, 0x00	; 0
 1ec:	80 e8       	ldi	r24, 0x80	; 128
 1ee:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
 1f2:	08 95       	ret

000001f4 <lcd_write>:

/**
   write a string to the display.
 */
void lcd_write(const char * str)
{
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	ec 01       	movw	r28, r24
    for (;*str;++str)
 1fa:	88 81       	ld	r24, Y
 1fc:	88 23       	and	r24, r24
 1fe:	39 f0       	breq	.+14     	; 0x20e <lcd_write+0x1a>
 200:	21 96       	adiw	r28, 0x01	; 1
    {
        lcd_cmd(*str,LCD_CHAR);
 202:	61 e0       	ldi	r22, 0x01	; 1
 204:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
/**
   write a string to the display.
 */
void lcd_write(const char * str)
{
    for (;*str;++str)
 208:	89 91       	ld	r24, Y+
 20a:	81 11       	cpse	r24, r1
 20c:	fa cf       	rjmp	.-12     	; 0x202 <lcd_write+0xe>
    {
        lcd_cmd(*str,LCD_CHAR);
    }
}
 20e:	df 91       	pop	r29
 210:	cf 91       	pop	r28
 212:	08 95       	ret

00000214 <main>:
uint8_t lot_quantity = LOT_QUANTITY_DEFAULT;    //Caixas prontas no lote atual
uint8_t lot_number = LOT_NUMBER_DEFAULT;        //Número do lote (quantos lotes já foram feitos)

/*--------- Main ---------*/
int main(void)
{
 214:	cf 93       	push	r28
 216:	df 93       	push	r29
 218:	cd b7       	in	r28, 0x3d	; 61
 21a:	de b7       	in	r29, 0x3e	; 62
 21c:	61 97       	sbiw	r28, 0x11	; 17
 21e:	0f b6       	in	r0, 0x3f	; 63
 220:	f8 94       	cli
 222:	de bf       	out	0x3e, r29	; 62
 224:	0f be       	out	0x3f, r0	; 63
 226:	cd bf       	out	0x3d, r28	; 61
    //configure interrupts
    EICRA |= 0b00001010; //set INT0 and INT1 as falling edge
 228:	e9 e6       	ldi	r30, 0x69	; 105
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	80 81       	ld	r24, Z
 22e:	8a 60       	ori	r24, 0x0A	; 10
 230:	80 83       	st	Z, r24

    EIMSK |= 0x03; //enable INT 1 and 0
 232:	8d b3       	in	r24, 0x1d	; 29
 234:	83 60       	ori	r24, 0x03	; 3
 236:	8d bb       	out	0x1d, r24	; 29

    //set up pin directions
    DDRB = 0x00;
 238:	14 b8       	out	0x04, r1	; 4
    DDRC = 0b00111000;
 23a:	88 e3       	ldi	r24, 0x38	; 56
 23c:	87 b9       	out	0x07, r24	; 7
    DDRD = 0b11110011;
 23e:	83 ef       	ldi	r24, 0xF3	; 243
 240:	8a b9       	out	0x0a, r24	; 10
    __asm__("sei;");
 242:	78 94       	sei
    //sei();

    lcd_4bit_init();
 244:	0e 94 92 00 	call	0x124	; 0x124 <lcd_4bit_init>

    lcd_write("Booting");
 248:	8c e0       	ldi	r24, 0x0C	; 12
 24a:	91 e0       	ldi	r25, 0x01	; 1
 24c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 250:	2f ef       	ldi	r18, 0xFF	; 255
 252:	33 ec       	ldi	r19, 0xC3	; 195
 254:	89 e0       	ldi	r24, 0x09	; 9
 256:	21 50       	subi	r18, 0x01	; 1
 258:	30 40       	sbci	r19, 0x00	; 0
 25a:	80 40       	sbci	r24, 0x00	; 0
 25c:	e1 f7       	brne	.-8      	; 0x256 <main+0x42>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <main+0x4c>
 260:	00 00       	nop
    _delay_ms(200);
    lcd_write(".");
 262:	85 e3       	ldi	r24, 0x35	; 53
 264:	92 e0       	ldi	r25, 0x02	; 2
 266:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
 26a:	9f ef       	ldi	r25, 0xFF	; 255
 26c:	23 ec       	ldi	r18, 0xC3	; 195
 26e:	39 e0       	ldi	r19, 0x09	; 9
 270:	91 50       	subi	r25, 0x01	; 1
 272:	20 40       	sbci	r18, 0x00	; 0
 274:	30 40       	sbci	r19, 0x00	; 0
 276:	e1 f7       	brne	.-8      	; 0x270 <main+0x5c>
 278:	00 c0       	rjmp	.+0      	; 0x27a <main+0x66>
 27a:	00 00       	nop
    _delay_ms(200);
    lcd_write(".");
 27c:	85 e3       	ldi	r24, 0x35	; 53
 27e:	92 e0       	ldi	r25, 0x02	; 2
 280:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
 284:	8f ef       	ldi	r24, 0xFF	; 255
 286:	93 ec       	ldi	r25, 0xC3	; 195
 288:	29 e0       	ldi	r18, 0x09	; 9
 28a:	81 50       	subi	r24, 0x01	; 1
 28c:	90 40       	sbci	r25, 0x00	; 0
 28e:	20 40       	sbci	r18, 0x00	; 0
 290:	e1 f7       	brne	.-8      	; 0x28a <main+0x76>
 292:	00 c0       	rjmp	.+0      	; 0x294 <main+0x80>
 294:	00 00       	nop
    _delay_ms(200);
    lcd_write(".");
 296:	85 e3       	ldi	r24, 0x35	; 53
 298:	92 e0       	ldi	r25, 0x02	; 2
 29a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
 29e:	3f ef       	ldi	r19, 0xFF	; 255
 2a0:	83 ec       	ldi	r24, 0xC3	; 195
 2a2:	99 e0       	ldi	r25, 0x09	; 9
 2a4:	31 50       	subi	r19, 0x01	; 1
 2a6:	80 40       	sbci	r24, 0x00	; 0
 2a8:	90 40       	sbci	r25, 0x00	; 0
 2aa:	e1 f7       	brne	.-8      	; 0x2a4 <main+0x90>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <main+0x9a>
 2ae:	00 00       	nop
            do
            {
                lcd_move_cursor(0,0);
                lcd_write("Cycle Count:");
                lcd_move_cursor(0, 1);
                snprintf(n_buff, 4, "%02i", lot_size);
 2b0:	0f 2e       	mov	r0, r31
 2b2:	f0 e5       	ldi	r31, 0x50	; 80
 2b4:	af 2e       	mov	r10, r31
 2b6:	f1 e0       	ldi	r31, 0x01	; 1
 2b8:	bf 2e       	mov	r11, r31
 2ba:	f0 2d       	mov	r31, r0
 2bc:	9e 01       	movw	r18, r28
 2be:	2f 5f       	subi	r18, 0xFF	; 255
 2c0:	3f 4f       	sbci	r19, 0xFF	; 255
 2c2:	29 01       	movw	r4, r18
 2c4:	e2 2e       	mov	r14, r18
 2c6:	f5 2c       	mov	r15, r5
            lcd_clear();
            do {
                lcd_move_cursor(0,0);
                lcd_write("Delay:");
                lcd_move_cursor(0, 1);
                snprintf(n_buff, 5, "%02i s", fill_delay);
 2c8:	0f 2e       	mov	r0, r31
 2ca:	fc e5       	ldi	r31, 0x5C	; 92
 2cc:	cf 2e       	mov	r12, r31
 2ce:	f1 e0       	ldi	r31, 0x01	; 1
 2d0:	df 2e       	mov	r13, r31
 2d2:	f0 2d       	mov	r31, r0
 2d4:	0f 2e       	mov	r0, r31
 2d6:	f5 e0       	ldi	r31, 0x05	; 5
 2d8:	7f 2e       	mov	r7, r31
 2da:	f0 2d       	mov	r31, r0
                    _delay_ms(50);
                    while(!get_bit(UP_BTN)); //wait button release
                }
                //decrement lot size
                else if (!get_bit(DWN_BTN)) {
                    lot_size = lot_size == 1 ? 24 : lot_size - 1;
 2dc:	0f 2e       	mov	r0, r31
 2de:	f8 e1       	ldi	r31, 0x18	; 24
 2e0:	6f 2e       	mov	r6, r31
 2e2:	f0 2d       	mov	r31, r0
    _delay_ms(200);
    lcd_write(".");
    _delay_ms(200);

    while(1) {
        switch(major_state) {
 2e4:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <major_state>
 2e8:	82 30       	cpi	r24, 0x02	; 2
 2ea:	09 f4       	brne	.+2      	; 0x2ee <main+0xda>
 2ec:	bf c0       	rjmp	.+382    	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 2ee:	28 f4       	brcc	.+10     	; 0x2fa <main+0xe6>
 2f0:	88 23       	and	r24, r24
 2f2:	61 f0       	breq	.+24     	; 0x30c <main+0xf8>
 2f4:	81 30       	cpi	r24, 0x01	; 1
 2f6:	09 f1       	breq	.+66     	; 0x33a <main+0x126>
 2f8:	cc c2       	rjmp	.+1432   	; 0x892 <__LOCK_REGION_LENGTH__+0x492>
 2fa:	84 30       	cpi	r24, 0x04	; 4
 2fc:	09 f4       	brne	.+2      	; 0x300 <main+0xec>
 2fe:	b8 c1       	rjmp	.+880    	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
 300:	08 f4       	brcc	.+2      	; 0x304 <main+0xf0>
 302:	a8 c1       	rjmp	.+848    	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
 304:	85 30       	cpi	r24, 0x05	; 5
 306:	09 f4       	brne	.+2      	; 0x30a <main+0xf6>
 308:	bb c2       	rjmp	.+1398   	; 0x880 <__LOCK_REGION_LENGTH__+0x480>
 30a:	c3 c2       	rjmp	.+1414   	; 0x892 <__LOCK_REGION_LENGTH__+0x492>
        case START:
            run_state = WAITING;
 30c:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <run_state>
            rst_bit(CYL_A);
 310:	43 98       	cbi	0x08, 3	; 8
            rst_bit(CYL_B);
 312:	44 98       	cbi	0x08, 4	; 8
            set_bit(CYL_C);
 314:	45 9a       	sbi	0x08, 5	; 8
void lcd_4bit_init(void);
void lcd_cmd(unsigned char c, cmdType_t type);

inline void lcd_move_cursor(uint8_t c, uint8_t l)
{
    lcd_cmd(0x80 + (c < 0x0f ? c : 0x0f ) + (l > 0 ? 0x40 : 0), LCD_CMD);
 316:	60 e0       	ldi	r22, 0x00	; 0
 318:	80 e8       	ldi	r24, 0x80	; 128
 31a:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
            lcd_move_cursor(0,0);
            lcd_write("Wait start pos.");
 31e:	84 e1       	ldi	r24, 0x14	; 20
 320:	91 e0       	ldi	r25, 0x01	; 1
 322:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
            if(!(get_bit(A_0) || get_bit(B_0) || get_bit(C_1))) {
 326:	18 99       	sbic	0x03, 0	; 3
 328:	bf c2       	rjmp	.+1406   	; 0x8a8 <__LOCK_REGION_LENGTH__+0x4a8>
 32a:	1a 99       	sbic	0x03, 2	; 3
 32c:	bd c2       	rjmp	.+1402   	; 0x8a8 <__LOCK_REGION_LENGTH__+0x4a8>
 32e:	1d 99       	sbic	0x03, 5	; 3
 330:	bb c2       	rjmp	.+1398   	; 0x8a8 <__LOCK_REGION_LENGTH__+0x4a8>
                major_state = PWD;
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <major_state>
 338:	b7 c2       	rjmp	.+1390   	; 0x8a8 <__LOCK_REGION_LENGTH__+0x4a8>
            }
            break;
        case PWD:
            lcd_clear();
 33a:	60 e0       	ldi	r22, 0x00	; 0
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
            uint8_t curr_opt = 0;
            uint8_t pwd_pos = 0;
            memcpy(pwd_buff, "0   \0", 5);
 342:	85 e0       	ldi	r24, 0x05	; 5
 344:	e6 e0       	ldi	r30, 0x06	; 6
 346:	f1 e0       	ldi	r31, 0x01	; 1
 348:	af e4       	ldi	r26, 0x4F	; 79
 34a:	b2 e0       	ldi	r27, 0x02	; 2
 34c:	01 90       	ld	r0, Z+
 34e:	0d 92       	st	X+, r0
 350:	8a 95       	dec	r24
 352:	e1 f7       	brne	.-8      	; 0x34c <main+0x138>
            }
            break;
        case PWD:
            lcd_clear();
            uint8_t curr_opt = 0;
            uint8_t pwd_pos = 0;
 354:	00 e0       	ldi	r16, 0x00	; 0
                major_state = PWD;
            }
            break;
        case PWD:
            lcd_clear();
            uint8_t curr_opt = 0;
 356:	10 e0       	ldi	r17, 0x00	; 0
 358:	60 e0       	ldi	r22, 0x00	; 0
 35a:	80 e8       	ldi	r24, 0x80	; 128
 35c:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
            uint8_t pwd_pos = 0;
            memcpy(pwd_buff, "0   \0", 5);
            while(1)
            {
                lcd_move_cursor(0,0);
                lcd_write(pwd_txt);
 360:	84 e4       	ldi	r24, 0x44	; 68
 362:	92 e0       	ldi	r25, 0x02	; 2
 364:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
 368:	60 e0       	ldi	r22, 0x00	; 0
 36a:	80 ec       	ldi	r24, 0xC0	; 192
 36c:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
                lcd_move_cursor(0, 1);
                pwd_buff[pwd_pos] = '0' + curr_opt;
 370:	e0 2f       	mov	r30, r16
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	e1 5b       	subi	r30, 0xB1	; 177
 376:	fd 4f       	sbci	r31, 0xFD	; 253
 378:	80 e3       	ldi	r24, 0x30	; 48
 37a:	81 0f       	add	r24, r17
 37c:	80 83       	st	Z, r24
                lcd_write(pwd_buff);
 37e:	8f e4       	ldi	r24, 0x4F	; 79
 380:	92 e0       	ldi	r25, 0x02	; 2
 382:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
                while(get_bit(UP_BTN) && get_bit(DWN_BTN) && get_bit(ENTR_BTN)) {
 386:	1f 9b       	sbis	0x03, 7	; 3
 388:	04 c0       	rjmp	.+8      	; 0x392 <main+0x17e>
 38a:	30 9b       	sbis	0x06, 0	; 6
 38c:	02 c0       	rjmp	.+4      	; 0x392 <main+0x17e>
 38e:	31 99       	sbic	0x06, 1	; 6
 390:	fa cf       	rjmp	.-12     	; 0x386 <main+0x172>
                    //draw_idle();
                }

                if(!get_bit(UP_BTN)) {
 392:	1f 99       	sbic	0x03, 7	; 3
 394:	11 c0       	rjmp	.+34     	; 0x3b8 <main+0x1a4>
                    curr_opt = curr_opt >= 9 ? 0 : curr_opt + 1;
 396:	19 30       	cpi	r17, 0x09	; 9
 398:	10 f4       	brcc	.+4      	; 0x39e <main+0x18a>
 39a:	1f 5f       	subi	r17, 0xFF	; 255
 39c:	01 c0       	rjmp	.+2      	; 0x3a0 <main+0x18c>
 39e:	10 e0       	ldi	r17, 0x00	; 0
 3a0:	3f ef       	ldi	r19, 0xFF	; 255
 3a2:	80 e7       	ldi	r24, 0x70	; 112
 3a4:	92 e0       	ldi	r25, 0x02	; 2
 3a6:	31 50       	subi	r19, 0x01	; 1
 3a8:	80 40       	sbci	r24, 0x00	; 0
 3aa:	90 40       	sbci	r25, 0x00	; 0
 3ac:	e1 f7       	brne	.-8      	; 0x3a6 <main+0x192>
 3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <main+0x19c>
 3b0:	00 00       	nop
                    _delay_ms(50);
                    while(!get_bit(UP_BTN)); //wait button release
 3b2:	1f 9b       	sbis	0x03, 7	; 3
 3b4:	fe cf       	rjmp	.-4      	; 0x3b2 <main+0x19e>
 3b6:	d0 cf       	rjmp	.-96     	; 0x358 <main+0x144>
                } else if (!get_bit(DWN_BTN)) {
 3b8:	30 99       	sbic	0x06, 0	; 6
 3ba:	11 c0       	rjmp	.+34     	; 0x3de <main+0x1ca>
                    curr_opt = curr_opt == 0 ? 9 : curr_opt - 1;
 3bc:	11 23       	and	r17, r17
 3be:	11 f0       	breq	.+4      	; 0x3c4 <main+0x1b0>
 3c0:	11 50       	subi	r17, 0x01	; 1
 3c2:	01 c0       	rjmp	.+2      	; 0x3c6 <main+0x1b2>
 3c4:	19 e0       	ldi	r17, 0x09	; 9
 3c6:	2f ef       	ldi	r18, 0xFF	; 255
 3c8:	30 e7       	ldi	r19, 0x70	; 112
 3ca:	82 e0       	ldi	r24, 0x02	; 2
 3cc:	21 50       	subi	r18, 0x01	; 1
 3ce:	30 40       	sbci	r19, 0x00	; 0
 3d0:	80 40       	sbci	r24, 0x00	; 0
 3d2:	e1 f7       	brne	.-8      	; 0x3cc <main+0x1b8>
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <main+0x1c2>
 3d6:	00 00       	nop
                    _delay_ms(50);
                    while(!get_bit(DWN_BTN)); //wait button release
 3d8:	30 9b       	sbis	0x06, 0	; 6
 3da:	fe cf       	rjmp	.-4      	; 0x3d8 <main+0x1c4>
 3dc:	bd cf       	rjmp	.-134    	; 0x358 <main+0x144>
                } else if (!get_bit(ENTR_BTN)) {
 3de:	31 99       	sbic	0x06, 1	; 6
 3e0:	bb cf       	rjmp	.-138    	; 0x358 <main+0x144>
                    if(pwd_pos == PWD_LEN-1)
 3e2:	03 30       	cpi	r16, 0x03	; 3
 3e4:	b1 f5       	brne	.+108    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
                    {
                        //check password match
                        if(strncmp(PWD_DEFAULT, pwd_buff, 4) == 0) {
 3e6:	44 e0       	ldi	r20, 0x04	; 4
 3e8:	50 e0       	ldi	r21, 0x00	; 0
 3ea:	6f e4       	ldi	r22, 0x4F	; 79
 3ec:	72 e0       	ldi	r23, 0x02	; 2
 3ee:	84 e2       	ldi	r24, 0x24	; 36
 3f0:	91 e0       	ldi	r25, 0x01	; 1
 3f2:	0e 94 c2 04 	call	0x984	; 0x984 <strncmp>
 3f6:	89 2b       	or	r24, r25
 3f8:	41 f4       	brne	.+16     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
                            major_state = CONFIG;
 3fa:	82 e0       	ldi	r24, 0x02	; 2
 3fc:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <major_state>
                            lcd_clear();
 400:	60 e0       	ldi	r22, 0x00	; 0
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
                            break;
 408:	31 c0       	rjmp	.+98     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 40a:	60 e0       	ldi	r22, 0x00	; 0
 40c:	80 ec       	ldi	r24, 0xC0	; 192
 40e:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
                        }
                        //wrong password
                        else {
                            lcd_move_cursor(0, 1);
                            lcd_write("Wrong passwd");
 412:	89 e2       	ldi	r24, 0x29	; 41
 414:	91 e0       	ldi	r25, 0x01	; 1
 416:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
 41a:	9f ef       	ldi	r25, 0xFF	; 255
 41c:	23 ed       	ldi	r18, 0xD3	; 211
 41e:	30 e3       	ldi	r19, 0x30	; 48
 420:	91 50       	subi	r25, 0x01	; 1
 422:	20 40       	sbci	r18, 0x00	; 0
 424:	30 40       	sbci	r19, 0x00	; 0
 426:	e1 f7       	brne	.-8      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 428:	00 c0       	rjmp	.+0      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 42a:	00 00       	nop
                            _delay_ms(1000);
                            lcd_clear();
 42c:	60 e0       	ldi	r22, 0x00	; 0
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
 434:	60 e0       	ldi	r22, 0x00	; 0
 436:	80 ec       	ldi	r24, 0xC0	; 192
 438:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
                            lcd_move_cursor(0, 1);
                            memcpy(pwd_buff, "0   \0", 5);
 43c:	85 e0       	ldi	r24, 0x05	; 5
 43e:	e6 e0       	ldi	r30, 0x06	; 6
 440:	f1 e0       	ldi	r31, 0x01	; 1
 442:	af e4       	ldi	r26, 0x4F	; 79
 444:	b2 e0       	ldi	r27, 0x02	; 2
 446:	01 90       	ld	r0, Z+
 448:	0d 92       	st	X+, r0
 44a:	8a 95       	dec	r24
 44c:	e1 f7       	brne	.-8      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
                            pwd_pos = 0;
 44e:	00 e0       	ldi	r16, 0x00	; 0
 450:	01 c0       	rjmp	.+2      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
                        }
                    }
                    else {
                        //pwd_buff[pwd_pos] = '0' + curr_opt;
                        ++pwd_pos;
 452:	0f 5f       	subi	r16, 0xFF	; 255
                    }
                    while(!get_bit(ENTR_BTN)); //wait for button release
 454:	31 9b       	sbis	0x06, 1	; 6
 456:	fe cf       	rjmp	.-4      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 458:	8f ef       	ldi	r24, 0xFF	; 255
 45a:	90 e7       	ldi	r25, 0x70	; 112
 45c:	22 e0       	ldi	r18, 0x02	; 2
 45e:	81 50       	subi	r24, 0x01	; 1
 460:	90 40       	sbci	r25, 0x00	; 0
 462:	20 40       	sbci	r18, 0x00	; 0
 464:	e1 f7       	brne	.-8      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 466:	00 c0       	rjmp	.+0      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 468:	00 00       	nop
 46a:	76 cf       	rjmp	.-276    	; 0x358 <main+0x144>
 46c:	60 e0       	ldi	r22, 0x00	; 0
 46e:	80 e8       	ldi	r24, 0x80	; 128
 470:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
                    _delay_ms(50);
                }
            }
        case CONFIG:
            lcd_move_cursor(0,0);
            lcd_write("Conf. param.");
 474:	86 e3       	ldi	r24, 0x36	; 54
 476:	91 e0       	ldi	r25, 0x01	; 1
 478:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
 47c:	3f ef       	ldi	r19, 0xFF	; 255
 47e:	89 e6       	ldi	r24, 0x69	; 105
 480:	98 e1       	ldi	r25, 0x18	; 24
 482:	31 50       	subi	r19, 0x01	; 1
 484:	80 40       	sbci	r24, 0x00	; 0
 486:	90 40       	sbci	r25, 0x00	; 0
 488:	e1 f7       	brne	.-8      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 48a:	00 c0       	rjmp	.+0      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 48c:	00 00       	nop
            _delay_ms(500);
            lcd_clear();
 48e:	60 e0       	ldi	r22, 0x00	; 0
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
            do
            {
                lcd_move_cursor(0,0);
                lcd_write("Cycle Count:");
                lcd_move_cursor(0, 1);
                snprintf(n_buff, 4, "%02i", lot_size);
 496:	14 e0       	ldi	r17, 0x04	; 4
                while(get_bit(UP_BTN) && get_bit(DWN_BTN) && get_bit(ENTR_BTN)) {
                    //draw_idle();
                }
                // increment lot amount
                if(!get_bit(UP_BTN)) {
                    lot_size = lot_size >= 24 ? 1 : lot_size + 1;
 498:	01 e0       	ldi	r16, 0x01	; 1
 49a:	60 e0       	ldi	r22, 0x00	; 0
 49c:	80 e8       	ldi	r24, 0x80	; 128
 49e:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
            char n_buff[5];
            char ok = 0;
            do
            {
                lcd_move_cursor(0,0);
                lcd_write("Cycle Count:");
 4a2:	83 e4       	ldi	r24, 0x43	; 67
 4a4:	91 e0       	ldi	r25, 0x01	; 1
 4a6:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
 4aa:	60 e0       	ldi	r22, 0x00	; 0
 4ac:	80 ec       	ldi	r24, 0xC0	; 192
 4ae:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
                lcd_move_cursor(0, 1);
                snprintf(n_buff, 4, "%02i", lot_size);
 4b2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <lot_size>
 4b6:	1f 92       	push	r1
 4b8:	8f 93       	push	r24
 4ba:	bf 92       	push	r11
 4bc:	af 92       	push	r10
 4be:	1f 92       	push	r1
 4c0:	1f 93       	push	r17
 4c2:	5f 92       	push	r5
 4c4:	4f 92       	push	r4
 4c6:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <snprintf>
                lcd_write(n_buff);
 4ca:	8e 2d       	mov	r24, r14
 4cc:	9f 2d       	mov	r25, r15
 4ce:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>

                while(get_bit(UP_BTN) && get_bit(DWN_BTN) && get_bit(ENTR_BTN)) {
 4d2:	0f b6       	in	r0, 0x3f	; 63
 4d4:	f8 94       	cli
 4d6:	de bf       	out	0x3e, r29	; 62
 4d8:	0f be       	out	0x3f, r0	; 63
 4da:	cd bf       	out	0x3d, r28	; 61
 4dc:	1f 9b       	sbis	0x03, 7	; 3
 4de:	04 c0       	rjmp	.+8      	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 4e0:	30 9b       	sbis	0x06, 0	; 6
 4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 4e4:	31 99       	sbic	0x06, 1	; 6
 4e6:	fa cf       	rjmp	.-12     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
                    //draw_idle();
                }
                // increment lot amount
                if(!get_bit(UP_BTN)) {
 4e8:	1f 99       	sbic	0x03, 7	; 3
 4ea:	15 c0       	rjmp	.+42     	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
                    lot_size = lot_size >= 24 ? 1 : lot_size + 1;
 4ec:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <lot_size>
 4f0:	88 31       	cpi	r24, 0x18	; 24
 4f2:	10 f4       	brcc	.+4      	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
 4f4:	8f 5f       	subi	r24, 0xFF	; 255
 4f6:	01 c0       	rjmp	.+2      	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
 4f8:	80 2f       	mov	r24, r16
 4fa:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <lot_size>
 4fe:	3f ef       	ldi	r19, 0xFF	; 255
 500:	80 e7       	ldi	r24, 0x70	; 112
 502:	92 e0       	ldi	r25, 0x02	; 2
 504:	31 50       	subi	r19, 0x01	; 1
 506:	80 40       	sbci	r24, 0x00	; 0
 508:	90 40       	sbci	r25, 0x00	; 0
 50a:	e1 f7       	brne	.-8      	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
 50c:	00 c0       	rjmp	.+0      	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
 50e:	00 00       	nop
                    _delay_ms(50);
                    while(!get_bit(UP_BTN)); //wait button release
 510:	1f 9b       	sbis	0x03, 7	; 3
 512:	fe cf       	rjmp	.-4      	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
 514:	c2 cf       	rjmp	.-124    	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
                }
                //decrement lot size
                else if (!get_bit(DWN_BTN)) {
 516:	30 99       	sbic	0x06, 0	; 6
 518:	15 c0       	rjmp	.+42     	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
                    lot_size = lot_size == 1 ? 24 : lot_size - 1;
 51a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <lot_size>
 51e:	81 30       	cpi	r24, 0x01	; 1
 520:	11 f0       	breq	.+4      	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
 522:	81 50       	subi	r24, 0x01	; 1
 524:	01 c0       	rjmp	.+2      	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
 526:	86 2d       	mov	r24, r6
 528:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <lot_size>
 52c:	2f ef       	ldi	r18, 0xFF	; 255
 52e:	30 e7       	ldi	r19, 0x70	; 112
 530:	82 e0       	ldi	r24, 0x02	; 2
 532:	21 50       	subi	r18, 0x01	; 1
 534:	30 40       	sbci	r19, 0x00	; 0
 536:	80 40       	sbci	r24, 0x00	; 0
 538:	e1 f7       	brne	.-8      	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
 53a:	00 c0       	rjmp	.+0      	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
 53c:	00 00       	nop
                    _delay_ms(50);
                    while(!get_bit(DWN_BTN)); //wait button release
 53e:	30 9b       	sbis	0x06, 0	; 6
 540:	fe cf       	rjmp	.-4      	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
 542:	ab cf       	rjmp	.-170    	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
                }
                //confirm
                else if (!get_bit(ENTR_BTN)) {
 544:	31 99       	sbic	0x06, 1	; 6
 546:	a9 cf       	rjmp	.-174    	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 548:	9f ef       	ldi	r25, 0xFF	; 255
 54a:	20 e7       	ldi	r18, 0x70	; 112
 54c:	32 e0       	ldi	r19, 0x02	; 2
 54e:	91 50       	subi	r25, 0x01	; 1
 550:	20 40       	sbci	r18, 0x00	; 0
 552:	30 40       	sbci	r19, 0x00	; 0
 554:	e1 f7       	brne	.-8      	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
 556:	00 c0       	rjmp	.+0      	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
 558:	00 00       	nop
                    ok = 1;
                    _delay_ms(50);
                    while(!get_bit(ENTR_BTN)); //wait for button release
 55a:	31 9b       	sbis	0x06, 1	; 6
 55c:	fe cf       	rjmp	.-4      	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
                }
            } while(!ok);
            ok = 0;
            char fill_delay = 1;
            lcd_clear();
 55e:	60 e0       	ldi	r22, 0x00	; 0
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
                    _delay_ms(50);
                    while(!get_bit(ENTR_BTN)); //wait for button release
                }
            } while(!ok);
            ok = 0;
            char fill_delay = 1;
 566:	11 e0       	ldi	r17, 0x01	; 1
 568:	60 e0       	ldi	r22, 0x00	; 0
 56a:	80 e8       	ldi	r24, 0x80	; 128
 56c:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
            lcd_clear();
            do {
                lcd_move_cursor(0,0);
                lcd_write("Delay:");
 570:	85 e5       	ldi	r24, 0x55	; 85
 572:	91 e0       	ldi	r25, 0x01	; 1
 574:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
 578:	60 e0       	ldi	r22, 0x00	; 0
 57a:	80 ec       	ldi	r24, 0xC0	; 192
 57c:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
                lcd_move_cursor(0, 1);
                snprintf(n_buff, 5, "%02i s", fill_delay);
 580:	81 2e       	mov	r8, r17
 582:	91 2c       	mov	r9, r1
 584:	1f 92       	push	r1
 586:	1f 93       	push	r17
 588:	df 92       	push	r13
 58a:	cf 92       	push	r12
 58c:	1f 92       	push	r1
 58e:	7f 92       	push	r7
 590:	5f 92       	push	r5
 592:	4f 92       	push	r4
 594:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <snprintf>
                lcd_write(n_buff);
 598:	8e 2d       	mov	r24, r14
 59a:	9f 2d       	mov	r25, r15
 59c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>

                while(get_bit(UP_BTN) && get_bit(DWN_BTN) && get_bit(ENTR_BTN)) {
 5a0:	0f b6       	in	r0, 0x3f	; 63
 5a2:	f8 94       	cli
 5a4:	de bf       	out	0x3e, r29	; 62
 5a6:	0f be       	out	0x3f, r0	; 63
 5a8:	cd bf       	out	0x3d, r28	; 61
 5aa:	1f 9b       	sbis	0x03, 7	; 3
 5ac:	04 c0       	rjmp	.+8      	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
 5ae:	30 9b       	sbis	0x06, 0	; 6
 5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
 5b2:	31 99       	sbic	0x06, 1	; 6
 5b4:	fa cf       	rjmp	.-12     	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
                    //draw_idle();
                }
                // increment lot amount
                if(!get_bit(UP_BTN)) {
 5b6:	1f 99       	sbic	0x03, 7	; 3
 5b8:	11 c0       	rjmp	.+34     	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
                    fill_delay = fill_delay >= 99 ? 1 : fill_delay + 1;
 5ba:	13 36       	cpi	r17, 0x63	; 99
 5bc:	10 f4       	brcc	.+4      	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
 5be:	1f 5f       	subi	r17, 0xFF	; 255
 5c0:	01 c0       	rjmp	.+2      	; 0x5c4 <__LOCK_REGION_LENGTH__+0x1c4>
 5c2:	11 e0       	ldi	r17, 0x01	; 1
 5c4:	9f ef       	ldi	r25, 0xFF	; 255
 5c6:	20 e7       	ldi	r18, 0x70	; 112
 5c8:	32 e0       	ldi	r19, 0x02	; 2
 5ca:	91 50       	subi	r25, 0x01	; 1
 5cc:	20 40       	sbci	r18, 0x00	; 0
 5ce:	30 40       	sbci	r19, 0x00	; 0
 5d0:	e1 f7       	brne	.-8      	; 0x5ca <__LOCK_REGION_LENGTH__+0x1ca>
 5d2:	00 c0       	rjmp	.+0      	; 0x5d4 <__LOCK_REGION_LENGTH__+0x1d4>
 5d4:	00 00       	nop
                    _delay_ms(50);
                    while(!get_bit(UP_BTN)); //wait button release
 5d6:	1f 9b       	sbis	0x03, 7	; 3
 5d8:	fe cf       	rjmp	.-4      	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
 5da:	c6 cf       	rjmp	.-116    	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
                }
                //decrement lot size
                else if (!get_bit(DWN_BTN)) {
 5dc:	30 99       	sbic	0x06, 0	; 6
 5de:	11 c0       	rjmp	.+34     	; 0x602 <__LOCK_REGION_LENGTH__+0x202>
                    fill_delay = fill_delay == 1 ? 99 : fill_delay - 1;
 5e0:	11 30       	cpi	r17, 0x01	; 1
 5e2:	11 f0       	breq	.+4      	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
 5e4:	11 50       	subi	r17, 0x01	; 1
 5e6:	01 c0       	rjmp	.+2      	; 0x5ea <__LOCK_REGION_LENGTH__+0x1ea>
 5e8:	13 e6       	ldi	r17, 0x63	; 99
 5ea:	8f ef       	ldi	r24, 0xFF	; 255
 5ec:	90 e7       	ldi	r25, 0x70	; 112
 5ee:	22 e0       	ldi	r18, 0x02	; 2
 5f0:	81 50       	subi	r24, 0x01	; 1
 5f2:	90 40       	sbci	r25, 0x00	; 0
 5f4:	20 40       	sbci	r18, 0x00	; 0
 5f6:	e1 f7       	brne	.-8      	; 0x5f0 <__LOCK_REGION_LENGTH__+0x1f0>
 5f8:	00 c0       	rjmp	.+0      	; 0x5fa <__LOCK_REGION_LENGTH__+0x1fa>
 5fa:	00 00       	nop
                    _delay_ms(50);
                    while(!get_bit(DWN_BTN)); //wait button release
 5fc:	30 9b       	sbis	0x06, 0	; 6
 5fe:	fe cf       	rjmp	.-4      	; 0x5fc <__LOCK_REGION_LENGTH__+0x1fc>
 600:	b3 cf       	rjmp	.-154    	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
                }
                //confirm
                else if (!get_bit(ENTR_BTN)) {
 602:	31 99       	sbic	0x06, 1	; 6
 604:	b1 cf       	rjmp	.-158    	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
                    ok = 1;
                    fill_delay_ms = 1000 * fill_delay;
 606:	28 ee       	ldi	r18, 0xE8	; 232
 608:	33 e0       	ldi	r19, 0x03	; 3
 60a:	82 9e       	mul	r8, r18
 60c:	c0 01       	movw	r24, r0
 60e:	83 9e       	mul	r8, r19
 610:	90 0d       	add	r25, r0
 612:	92 9e       	mul	r9, r18
 614:	90 0d       	add	r25, r0
 616:	11 24       	eor	r1, r1
 618:	09 2e       	mov	r0, r25
 61a:	00 0c       	add	r0, r0
 61c:	aa 0b       	sbc	r26, r26
 61e:	bb 0b       	sbc	r27, r27
 620:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <fill_delay_ms>
 624:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <fill_delay_ms+0x1>
 628:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <fill_delay_ms+0x2>
 62c:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <fill_delay_ms+0x3>
 630:	3f ef       	ldi	r19, 0xFF	; 255
 632:	80 e7       	ldi	r24, 0x70	; 112
 634:	92 e0       	ldi	r25, 0x02	; 2
 636:	31 50       	subi	r19, 0x01	; 1
 638:	80 40       	sbci	r24, 0x00	; 0
 63a:	90 40       	sbci	r25, 0x00	; 0
 63c:	e1 f7       	brne	.-8      	; 0x636 <__LOCK_REGION_LENGTH__+0x236>
 63e:	00 c0       	rjmp	.+0      	; 0x640 <__LOCK_REGION_LENGTH__+0x240>
 640:	00 00       	nop
                    _delay_ms(50);
                    while(!get_bit(ENTR_BTN)); //wait for button release
 642:	31 9b       	sbis	0x06, 1	; 6
 644:	fe cf       	rjmp	.-4      	; 0x642 <__LOCK_REGION_LENGTH__+0x242>
                }
            } while(!ok);
            lcd_clear();
 646:	60 e0       	ldi	r22, 0x00	; 0
 648:	81 e0       	ldi	r24, 0x01	; 1
 64a:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
            major_state=READY;
 64e:	83 e0       	ldi	r24, 0x03	; 3
 650:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <major_state>
 654:	60 e0       	ldi	r22, 0x00	; 0
 656:	80 e8       	ldi	r24, 0x80	; 128
 658:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
        case READY:
            lcd_move_cursor(0,0);
            lcd_write("Ready press STR");
 65c:	83 e6       	ldi	r24, 0x63	; 99
 65e:	91 e0       	ldi	r25, 0x01	; 1
 660:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
            if (get_bit(STRT_STOP_BTN)==0) {
 664:	32 99       	sbic	0x06, 2	; 6
 666:	20 c1       	rjmp	.+576    	; 0x8a8 <__LOCK_REGION_LENGTH__+0x4a8>
                major_state=RUN;
 668:	84 e0       	ldi	r24, 0x04	; 4
 66a:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <major_state>
 66e:	1c c1       	rjmp	.+568    	; 0x8a8 <__LOCK_REGION_LENGTH__+0x4a8>
            break;
        case RUN:
            ;
            //Segunda linha do LCD, status do lote:
            char buff[17];
            snprintf(buff,17, "Lot %02i, box %02i ",lot_number,lot_quantity+1);
 670:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <__data_end>
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	01 96       	adiw	r24, 0x01	; 1
 678:	9f 93       	push	r25
 67a:	8f 93       	push	r24
 67c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 680:	1f 92       	push	r1
 682:	8f 93       	push	r24
 684:	83 e7       	ldi	r24, 0x73	; 115
 686:	91 e0       	ldi	r25, 0x01	; 1
 688:	9f 93       	push	r25
 68a:	8f 93       	push	r24
 68c:	1f 92       	push	r1
 68e:	81 e1       	ldi	r24, 0x11	; 17
 690:	8f 93       	push	r24
 692:	5f 92       	push	r5
 694:	4f 92       	push	r4
 696:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <snprintf>
 69a:	60 e0       	ldi	r22, 0x00	; 0
 69c:	80 ec       	ldi	r24, 0xC0	; 192
 69e:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
            lcd_move_cursor(0,1);
            lcd_write(buff);
 6a2:	8e 2d       	mov	r24, r14
 6a4:	9f 2d       	mov	r25, r15
 6a6:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
            switch(run_state) {
 6aa:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <run_state>
 6ae:	0f b6       	in	r0, 0x3f	; 63
 6b0:	f8 94       	cli
 6b2:	de bf       	out	0x3e, r29	; 62
 6b4:	0f be       	out	0x3f, r0	; 63
 6b6:	cd bf       	out	0x3d, r28	; 61
 6b8:	82 30       	cpi	r24, 0x02	; 2
 6ba:	69 f1       	breq	.+90     	; 0x716 <__LOCK_REGION_LENGTH__+0x316>
 6bc:	28 f4       	brcc	.+10     	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
 6be:	88 23       	and	r24, r24
 6c0:	51 f0       	breq	.+20     	; 0x6d6 <__LOCK_REGION_LENGTH__+0x2d6>
 6c2:	81 30       	cpi	r24, 0x01	; 1
 6c4:	b1 f0       	breq	.+44     	; 0x6f2 <__LOCK_REGION_LENGTH__+0x2f2>
 6c6:	f0 c0       	rjmp	.+480    	; 0x8a8 <__LOCK_REGION_LENGTH__+0x4a8>
 6c8:	83 30       	cpi	r24, 0x03	; 3
 6ca:	09 f4       	brne	.+2      	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
 6cc:	73 c0       	rjmp	.+230    	; 0x7b4 <__LOCK_REGION_LENGTH__+0x3b4>
 6ce:	84 30       	cpi	r24, 0x04	; 4
 6d0:	09 f4       	brne	.+2      	; 0x6d4 <__LOCK_REGION_LENGTH__+0x2d4>
 6d2:	7f c0       	rjmp	.+254    	; 0x7d2 <__LOCK_REGION_LENGTH__+0x3d2>
 6d4:	e9 c0       	rjmp	.+466    	; 0x8a8 <__LOCK_REGION_LENGTH__+0x4a8>
 6d6:	60 e0       	ldi	r22, 0x00	; 0
 6d8:	80 e8       	ldi	r24, 0x80	; 128
 6da:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
            case WAITING:
                lcd_move_cursor(0,0);
                lcd_write("Waiting box    ");
 6de:	87 e8       	ldi	r24, 0x87	; 135
 6e0:	91 e0       	ldi	r25, 0x01	; 1
 6e2:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
                if(get_bit(SNS_CX)==0) {
 6e6:	1e 99       	sbic	0x03, 6	; 3
 6e8:	df c0       	rjmp	.+446    	; 0x8a8 <__LOCK_REGION_LENGTH__+0x4a8>
                    run_state = DETECTED;
 6ea:	81 e0       	ldi	r24, 0x01	; 1
 6ec:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <run_state>
 6f0:	db c0       	rjmp	.+438    	; 0x8a8 <__LOCK_REGION_LENGTH__+0x4a8>
 6f2:	60 e0       	ldi	r22, 0x00	; 0
 6f4:	80 e8       	ldi	r24, 0x80	; 128
 6f6:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
                }
                break;
            case DETECTED:
                lcd_move_cursor(0,0);
                lcd_write("Box detected   ");
 6fa:	87 e9       	ldi	r24, 0x97	; 151
 6fc:	91 e0       	ldi	r25, 0x01	; 1
 6fe:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
                set_bit(CYL_A);
 702:	43 9a       	sbi	0x08, 3	; 8
                set_bit(CYL_B);
 704:	44 9a       	sbi	0x08, 4	; 8
                if(get_bit(A_1)==0 && get_bit(B_1)==0) {
 706:	19 99       	sbic	0x03, 1	; 3
 708:	cf c0       	rjmp	.+414    	; 0x8a8 <__LOCK_REGION_LENGTH__+0x4a8>
 70a:	1b 99       	sbic	0x03, 3	; 3
 70c:	cd c0       	rjmp	.+410    	; 0x8a8 <__LOCK_REGION_LENGTH__+0x4a8>
                    run_state = LOADING;
 70e:	82 e0       	ldi	r24, 0x02	; 2
 710:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <run_state>
 714:	c9 c0       	rjmp	.+402    	; 0x8a8 <__LOCK_REGION_LENGTH__+0x4a8>
                }
                break;
            case LOADING:
                rst_bit(CYL_C);
 716:	45 98       	cbi	0x08, 5	; 8
 718:	60 e0       	ldi	r22, 0x00	; 0
 71a:	80 e8       	ldi	r24, 0x80	; 128
 71c:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
				lcd_move_cursor(0,0);
				lcd_write("Loading box... ");
 720:	87 ea       	ldi	r24, 0xA7	; 167
 722:	91 e0       	ldi	r25, 0x01	; 1
 724:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
                if(get_bit(C_0)==0) {
 728:	1c 99       	sbic	0x03, 4	; 3
 72a:	be c0       	rjmp	.+380    	; 0x8a8 <__LOCK_REGION_LENGTH__+0x4a8>
                    run_state = CLOSING;
 72c:	83 e0       	ldi	r24, 0x03	; 3
 72e:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <run_state>
 732:	60 e0       	ldi	r22, 0x00	; 0
 734:	80 e8       	ldi	r24, 0x80	; 128
 736:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
					lcd_move_cursor(0,0);
					lcd_write("Applying delay ");
 73a:	87 eb       	ldi	r24, 0xB7	; 183
 73c:	91 e0       	ldi	r25, 0x01	; 1
 73e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
					for(int i =0; i<fill_delay_ms/10; ++i)
 742:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <fill_delay_ms>
 746:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <fill_delay_ms+0x1>
 74a:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <fill_delay_ms+0x2>
 74e:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <fill_delay_ms+0x3>
 752:	0a 97       	sbiw	r24, 0x0a	; 10
 754:	a1 05       	cpc	r26, r1
 756:	b1 05       	cpc	r27, r1
 758:	20 f1       	brcs	.+72     	; 0x7a2 <__LOCK_REGION_LENGTH__+0x3a2>
 75a:	00 e0       	ldi	r16, 0x00	; 0
 75c:	10 e0       	ldi	r17, 0x00	; 0
 75e:	15 01       	movw	r2, r10
 760:	8f e3       	ldi	r24, 0x3F	; 63
 762:	9c e9       	ldi	r25, 0x9C	; 156
 764:	01 97       	sbiw	r24, 0x01	; 1
 766:	f1 f7       	brne	.-4      	; 0x764 <__LOCK_REGION_LENGTH__+0x364>
 768:	00 c0       	rjmp	.+0      	; 0x76a <__LOCK_REGION_LENGTH__+0x36a>
 76a:	00 00       	nop
 76c:	0f 5f       	subi	r16, 0xFF	; 255
 76e:	1f 4f       	sbci	r17, 0xFF	; 255
 770:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <fill_delay_ms>
 774:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <fill_delay_ms+0x1>
 778:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <fill_delay_ms+0x2>
 77c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <fill_delay_ms+0x3>
 780:	48 01       	movw	r8, r16
 782:	01 2e       	mov	r0, r17
 784:	00 0c       	add	r0, r0
 786:	aa 08       	sbc	r10, r10
 788:	bb 08       	sbc	r11, r11
 78a:	2a e0       	ldi	r18, 0x0A	; 10
 78c:	30 e0       	ldi	r19, 0x00	; 0
 78e:	40 e0       	ldi	r20, 0x00	; 0
 790:	50 e0       	ldi	r21, 0x00	; 0
 792:	0e 94 a0 04 	call	0x940	; 0x940 <__udivmodsi4>
 796:	82 16       	cp	r8, r18
 798:	93 06       	cpc	r9, r19
 79a:	a4 06       	cpc	r10, r20
 79c:	b5 06       	cpc	r11, r21
 79e:	00 f3       	brcs	.-64     	; 0x760 <__LOCK_REGION_LENGTH__+0x360>
 7a0:	51 01       	movw	r10, r2
 7a2:	60 e0       	ldi	r22, 0x00	; 0
 7a4:	80 e8       	ldi	r24, 0x80	; 128
 7a6:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
					{
						_delay_ms(10);
					}
					lcd_move_cursor(0,0);
					lcd_write("Box loaded     ");
 7aa:	87 ec       	ldi	r24, 0xC7	; 199
 7ac:	91 e0       	ldi	r25, 0x01	; 1
 7ae:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
 7b2:	7a c0       	rjmp	.+244    	; 0x8a8 <__LOCK_REGION_LENGTH__+0x4a8>
 7b4:	60 e0       	ldi	r22, 0x00	; 0
 7b6:	80 e8       	ldi	r24, 0x80	; 128
 7b8:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
                }
                break;
            case CLOSING:
                lcd_move_cursor(0,0);
                lcd_write("Closing disp.  ");
 7bc:	87 ed       	ldi	r24, 0xD7	; 215
 7be:	91 e0       	ldi	r25, 0x01	; 1
 7c0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
                set_bit(CYL_C);
 7c4:	45 9a       	sbi	0x08, 5	; 8
                if(get_bit(C_1)==0) {
 7c6:	1d 99       	sbic	0x03, 5	; 3
 7c8:	6f c0       	rjmp	.+222    	; 0x8a8 <__LOCK_REGION_LENGTH__+0x4a8>
                    run_state = RELEASING;
 7ca:	84 e0       	ldi	r24, 0x04	; 4
 7cc:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <run_state>
 7d0:	6b c0       	rjmp	.+214    	; 0x8a8 <__LOCK_REGION_LENGTH__+0x4a8>
 7d2:	60 e0       	ldi	r22, 0x00	; 0
 7d4:	80 e8       	ldi	r24, 0x80	; 128
 7d6:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
                }
                break;
            case RELEASING:
                lcd_move_cursor(0,0);
                lcd_write("Releasing box  ");
 7da:	87 ee       	ldi	r24, 0xE7	; 231
 7dc:	91 e0       	ldi	r25, 0x01	; 1
 7de:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
                rst_bit(CYL_A);
 7e2:	43 98       	cbi	0x08, 3	; 8
                rst_bit(CYL_B);
 7e4:	44 98       	cbi	0x08, 4	; 8
                if(get_bit(A_0)==0 && get_bit(B_0)==0) {
 7e6:	18 99       	sbic	0x03, 0	; 3
 7e8:	5f c0       	rjmp	.+190    	; 0x8a8 <__LOCK_REGION_LENGTH__+0x4a8>
 7ea:	1a 99       	sbic	0x03, 2	; 3
 7ec:	5d c0       	rjmp	.+186    	; 0x8a8 <__LOCK_REGION_LENGTH__+0x4a8>
 7ee:	60 e0       	ldi	r22, 0x00	; 0
 7f0:	80 e8       	ldi	r24, 0x80	; 128
 7f2:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
                    lcd_move_cursor(0,0);
                    lcd_write("Box finished   ");
 7f6:	87 ef       	ldi	r24, 0xF7	; 247
 7f8:	91 e0       	ldi	r25, 0x01	; 1
 7fa:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
 7fe:	9f ef       	ldi	r25, 0xFF	; 255
 800:	27 ea       	ldi	r18, 0xA7	; 167
 802:	31 e6       	ldi	r19, 0x61	; 97
 804:	91 50       	subi	r25, 0x01	; 1
 806:	20 40       	sbci	r18, 0x00	; 0
 808:	30 40       	sbci	r19, 0x00	; 0
 80a:	e1 f7       	brne	.-8      	; 0x804 <__LOCK_REGION_LENGTH__+0x404>
 80c:	00 c0       	rjmp	.+0      	; 0x80e <__LOCK_REGION_LENGTH__+0x40e>
 80e:	00 00       	nop
                    _delay_ms(2000);
                    ++ lot_quantity; //Incrementa uma caixa no lote atual
 810:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <__data_end>
 814:	8f 5f       	subi	r24, 0xFF	; 255
 816:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <__data_end>
                    if (lot_quantity == lot_size) //Se o lote atual atingiu o número de caixas desejado
 81a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <lot_size>
 81e:	89 13       	cpse	r24, r25
 820:	2c c0       	rjmp	.+88     	; 0x87a <__LOCK_REGION_LENGTH__+0x47a>
                    {
                        ++ lot_number; //Incrementa número de lotes prontos
 822:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 826:	8f 5f       	subi	r24, 0xFF	; 255
 828:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
                        lot_quantity = 0; //Reinicia contagem de caixas no lote
 82c:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <__data_end>
 830:	60 e0       	ldi	r22, 0x00	; 0
 832:	80 e8       	ldi	r24, 0x80	; 128
 834:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
                        lcd_move_cursor(0,0);
                        lcd_write("Lot finished   ");
 838:	87 e0       	ldi	r24, 0x07	; 7
 83a:	92 e0       	ldi	r25, 0x02	; 2
 83c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
 840:	8f ef       	ldi	r24, 0xFF	; 255
 842:	93 ed       	ldi	r25, 0xD3	; 211
 844:	20 e3       	ldi	r18, 0x30	; 48
 846:	81 50       	subi	r24, 0x01	; 1
 848:	90 40       	sbci	r25, 0x00	; 0
 84a:	20 40       	sbci	r18, 0x00	; 0
 84c:	e1 f7       	brne	.-8      	; 0x846 <__LOCK_REGION_LENGTH__+0x446>
 84e:	00 c0       	rjmp	.+0      	; 0x850 <__LOCK_REGION_LENGTH__+0x450>
 850:	00 00       	nop
 852:	60 e0       	ldi	r22, 0x00	; 0
 854:	80 e8       	ldi	r24, 0x80	; 128
 856:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
                        _delay_ms(1000);
                        lcd_move_cursor(0,0);
                        lcd_write("Start next lot ");
 85a:	87 e1       	ldi	r24, 0x17	; 23
 85c:	92 e0       	ldi	r25, 0x02	; 2
 85e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
 862:	3f ef       	ldi	r19, 0xFF	; 255
 864:	83 ed       	ldi	r24, 0xD3	; 211
 866:	90 e3       	ldi	r25, 0x30	; 48
 868:	31 50       	subi	r19, 0x01	; 1
 86a:	80 40       	sbci	r24, 0x00	; 0
 86c:	90 40       	sbci	r25, 0x00	; 0
 86e:	e1 f7       	brne	.-8      	; 0x868 <__LOCK_REGION_LENGTH__+0x468>
 870:	00 c0       	rjmp	.+0      	; 0x872 <__LOCK_REGION_LENGTH__+0x472>
 872:	00 00       	nop
                        _delay_ms(1000);
						major_state = READY;
 874:	83 e0       	ldi	r24, 0x03	; 3
 876:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <major_state>
                    }
                    run_state = WAITING;
 87a:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <run_state>
 87e:	14 c0       	rjmp	.+40     	; 0x8a8 <__LOCK_REGION_LENGTH__+0x4a8>
 880:	60 e0       	ldi	r22, 0x00	; 0
 882:	80 e8       	ldi	r24, 0x80	; 128
 884:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
                break;
            }
            break;
        case PAUSE:
            lcd_move_cursor(0,0);
            lcd_write("System paused..");
 888:	87 e2       	ldi	r24, 0x27	; 39
 88a:	92 e0       	ldi	r25, 0x02	; 2
 88c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
            break;
 890:	0b c0       	rjmp	.+22     	; 0x8a8 <__LOCK_REGION_LENGTH__+0x4a8>
        default:
        case ERROR:
			rst_bit(CYL_A);
 892:	43 98       	cbi	0x08, 3	; 8
			rst_bit(CYL_B);
 894:	44 98       	cbi	0x08, 4	; 8
			set_bit(CYL_C);
 896:	45 9a       	sbi	0x08, 5	; 8
            lcd_clear();
 898:	60 e0       	ldi	r22, 0x00	; 0
 89a:	81 e0       	ldi	r24, 0x01	; 1
 89c:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
            lcd_write("SYSTEM ERROR");
 8a0:	87 e3       	ldi	r24, 0x37	; 55
 8a2:	92 e0       	ldi	r25, 0x02	; 2
 8a4:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
        /*
          Situações impossíveis dos cilindros:
          Se os dois sensores de um cilindro estiverem acionados ao mesmo tempo,
          ou se B e C estiverem abertos ao mesmo tempo (vazamento)
        */
        if ((get_bit(A_0) == 0 && get_bit(A_1) == 0) ||
 8a8:	18 99       	sbic	0x03, 0	; 3
 8aa:	02 c0       	rjmp	.+4      	; 0x8b0 <__LOCK_REGION_LENGTH__+0x4b0>
 8ac:	19 9b       	sbis	0x03, 1	; 3
 8ae:	0c c0       	rjmp	.+24     	; 0x8c8 <__LOCK_REGION_LENGTH__+0x4c8>
 8b0:	1a 99       	sbic	0x03, 2	; 3
 8b2:	02 c0       	rjmp	.+4      	; 0x8b8 <__LOCK_REGION_LENGTH__+0x4b8>
            (get_bit(B_0) == 0 && get_bit(B_1) == 0) ||
 8b4:	1b 9b       	sbis	0x03, 3	; 3
 8b6:	08 c0       	rjmp	.+16     	; 0x8c8 <__LOCK_REGION_LENGTH__+0x4c8>
 8b8:	1c 99       	sbic	0x03, 4	; 3
 8ba:	02 c0       	rjmp	.+4      	; 0x8c0 <__LOCK_REGION_LENGTH__+0x4c0>
            (get_bit(C_0) == 0 && get_bit(C_1) == 0) ||
 8bc:	1d 9b       	sbis	0x03, 5	; 3
 8be:	04 c0       	rjmp	.+8      	; 0x8c8 <__LOCK_REGION_LENGTH__+0x4c8>
 8c0:	1a 99       	sbic	0x03, 2	; 3
 8c2:	10 cd       	rjmp	.-1504   	; 0x2e4 <main+0xd0>
            (get_bit(B_0)==0 && get_bit(C_0) == 0)) {
 8c4:	1c 99       	sbic	0x03, 4	; 3
 8c6:	0e cd       	rjmp	.-1508   	; 0x2e4 <main+0xd0>

            major_state = ERROR;
 8c8:	86 e0       	ldi	r24, 0x06	; 6
 8ca:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <major_state>
 8ce:	0a cd       	rjmp	.-1516   	; 0x2e4 <main+0xd0>

000008d0 <__vector_1>:
    }
}

/*--------- Interrupts ---------*/
ISR(E_STOP_INTR) //Emergency stop button ISR
{
 8d0:	1f 92       	push	r1
 8d2:	0f 92       	push	r0
 8d4:	0f b6       	in	r0, 0x3f	; 63
 8d6:	0f 92       	push	r0
 8d8:	11 24       	eor	r1, r1
 8da:	8f 93       	push	r24
    major_state = ERROR;
 8dc:	86 e0       	ldi	r24, 0x06	; 6
 8de:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <major_state>
    rst_bit(CYL_B);
 8e2:	44 98       	cbi	0x08, 4	; 8
    set_bit(CYL_C);
 8e4:	45 9a       	sbi	0x08, 5	; 8
    rst_bit(CYL_A);
 8e6:	43 98       	cbi	0x08, 3	; 8

    while(!get_bit(E_STOP_BTN)); //lock the machine while the emergency button is pressed
 8e8:	4a 9b       	sbis	0x09, 2	; 9
 8ea:	fe cf       	rjmp	.-4      	; 0x8e8 <__vector_1+0x18>
}
 8ec:	8f 91       	pop	r24
 8ee:	0f 90       	pop	r0
 8f0:	0f be       	out	0x3f, r0	; 63
 8f2:	0f 90       	pop	r0
 8f4:	1f 90       	pop	r1
 8f6:	18 95       	reti

000008f8 <__vector_2>:
ISR(PAUSE_INT)
{
 8f8:	1f 92       	push	r1
 8fa:	0f 92       	push	r0
 8fc:	0f b6       	in	r0, 0x3f	; 63
 8fe:	0f 92       	push	r0
 900:	11 24       	eor	r1, r1
 902:	8f 93       	push	r24
 904:	9f 93       	push	r25
    major_state = (major_state == RUN ? PAUSE : (major_state ==  PAUSE ? RUN : major_state));
 906:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <major_state>
 90a:	84 30       	cpi	r24, 0x04	; 4
 90c:	39 f0       	breq	.+14     	; 0x91c <__stack+0x1d>
 90e:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <major_state>
 912:	85 30       	cpi	r24, 0x05	; 5
 914:	29 f0       	breq	.+10     	; 0x920 <__stack+0x21>
 916:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <major_state>
 91a:	03 c0       	rjmp	.+6      	; 0x922 <__stack+0x23>
 91c:	85 e0       	ldi	r24, 0x05	; 5
 91e:	01 c0       	rjmp	.+2      	; 0x922 <__stack+0x23>
 920:	84 e0       	ldi	r24, 0x04	; 4
 922:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <major_state>
 926:	8f e3       	ldi	r24, 0x3F	; 63
 928:	9c e9       	ldi	r25, 0x9C	; 156
 92a:	01 97       	sbiw	r24, 0x01	; 1
 92c:	f1 f7       	brne	.-4      	; 0x92a <__stack+0x2b>
 92e:	00 c0       	rjmp	.+0      	; 0x930 <__stack+0x31>
 930:	00 00       	nop
    _delay_ms(10); //button debounce
}
 932:	9f 91       	pop	r25
 934:	8f 91       	pop	r24
 936:	0f 90       	pop	r0
 938:	0f be       	out	0x3f, r0	; 63
 93a:	0f 90       	pop	r0
 93c:	1f 90       	pop	r1
 93e:	18 95       	reti

00000940 <__udivmodsi4>:
 940:	a1 e2       	ldi	r26, 0x21	; 33
 942:	1a 2e       	mov	r1, r26
 944:	aa 1b       	sub	r26, r26
 946:	bb 1b       	sub	r27, r27
 948:	fd 01       	movw	r30, r26
 94a:	0d c0       	rjmp	.+26     	; 0x966 <__udivmodsi4_ep>

0000094c <__udivmodsi4_loop>:
 94c:	aa 1f       	adc	r26, r26
 94e:	bb 1f       	adc	r27, r27
 950:	ee 1f       	adc	r30, r30
 952:	ff 1f       	adc	r31, r31
 954:	a2 17       	cp	r26, r18
 956:	b3 07       	cpc	r27, r19
 958:	e4 07       	cpc	r30, r20
 95a:	f5 07       	cpc	r31, r21
 95c:	20 f0       	brcs	.+8      	; 0x966 <__udivmodsi4_ep>
 95e:	a2 1b       	sub	r26, r18
 960:	b3 0b       	sbc	r27, r19
 962:	e4 0b       	sbc	r30, r20
 964:	f5 0b       	sbc	r31, r21

00000966 <__udivmodsi4_ep>:
 966:	66 1f       	adc	r22, r22
 968:	77 1f       	adc	r23, r23
 96a:	88 1f       	adc	r24, r24
 96c:	99 1f       	adc	r25, r25
 96e:	1a 94       	dec	r1
 970:	69 f7       	brne	.-38     	; 0x94c <__udivmodsi4_loop>
 972:	60 95       	com	r22
 974:	70 95       	com	r23
 976:	80 95       	com	r24
 978:	90 95       	com	r25
 97a:	9b 01       	movw	r18, r22
 97c:	ac 01       	movw	r20, r24
 97e:	bd 01       	movw	r22, r26
 980:	cf 01       	movw	r24, r30
 982:	08 95       	ret

00000984 <strncmp>:
 984:	fb 01       	movw	r30, r22
 986:	dc 01       	movw	r26, r24
 988:	41 50       	subi	r20, 0x01	; 1
 98a:	50 40       	sbci	r21, 0x00	; 0
 98c:	30 f0       	brcs	.+12     	; 0x99a <strncmp+0x16>
 98e:	8d 91       	ld	r24, X+
 990:	01 90       	ld	r0, Z+
 992:	80 19       	sub	r24, r0
 994:	19 f4       	brne	.+6      	; 0x99c <strncmp+0x18>
 996:	00 20       	and	r0, r0
 998:	b9 f7       	brne	.-18     	; 0x988 <strncmp+0x4>
 99a:	88 1b       	sub	r24, r24
 99c:	99 0b       	sbc	r25, r25
 99e:	08 95       	ret

000009a0 <snprintf>:
 9a0:	ae e0       	ldi	r26, 0x0E	; 14
 9a2:	b0 e0       	ldi	r27, 0x00	; 0
 9a4:	e6 ed       	ldi	r30, 0xD6	; 214
 9a6:	f4 e0       	ldi	r31, 0x04	; 4
 9a8:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__prologue_saves__+0x1c>
 9ac:	0d 89       	ldd	r16, Y+21	; 0x15
 9ae:	1e 89       	ldd	r17, Y+22	; 0x16
 9b0:	8f 89       	ldd	r24, Y+23	; 0x17
 9b2:	98 8d       	ldd	r25, Y+24	; 0x18
 9b4:	26 e0       	ldi	r18, 0x06	; 6
 9b6:	2c 83       	std	Y+4, r18	; 0x04
 9b8:	1a 83       	std	Y+2, r17	; 0x02
 9ba:	09 83       	std	Y+1, r16	; 0x01
 9bc:	97 ff       	sbrs	r25, 7
 9be:	02 c0       	rjmp	.+4      	; 0x9c4 <snprintf+0x24>
 9c0:	80 e0       	ldi	r24, 0x00	; 0
 9c2:	90 e8       	ldi	r25, 0x80	; 128
 9c4:	01 97       	sbiw	r24, 0x01	; 1
 9c6:	9e 83       	std	Y+6, r25	; 0x06
 9c8:	8d 83       	std	Y+5, r24	; 0x05
 9ca:	ae 01       	movw	r20, r28
 9cc:	45 5e       	subi	r20, 0xE5	; 229
 9ce:	5f 4f       	sbci	r21, 0xFF	; 255
 9d0:	69 8d       	ldd	r22, Y+25	; 0x19
 9d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
 9d4:	ce 01       	movw	r24, r28
 9d6:	01 96       	adiw	r24, 0x01	; 1
 9d8:	0e 94 00 05 	call	0xa00	; 0xa00 <vfprintf>
 9dc:	4d 81       	ldd	r20, Y+5	; 0x05
 9de:	5e 81       	ldd	r21, Y+6	; 0x06
 9e0:	57 fd       	sbrc	r21, 7
 9e2:	0a c0       	rjmp	.+20     	; 0x9f8 <snprintf+0x58>
 9e4:	2f 81       	ldd	r18, Y+7	; 0x07
 9e6:	38 85       	ldd	r19, Y+8	; 0x08
 9e8:	42 17       	cp	r20, r18
 9ea:	53 07       	cpc	r21, r19
 9ec:	0c f4       	brge	.+2      	; 0x9f0 <snprintf+0x50>
 9ee:	9a 01       	movw	r18, r20
 9f0:	f8 01       	movw	r30, r16
 9f2:	e2 0f       	add	r30, r18
 9f4:	f3 1f       	adc	r31, r19
 9f6:	10 82       	st	Z, r1
 9f8:	2e 96       	adiw	r28, 0x0e	; 14
 9fa:	e4 e0       	ldi	r30, 0x04	; 4
 9fc:	0c 94 bb 07 	jmp	0xf76	; 0xf76 <__epilogue_restores__+0x1c>

00000a00 <vfprintf>:
 a00:	ab e0       	ldi	r26, 0x0B	; 11
 a02:	b0 e0       	ldi	r27, 0x00	; 0
 a04:	e6 e0       	ldi	r30, 0x06	; 6
 a06:	f5 e0       	ldi	r31, 0x05	; 5
 a08:	0c 94 91 07 	jmp	0xf22	; 0xf22 <__prologue_saves__>
 a0c:	6c 01       	movw	r12, r24
 a0e:	7b 01       	movw	r14, r22
 a10:	8a 01       	movw	r16, r20
 a12:	fc 01       	movw	r30, r24
 a14:	17 82       	std	Z+7, r1	; 0x07
 a16:	16 82       	std	Z+6, r1	; 0x06
 a18:	83 81       	ldd	r24, Z+3	; 0x03
 a1a:	81 ff       	sbrs	r24, 1
 a1c:	cc c1       	rjmp	.+920    	; 0xdb6 <vfprintf+0x3b6>
 a1e:	ce 01       	movw	r24, r28
 a20:	01 96       	adiw	r24, 0x01	; 1
 a22:	3c 01       	movw	r6, r24
 a24:	f6 01       	movw	r30, r12
 a26:	93 81       	ldd	r25, Z+3	; 0x03
 a28:	f7 01       	movw	r30, r14
 a2a:	93 fd       	sbrc	r25, 3
 a2c:	85 91       	lpm	r24, Z+
 a2e:	93 ff       	sbrs	r25, 3
 a30:	81 91       	ld	r24, Z+
 a32:	7f 01       	movw	r14, r30
 a34:	88 23       	and	r24, r24
 a36:	09 f4       	brne	.+2      	; 0xa3a <vfprintf+0x3a>
 a38:	ba c1       	rjmp	.+884    	; 0xdae <vfprintf+0x3ae>
 a3a:	85 32       	cpi	r24, 0x25	; 37
 a3c:	39 f4       	brne	.+14     	; 0xa4c <vfprintf+0x4c>
 a3e:	93 fd       	sbrc	r25, 3
 a40:	85 91       	lpm	r24, Z+
 a42:	93 ff       	sbrs	r25, 3
 a44:	81 91       	ld	r24, Z+
 a46:	7f 01       	movw	r14, r30
 a48:	85 32       	cpi	r24, 0x25	; 37
 a4a:	29 f4       	brne	.+10     	; 0xa56 <vfprintf+0x56>
 a4c:	b6 01       	movw	r22, r12
 a4e:	90 e0       	ldi	r25, 0x00	; 0
 a50:	0e 94 f7 06 	call	0xdee	; 0xdee <fputc>
 a54:	e7 cf       	rjmp	.-50     	; 0xa24 <vfprintf+0x24>
 a56:	91 2c       	mov	r9, r1
 a58:	21 2c       	mov	r2, r1
 a5a:	31 2c       	mov	r3, r1
 a5c:	ff e1       	ldi	r31, 0x1F	; 31
 a5e:	f3 15       	cp	r31, r3
 a60:	d8 f0       	brcs	.+54     	; 0xa98 <vfprintf+0x98>
 a62:	8b 32       	cpi	r24, 0x2B	; 43
 a64:	79 f0       	breq	.+30     	; 0xa84 <vfprintf+0x84>
 a66:	38 f4       	brcc	.+14     	; 0xa76 <vfprintf+0x76>
 a68:	80 32       	cpi	r24, 0x20	; 32
 a6a:	79 f0       	breq	.+30     	; 0xa8a <vfprintf+0x8a>
 a6c:	83 32       	cpi	r24, 0x23	; 35
 a6e:	a1 f4       	brne	.+40     	; 0xa98 <vfprintf+0x98>
 a70:	23 2d       	mov	r18, r3
 a72:	20 61       	ori	r18, 0x10	; 16
 a74:	1d c0       	rjmp	.+58     	; 0xab0 <vfprintf+0xb0>
 a76:	8d 32       	cpi	r24, 0x2D	; 45
 a78:	61 f0       	breq	.+24     	; 0xa92 <vfprintf+0x92>
 a7a:	80 33       	cpi	r24, 0x30	; 48
 a7c:	69 f4       	brne	.+26     	; 0xa98 <vfprintf+0x98>
 a7e:	23 2d       	mov	r18, r3
 a80:	21 60       	ori	r18, 0x01	; 1
 a82:	16 c0       	rjmp	.+44     	; 0xab0 <vfprintf+0xb0>
 a84:	83 2d       	mov	r24, r3
 a86:	82 60       	ori	r24, 0x02	; 2
 a88:	38 2e       	mov	r3, r24
 a8a:	e3 2d       	mov	r30, r3
 a8c:	e4 60       	ori	r30, 0x04	; 4
 a8e:	3e 2e       	mov	r3, r30
 a90:	2a c0       	rjmp	.+84     	; 0xae6 <vfprintf+0xe6>
 a92:	f3 2d       	mov	r31, r3
 a94:	f8 60       	ori	r31, 0x08	; 8
 a96:	1d c0       	rjmp	.+58     	; 0xad2 <vfprintf+0xd2>
 a98:	37 fc       	sbrc	r3, 7
 a9a:	2d c0       	rjmp	.+90     	; 0xaf6 <vfprintf+0xf6>
 a9c:	20 ed       	ldi	r18, 0xD0	; 208
 a9e:	28 0f       	add	r18, r24
 aa0:	2a 30       	cpi	r18, 0x0A	; 10
 aa2:	40 f0       	brcs	.+16     	; 0xab4 <vfprintf+0xb4>
 aa4:	8e 32       	cpi	r24, 0x2E	; 46
 aa6:	b9 f4       	brne	.+46     	; 0xad6 <vfprintf+0xd6>
 aa8:	36 fc       	sbrc	r3, 6
 aaa:	81 c1       	rjmp	.+770    	; 0xdae <vfprintf+0x3ae>
 aac:	23 2d       	mov	r18, r3
 aae:	20 64       	ori	r18, 0x40	; 64
 ab0:	32 2e       	mov	r3, r18
 ab2:	19 c0       	rjmp	.+50     	; 0xae6 <vfprintf+0xe6>
 ab4:	36 fe       	sbrs	r3, 6
 ab6:	06 c0       	rjmp	.+12     	; 0xac4 <vfprintf+0xc4>
 ab8:	8a e0       	ldi	r24, 0x0A	; 10
 aba:	98 9e       	mul	r9, r24
 abc:	20 0d       	add	r18, r0
 abe:	11 24       	eor	r1, r1
 ac0:	92 2e       	mov	r9, r18
 ac2:	11 c0       	rjmp	.+34     	; 0xae6 <vfprintf+0xe6>
 ac4:	ea e0       	ldi	r30, 0x0A	; 10
 ac6:	2e 9e       	mul	r2, r30
 ac8:	20 0d       	add	r18, r0
 aca:	11 24       	eor	r1, r1
 acc:	22 2e       	mov	r2, r18
 ace:	f3 2d       	mov	r31, r3
 ad0:	f0 62       	ori	r31, 0x20	; 32
 ad2:	3f 2e       	mov	r3, r31
 ad4:	08 c0       	rjmp	.+16     	; 0xae6 <vfprintf+0xe6>
 ad6:	8c 36       	cpi	r24, 0x6C	; 108
 ad8:	21 f4       	brne	.+8      	; 0xae2 <vfprintf+0xe2>
 ada:	83 2d       	mov	r24, r3
 adc:	80 68       	ori	r24, 0x80	; 128
 ade:	38 2e       	mov	r3, r24
 ae0:	02 c0       	rjmp	.+4      	; 0xae6 <vfprintf+0xe6>
 ae2:	88 36       	cpi	r24, 0x68	; 104
 ae4:	41 f4       	brne	.+16     	; 0xaf6 <vfprintf+0xf6>
 ae6:	f7 01       	movw	r30, r14
 ae8:	93 fd       	sbrc	r25, 3
 aea:	85 91       	lpm	r24, Z+
 aec:	93 ff       	sbrs	r25, 3
 aee:	81 91       	ld	r24, Z+
 af0:	7f 01       	movw	r14, r30
 af2:	81 11       	cpse	r24, r1
 af4:	b3 cf       	rjmp	.-154    	; 0xa5c <vfprintf+0x5c>
 af6:	98 2f       	mov	r25, r24
 af8:	9f 7d       	andi	r25, 0xDF	; 223
 afa:	95 54       	subi	r25, 0x45	; 69
 afc:	93 30       	cpi	r25, 0x03	; 3
 afe:	28 f4       	brcc	.+10     	; 0xb0a <vfprintf+0x10a>
 b00:	0c 5f       	subi	r16, 0xFC	; 252
 b02:	1f 4f       	sbci	r17, 0xFF	; 255
 b04:	9f e3       	ldi	r25, 0x3F	; 63
 b06:	99 83       	std	Y+1, r25	; 0x01
 b08:	0d c0       	rjmp	.+26     	; 0xb24 <vfprintf+0x124>
 b0a:	83 36       	cpi	r24, 0x63	; 99
 b0c:	31 f0       	breq	.+12     	; 0xb1a <vfprintf+0x11a>
 b0e:	83 37       	cpi	r24, 0x73	; 115
 b10:	71 f0       	breq	.+28     	; 0xb2e <vfprintf+0x12e>
 b12:	83 35       	cpi	r24, 0x53	; 83
 b14:	09 f0       	breq	.+2      	; 0xb18 <vfprintf+0x118>
 b16:	59 c0       	rjmp	.+178    	; 0xbca <vfprintf+0x1ca>
 b18:	21 c0       	rjmp	.+66     	; 0xb5c <vfprintf+0x15c>
 b1a:	f8 01       	movw	r30, r16
 b1c:	80 81       	ld	r24, Z
 b1e:	89 83       	std	Y+1, r24	; 0x01
 b20:	0e 5f       	subi	r16, 0xFE	; 254
 b22:	1f 4f       	sbci	r17, 0xFF	; 255
 b24:	88 24       	eor	r8, r8
 b26:	83 94       	inc	r8
 b28:	91 2c       	mov	r9, r1
 b2a:	53 01       	movw	r10, r6
 b2c:	13 c0       	rjmp	.+38     	; 0xb54 <vfprintf+0x154>
 b2e:	28 01       	movw	r4, r16
 b30:	f2 e0       	ldi	r31, 0x02	; 2
 b32:	4f 0e       	add	r4, r31
 b34:	51 1c       	adc	r5, r1
 b36:	f8 01       	movw	r30, r16
 b38:	a0 80       	ld	r10, Z
 b3a:	b1 80       	ldd	r11, Z+1	; 0x01
 b3c:	36 fe       	sbrs	r3, 6
 b3e:	03 c0       	rjmp	.+6      	; 0xb46 <vfprintf+0x146>
 b40:	69 2d       	mov	r22, r9
 b42:	70 e0       	ldi	r23, 0x00	; 0
 b44:	02 c0       	rjmp	.+4      	; 0xb4a <vfprintf+0x14a>
 b46:	6f ef       	ldi	r22, 0xFF	; 255
 b48:	7f ef       	ldi	r23, 0xFF	; 255
 b4a:	c5 01       	movw	r24, r10
 b4c:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <strnlen>
 b50:	4c 01       	movw	r8, r24
 b52:	82 01       	movw	r16, r4
 b54:	f3 2d       	mov	r31, r3
 b56:	ff 77       	andi	r31, 0x7F	; 127
 b58:	3f 2e       	mov	r3, r31
 b5a:	16 c0       	rjmp	.+44     	; 0xb88 <vfprintf+0x188>
 b5c:	28 01       	movw	r4, r16
 b5e:	22 e0       	ldi	r18, 0x02	; 2
 b60:	42 0e       	add	r4, r18
 b62:	51 1c       	adc	r5, r1
 b64:	f8 01       	movw	r30, r16
 b66:	a0 80       	ld	r10, Z
 b68:	b1 80       	ldd	r11, Z+1	; 0x01
 b6a:	36 fe       	sbrs	r3, 6
 b6c:	03 c0       	rjmp	.+6      	; 0xb74 <vfprintf+0x174>
 b6e:	69 2d       	mov	r22, r9
 b70:	70 e0       	ldi	r23, 0x00	; 0
 b72:	02 c0       	rjmp	.+4      	; 0xb78 <vfprintf+0x178>
 b74:	6f ef       	ldi	r22, 0xFF	; 255
 b76:	7f ef       	ldi	r23, 0xFF	; 255
 b78:	c5 01       	movw	r24, r10
 b7a:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <strnlen_P>
 b7e:	4c 01       	movw	r8, r24
 b80:	f3 2d       	mov	r31, r3
 b82:	f0 68       	ori	r31, 0x80	; 128
 b84:	3f 2e       	mov	r3, r31
 b86:	82 01       	movw	r16, r4
 b88:	33 fc       	sbrc	r3, 3
 b8a:	1b c0       	rjmp	.+54     	; 0xbc2 <vfprintf+0x1c2>
 b8c:	82 2d       	mov	r24, r2
 b8e:	90 e0       	ldi	r25, 0x00	; 0
 b90:	88 16       	cp	r8, r24
 b92:	99 06       	cpc	r9, r25
 b94:	b0 f4       	brcc	.+44     	; 0xbc2 <vfprintf+0x1c2>
 b96:	b6 01       	movw	r22, r12
 b98:	80 e2       	ldi	r24, 0x20	; 32
 b9a:	90 e0       	ldi	r25, 0x00	; 0
 b9c:	0e 94 f7 06 	call	0xdee	; 0xdee <fputc>
 ba0:	2a 94       	dec	r2
 ba2:	f4 cf       	rjmp	.-24     	; 0xb8c <vfprintf+0x18c>
 ba4:	f5 01       	movw	r30, r10
 ba6:	37 fc       	sbrc	r3, 7
 ba8:	85 91       	lpm	r24, Z+
 baa:	37 fe       	sbrs	r3, 7
 bac:	81 91       	ld	r24, Z+
 bae:	5f 01       	movw	r10, r30
 bb0:	b6 01       	movw	r22, r12
 bb2:	90 e0       	ldi	r25, 0x00	; 0
 bb4:	0e 94 f7 06 	call	0xdee	; 0xdee <fputc>
 bb8:	21 10       	cpse	r2, r1
 bba:	2a 94       	dec	r2
 bbc:	21 e0       	ldi	r18, 0x01	; 1
 bbe:	82 1a       	sub	r8, r18
 bc0:	91 08       	sbc	r9, r1
 bc2:	81 14       	cp	r8, r1
 bc4:	91 04       	cpc	r9, r1
 bc6:	71 f7       	brne	.-36     	; 0xba4 <vfprintf+0x1a4>
 bc8:	e8 c0       	rjmp	.+464    	; 0xd9a <vfprintf+0x39a>
 bca:	84 36       	cpi	r24, 0x64	; 100
 bcc:	11 f0       	breq	.+4      	; 0xbd2 <vfprintf+0x1d2>
 bce:	89 36       	cpi	r24, 0x69	; 105
 bd0:	41 f5       	brne	.+80     	; 0xc22 <vfprintf+0x222>
 bd2:	f8 01       	movw	r30, r16
 bd4:	37 fe       	sbrs	r3, 7
 bd6:	07 c0       	rjmp	.+14     	; 0xbe6 <vfprintf+0x1e6>
 bd8:	60 81       	ld	r22, Z
 bda:	71 81       	ldd	r23, Z+1	; 0x01
 bdc:	82 81       	ldd	r24, Z+2	; 0x02
 bde:	93 81       	ldd	r25, Z+3	; 0x03
 be0:	0c 5f       	subi	r16, 0xFC	; 252
 be2:	1f 4f       	sbci	r17, 0xFF	; 255
 be4:	08 c0       	rjmp	.+16     	; 0xbf6 <vfprintf+0x1f6>
 be6:	60 81       	ld	r22, Z
 be8:	71 81       	ldd	r23, Z+1	; 0x01
 bea:	07 2e       	mov	r0, r23
 bec:	00 0c       	add	r0, r0
 bee:	88 0b       	sbc	r24, r24
 bf0:	99 0b       	sbc	r25, r25
 bf2:	0e 5f       	subi	r16, 0xFE	; 254
 bf4:	1f 4f       	sbci	r17, 0xFF	; 255
 bf6:	f3 2d       	mov	r31, r3
 bf8:	ff 76       	andi	r31, 0x6F	; 111
 bfa:	3f 2e       	mov	r3, r31
 bfc:	97 ff       	sbrs	r25, 7
 bfe:	09 c0       	rjmp	.+18     	; 0xc12 <vfprintf+0x212>
 c00:	90 95       	com	r25
 c02:	80 95       	com	r24
 c04:	70 95       	com	r23
 c06:	61 95       	neg	r22
 c08:	7f 4f       	sbci	r23, 0xFF	; 255
 c0a:	8f 4f       	sbci	r24, 0xFF	; 255
 c0c:	9f 4f       	sbci	r25, 0xFF	; 255
 c0e:	f0 68       	ori	r31, 0x80	; 128
 c10:	3f 2e       	mov	r3, r31
 c12:	2a e0       	ldi	r18, 0x0A	; 10
 c14:	30 e0       	ldi	r19, 0x00	; 0
 c16:	a3 01       	movw	r20, r6
 c18:	0e 94 33 07 	call	0xe66	; 0xe66 <__ultoa_invert>
 c1c:	88 2e       	mov	r8, r24
 c1e:	86 18       	sub	r8, r6
 c20:	45 c0       	rjmp	.+138    	; 0xcac <vfprintf+0x2ac>
 c22:	85 37       	cpi	r24, 0x75	; 117
 c24:	31 f4       	brne	.+12     	; 0xc32 <vfprintf+0x232>
 c26:	23 2d       	mov	r18, r3
 c28:	2f 7e       	andi	r18, 0xEF	; 239
 c2a:	b2 2e       	mov	r11, r18
 c2c:	2a e0       	ldi	r18, 0x0A	; 10
 c2e:	30 e0       	ldi	r19, 0x00	; 0
 c30:	25 c0       	rjmp	.+74     	; 0xc7c <vfprintf+0x27c>
 c32:	93 2d       	mov	r25, r3
 c34:	99 7f       	andi	r25, 0xF9	; 249
 c36:	b9 2e       	mov	r11, r25
 c38:	8f 36       	cpi	r24, 0x6F	; 111
 c3a:	c1 f0       	breq	.+48     	; 0xc6c <vfprintf+0x26c>
 c3c:	18 f4       	brcc	.+6      	; 0xc44 <vfprintf+0x244>
 c3e:	88 35       	cpi	r24, 0x58	; 88
 c40:	79 f0       	breq	.+30     	; 0xc60 <vfprintf+0x260>
 c42:	b5 c0       	rjmp	.+362    	; 0xdae <vfprintf+0x3ae>
 c44:	80 37       	cpi	r24, 0x70	; 112
 c46:	19 f0       	breq	.+6      	; 0xc4e <vfprintf+0x24e>
 c48:	88 37       	cpi	r24, 0x78	; 120
 c4a:	21 f0       	breq	.+8      	; 0xc54 <vfprintf+0x254>
 c4c:	b0 c0       	rjmp	.+352    	; 0xdae <vfprintf+0x3ae>
 c4e:	e9 2f       	mov	r30, r25
 c50:	e0 61       	ori	r30, 0x10	; 16
 c52:	be 2e       	mov	r11, r30
 c54:	b4 fe       	sbrs	r11, 4
 c56:	0d c0       	rjmp	.+26     	; 0xc72 <vfprintf+0x272>
 c58:	fb 2d       	mov	r31, r11
 c5a:	f4 60       	ori	r31, 0x04	; 4
 c5c:	bf 2e       	mov	r11, r31
 c5e:	09 c0       	rjmp	.+18     	; 0xc72 <vfprintf+0x272>
 c60:	34 fe       	sbrs	r3, 4
 c62:	0a c0       	rjmp	.+20     	; 0xc78 <vfprintf+0x278>
 c64:	29 2f       	mov	r18, r25
 c66:	26 60       	ori	r18, 0x06	; 6
 c68:	b2 2e       	mov	r11, r18
 c6a:	06 c0       	rjmp	.+12     	; 0xc78 <vfprintf+0x278>
 c6c:	28 e0       	ldi	r18, 0x08	; 8
 c6e:	30 e0       	ldi	r19, 0x00	; 0
 c70:	05 c0       	rjmp	.+10     	; 0xc7c <vfprintf+0x27c>
 c72:	20 e1       	ldi	r18, 0x10	; 16
 c74:	30 e0       	ldi	r19, 0x00	; 0
 c76:	02 c0       	rjmp	.+4      	; 0xc7c <vfprintf+0x27c>
 c78:	20 e1       	ldi	r18, 0x10	; 16
 c7a:	32 e0       	ldi	r19, 0x02	; 2
 c7c:	f8 01       	movw	r30, r16
 c7e:	b7 fe       	sbrs	r11, 7
 c80:	07 c0       	rjmp	.+14     	; 0xc90 <vfprintf+0x290>
 c82:	60 81       	ld	r22, Z
 c84:	71 81       	ldd	r23, Z+1	; 0x01
 c86:	82 81       	ldd	r24, Z+2	; 0x02
 c88:	93 81       	ldd	r25, Z+3	; 0x03
 c8a:	0c 5f       	subi	r16, 0xFC	; 252
 c8c:	1f 4f       	sbci	r17, 0xFF	; 255
 c8e:	06 c0       	rjmp	.+12     	; 0xc9c <vfprintf+0x29c>
 c90:	60 81       	ld	r22, Z
 c92:	71 81       	ldd	r23, Z+1	; 0x01
 c94:	80 e0       	ldi	r24, 0x00	; 0
 c96:	90 e0       	ldi	r25, 0x00	; 0
 c98:	0e 5f       	subi	r16, 0xFE	; 254
 c9a:	1f 4f       	sbci	r17, 0xFF	; 255
 c9c:	a3 01       	movw	r20, r6
 c9e:	0e 94 33 07 	call	0xe66	; 0xe66 <__ultoa_invert>
 ca2:	88 2e       	mov	r8, r24
 ca4:	86 18       	sub	r8, r6
 ca6:	fb 2d       	mov	r31, r11
 ca8:	ff 77       	andi	r31, 0x7F	; 127
 caa:	3f 2e       	mov	r3, r31
 cac:	36 fe       	sbrs	r3, 6
 cae:	0d c0       	rjmp	.+26     	; 0xcca <vfprintf+0x2ca>
 cb0:	23 2d       	mov	r18, r3
 cb2:	2e 7f       	andi	r18, 0xFE	; 254
 cb4:	a2 2e       	mov	r10, r18
 cb6:	89 14       	cp	r8, r9
 cb8:	58 f4       	brcc	.+22     	; 0xcd0 <vfprintf+0x2d0>
 cba:	34 fe       	sbrs	r3, 4
 cbc:	0b c0       	rjmp	.+22     	; 0xcd4 <vfprintf+0x2d4>
 cbe:	32 fc       	sbrc	r3, 2
 cc0:	09 c0       	rjmp	.+18     	; 0xcd4 <vfprintf+0x2d4>
 cc2:	83 2d       	mov	r24, r3
 cc4:	8e 7e       	andi	r24, 0xEE	; 238
 cc6:	a8 2e       	mov	r10, r24
 cc8:	05 c0       	rjmp	.+10     	; 0xcd4 <vfprintf+0x2d4>
 cca:	b8 2c       	mov	r11, r8
 ccc:	a3 2c       	mov	r10, r3
 cce:	03 c0       	rjmp	.+6      	; 0xcd6 <vfprintf+0x2d6>
 cd0:	b8 2c       	mov	r11, r8
 cd2:	01 c0       	rjmp	.+2      	; 0xcd6 <vfprintf+0x2d6>
 cd4:	b9 2c       	mov	r11, r9
 cd6:	a4 fe       	sbrs	r10, 4
 cd8:	0f c0       	rjmp	.+30     	; 0xcf8 <vfprintf+0x2f8>
 cda:	fe 01       	movw	r30, r28
 cdc:	e8 0d       	add	r30, r8
 cde:	f1 1d       	adc	r31, r1
 ce0:	80 81       	ld	r24, Z
 ce2:	80 33       	cpi	r24, 0x30	; 48
 ce4:	21 f4       	brne	.+8      	; 0xcee <vfprintf+0x2ee>
 ce6:	9a 2d       	mov	r25, r10
 ce8:	99 7e       	andi	r25, 0xE9	; 233
 cea:	a9 2e       	mov	r10, r25
 cec:	09 c0       	rjmp	.+18     	; 0xd00 <vfprintf+0x300>
 cee:	a2 fe       	sbrs	r10, 2
 cf0:	06 c0       	rjmp	.+12     	; 0xcfe <vfprintf+0x2fe>
 cf2:	b3 94       	inc	r11
 cf4:	b3 94       	inc	r11
 cf6:	04 c0       	rjmp	.+8      	; 0xd00 <vfprintf+0x300>
 cf8:	8a 2d       	mov	r24, r10
 cfa:	86 78       	andi	r24, 0x86	; 134
 cfc:	09 f0       	breq	.+2      	; 0xd00 <vfprintf+0x300>
 cfe:	b3 94       	inc	r11
 d00:	a3 fc       	sbrc	r10, 3
 d02:	11 c0       	rjmp	.+34     	; 0xd26 <vfprintf+0x326>
 d04:	a0 fe       	sbrs	r10, 0
 d06:	06 c0       	rjmp	.+12     	; 0xd14 <vfprintf+0x314>
 d08:	b2 14       	cp	r11, r2
 d0a:	88 f4       	brcc	.+34     	; 0xd2e <vfprintf+0x32e>
 d0c:	28 0c       	add	r2, r8
 d0e:	92 2c       	mov	r9, r2
 d10:	9b 18       	sub	r9, r11
 d12:	0e c0       	rjmp	.+28     	; 0xd30 <vfprintf+0x330>
 d14:	b2 14       	cp	r11, r2
 d16:	60 f4       	brcc	.+24     	; 0xd30 <vfprintf+0x330>
 d18:	b6 01       	movw	r22, r12
 d1a:	80 e2       	ldi	r24, 0x20	; 32
 d1c:	90 e0       	ldi	r25, 0x00	; 0
 d1e:	0e 94 f7 06 	call	0xdee	; 0xdee <fputc>
 d22:	b3 94       	inc	r11
 d24:	f7 cf       	rjmp	.-18     	; 0xd14 <vfprintf+0x314>
 d26:	b2 14       	cp	r11, r2
 d28:	18 f4       	brcc	.+6      	; 0xd30 <vfprintf+0x330>
 d2a:	2b 18       	sub	r2, r11
 d2c:	02 c0       	rjmp	.+4      	; 0xd32 <vfprintf+0x332>
 d2e:	98 2c       	mov	r9, r8
 d30:	21 2c       	mov	r2, r1
 d32:	a4 fe       	sbrs	r10, 4
 d34:	10 c0       	rjmp	.+32     	; 0xd56 <vfprintf+0x356>
 d36:	b6 01       	movw	r22, r12
 d38:	80 e3       	ldi	r24, 0x30	; 48
 d3a:	90 e0       	ldi	r25, 0x00	; 0
 d3c:	0e 94 f7 06 	call	0xdee	; 0xdee <fputc>
 d40:	a2 fe       	sbrs	r10, 2
 d42:	17 c0       	rjmp	.+46     	; 0xd72 <vfprintf+0x372>
 d44:	a1 fc       	sbrc	r10, 1
 d46:	03 c0       	rjmp	.+6      	; 0xd4e <vfprintf+0x34e>
 d48:	88 e7       	ldi	r24, 0x78	; 120
 d4a:	90 e0       	ldi	r25, 0x00	; 0
 d4c:	02 c0       	rjmp	.+4      	; 0xd52 <vfprintf+0x352>
 d4e:	88 e5       	ldi	r24, 0x58	; 88
 d50:	90 e0       	ldi	r25, 0x00	; 0
 d52:	b6 01       	movw	r22, r12
 d54:	0c c0       	rjmp	.+24     	; 0xd6e <vfprintf+0x36e>
 d56:	8a 2d       	mov	r24, r10
 d58:	86 78       	andi	r24, 0x86	; 134
 d5a:	59 f0       	breq	.+22     	; 0xd72 <vfprintf+0x372>
 d5c:	a1 fe       	sbrs	r10, 1
 d5e:	02 c0       	rjmp	.+4      	; 0xd64 <vfprintf+0x364>
 d60:	8b e2       	ldi	r24, 0x2B	; 43
 d62:	01 c0       	rjmp	.+2      	; 0xd66 <vfprintf+0x366>
 d64:	80 e2       	ldi	r24, 0x20	; 32
 d66:	a7 fc       	sbrc	r10, 7
 d68:	8d e2       	ldi	r24, 0x2D	; 45
 d6a:	b6 01       	movw	r22, r12
 d6c:	90 e0       	ldi	r25, 0x00	; 0
 d6e:	0e 94 f7 06 	call	0xdee	; 0xdee <fputc>
 d72:	89 14       	cp	r8, r9
 d74:	38 f4       	brcc	.+14     	; 0xd84 <vfprintf+0x384>
 d76:	b6 01       	movw	r22, r12
 d78:	80 e3       	ldi	r24, 0x30	; 48
 d7a:	90 e0       	ldi	r25, 0x00	; 0
 d7c:	0e 94 f7 06 	call	0xdee	; 0xdee <fputc>
 d80:	9a 94       	dec	r9
 d82:	f7 cf       	rjmp	.-18     	; 0xd72 <vfprintf+0x372>
 d84:	8a 94       	dec	r8
 d86:	f3 01       	movw	r30, r6
 d88:	e8 0d       	add	r30, r8
 d8a:	f1 1d       	adc	r31, r1
 d8c:	80 81       	ld	r24, Z
 d8e:	b6 01       	movw	r22, r12
 d90:	90 e0       	ldi	r25, 0x00	; 0
 d92:	0e 94 f7 06 	call	0xdee	; 0xdee <fputc>
 d96:	81 10       	cpse	r8, r1
 d98:	f5 cf       	rjmp	.-22     	; 0xd84 <vfprintf+0x384>
 d9a:	22 20       	and	r2, r2
 d9c:	09 f4       	brne	.+2      	; 0xda0 <vfprintf+0x3a0>
 d9e:	42 ce       	rjmp	.-892    	; 0xa24 <vfprintf+0x24>
 da0:	b6 01       	movw	r22, r12
 da2:	80 e2       	ldi	r24, 0x20	; 32
 da4:	90 e0       	ldi	r25, 0x00	; 0
 da6:	0e 94 f7 06 	call	0xdee	; 0xdee <fputc>
 daa:	2a 94       	dec	r2
 dac:	f6 cf       	rjmp	.-20     	; 0xd9a <vfprintf+0x39a>
 dae:	f6 01       	movw	r30, r12
 db0:	86 81       	ldd	r24, Z+6	; 0x06
 db2:	97 81       	ldd	r25, Z+7	; 0x07
 db4:	02 c0       	rjmp	.+4      	; 0xdba <vfprintf+0x3ba>
 db6:	8f ef       	ldi	r24, 0xFF	; 255
 db8:	9f ef       	ldi	r25, 0xFF	; 255
 dba:	2b 96       	adiw	r28, 0x0b	; 11
 dbc:	e2 e1       	ldi	r30, 0x12	; 18
 dbe:	0c 94 ad 07 	jmp	0xf5a	; 0xf5a <__epilogue_restores__>

00000dc2 <strnlen_P>:
 dc2:	fc 01       	movw	r30, r24
 dc4:	05 90       	lpm	r0, Z+
 dc6:	61 50       	subi	r22, 0x01	; 1
 dc8:	70 40       	sbci	r23, 0x00	; 0
 dca:	01 10       	cpse	r0, r1
 dcc:	d8 f7       	brcc	.-10     	; 0xdc4 <strnlen_P+0x2>
 dce:	80 95       	com	r24
 dd0:	90 95       	com	r25
 dd2:	8e 0f       	add	r24, r30
 dd4:	9f 1f       	adc	r25, r31
 dd6:	08 95       	ret

00000dd8 <strnlen>:
 dd8:	fc 01       	movw	r30, r24
 dda:	61 50       	subi	r22, 0x01	; 1
 ddc:	70 40       	sbci	r23, 0x00	; 0
 dde:	01 90       	ld	r0, Z+
 de0:	01 10       	cpse	r0, r1
 de2:	d8 f7       	brcc	.-10     	; 0xdda <strnlen+0x2>
 de4:	80 95       	com	r24
 de6:	90 95       	com	r25
 de8:	8e 0f       	add	r24, r30
 dea:	9f 1f       	adc	r25, r31
 dec:	08 95       	ret

00000dee <fputc>:
 dee:	0f 93       	push	r16
 df0:	1f 93       	push	r17
 df2:	cf 93       	push	r28
 df4:	df 93       	push	r29
 df6:	fb 01       	movw	r30, r22
 df8:	23 81       	ldd	r18, Z+3	; 0x03
 dfa:	21 fd       	sbrc	r18, 1
 dfc:	03 c0       	rjmp	.+6      	; 0xe04 <fputc+0x16>
 dfe:	8f ef       	ldi	r24, 0xFF	; 255
 e00:	9f ef       	ldi	r25, 0xFF	; 255
 e02:	2c c0       	rjmp	.+88     	; 0xe5c <fputc+0x6e>
 e04:	22 ff       	sbrs	r18, 2
 e06:	16 c0       	rjmp	.+44     	; 0xe34 <fputc+0x46>
 e08:	46 81       	ldd	r20, Z+6	; 0x06
 e0a:	57 81       	ldd	r21, Z+7	; 0x07
 e0c:	24 81       	ldd	r18, Z+4	; 0x04
 e0e:	35 81       	ldd	r19, Z+5	; 0x05
 e10:	42 17       	cp	r20, r18
 e12:	53 07       	cpc	r21, r19
 e14:	44 f4       	brge	.+16     	; 0xe26 <fputc+0x38>
 e16:	a0 81       	ld	r26, Z
 e18:	b1 81       	ldd	r27, Z+1	; 0x01
 e1a:	9d 01       	movw	r18, r26
 e1c:	2f 5f       	subi	r18, 0xFF	; 255
 e1e:	3f 4f       	sbci	r19, 0xFF	; 255
 e20:	31 83       	std	Z+1, r19	; 0x01
 e22:	20 83       	st	Z, r18
 e24:	8c 93       	st	X, r24
 e26:	26 81       	ldd	r18, Z+6	; 0x06
 e28:	37 81       	ldd	r19, Z+7	; 0x07
 e2a:	2f 5f       	subi	r18, 0xFF	; 255
 e2c:	3f 4f       	sbci	r19, 0xFF	; 255
 e2e:	37 83       	std	Z+7, r19	; 0x07
 e30:	26 83       	std	Z+6, r18	; 0x06
 e32:	14 c0       	rjmp	.+40     	; 0xe5c <fputc+0x6e>
 e34:	8b 01       	movw	r16, r22
 e36:	ec 01       	movw	r28, r24
 e38:	fb 01       	movw	r30, r22
 e3a:	00 84       	ldd	r0, Z+8	; 0x08
 e3c:	f1 85       	ldd	r31, Z+9	; 0x09
 e3e:	e0 2d       	mov	r30, r0
 e40:	09 95       	icall
 e42:	89 2b       	or	r24, r25
 e44:	e1 f6       	brne	.-72     	; 0xdfe <fputc+0x10>
 e46:	d8 01       	movw	r26, r16
 e48:	16 96       	adiw	r26, 0x06	; 6
 e4a:	8d 91       	ld	r24, X+
 e4c:	9c 91       	ld	r25, X
 e4e:	17 97       	sbiw	r26, 0x07	; 7
 e50:	01 96       	adiw	r24, 0x01	; 1
 e52:	17 96       	adiw	r26, 0x07	; 7
 e54:	9c 93       	st	X, r25
 e56:	8e 93       	st	-X, r24
 e58:	16 97       	sbiw	r26, 0x06	; 6
 e5a:	ce 01       	movw	r24, r28
 e5c:	df 91       	pop	r29
 e5e:	cf 91       	pop	r28
 e60:	1f 91       	pop	r17
 e62:	0f 91       	pop	r16
 e64:	08 95       	ret

00000e66 <__ultoa_invert>:
 e66:	fa 01       	movw	r30, r20
 e68:	aa 27       	eor	r26, r26
 e6a:	28 30       	cpi	r18, 0x08	; 8
 e6c:	51 f1       	breq	.+84     	; 0xec2 <__ultoa_invert+0x5c>
 e6e:	20 31       	cpi	r18, 0x10	; 16
 e70:	81 f1       	breq	.+96     	; 0xed2 <__ultoa_invert+0x6c>
 e72:	e8 94       	clt
 e74:	6f 93       	push	r22
 e76:	6e 7f       	andi	r22, 0xFE	; 254
 e78:	6e 5f       	subi	r22, 0xFE	; 254
 e7a:	7f 4f       	sbci	r23, 0xFF	; 255
 e7c:	8f 4f       	sbci	r24, 0xFF	; 255
 e7e:	9f 4f       	sbci	r25, 0xFF	; 255
 e80:	af 4f       	sbci	r26, 0xFF	; 255
 e82:	b1 e0       	ldi	r27, 0x01	; 1
 e84:	3e d0       	rcall	.+124    	; 0xf02 <__ultoa_invert+0x9c>
 e86:	b4 e0       	ldi	r27, 0x04	; 4
 e88:	3c d0       	rcall	.+120    	; 0xf02 <__ultoa_invert+0x9c>
 e8a:	67 0f       	add	r22, r23
 e8c:	78 1f       	adc	r23, r24
 e8e:	89 1f       	adc	r24, r25
 e90:	9a 1f       	adc	r25, r26
 e92:	a1 1d       	adc	r26, r1
 e94:	68 0f       	add	r22, r24
 e96:	79 1f       	adc	r23, r25
 e98:	8a 1f       	adc	r24, r26
 e9a:	91 1d       	adc	r25, r1
 e9c:	a1 1d       	adc	r26, r1
 e9e:	6a 0f       	add	r22, r26
 ea0:	71 1d       	adc	r23, r1
 ea2:	81 1d       	adc	r24, r1
 ea4:	91 1d       	adc	r25, r1
 ea6:	a1 1d       	adc	r26, r1
 ea8:	20 d0       	rcall	.+64     	; 0xeea <__ultoa_invert+0x84>
 eaa:	09 f4       	brne	.+2      	; 0xeae <__ultoa_invert+0x48>
 eac:	68 94       	set
 eae:	3f 91       	pop	r19
 eb0:	2a e0       	ldi	r18, 0x0A	; 10
 eb2:	26 9f       	mul	r18, r22
 eb4:	11 24       	eor	r1, r1
 eb6:	30 19       	sub	r19, r0
 eb8:	30 5d       	subi	r19, 0xD0	; 208
 eba:	31 93       	st	Z+, r19
 ebc:	de f6       	brtc	.-74     	; 0xe74 <__ultoa_invert+0xe>
 ebe:	cf 01       	movw	r24, r30
 ec0:	08 95       	ret
 ec2:	46 2f       	mov	r20, r22
 ec4:	47 70       	andi	r20, 0x07	; 7
 ec6:	40 5d       	subi	r20, 0xD0	; 208
 ec8:	41 93       	st	Z+, r20
 eca:	b3 e0       	ldi	r27, 0x03	; 3
 ecc:	0f d0       	rcall	.+30     	; 0xeec <__ultoa_invert+0x86>
 ece:	c9 f7       	brne	.-14     	; 0xec2 <__ultoa_invert+0x5c>
 ed0:	f6 cf       	rjmp	.-20     	; 0xebe <__ultoa_invert+0x58>
 ed2:	46 2f       	mov	r20, r22
 ed4:	4f 70       	andi	r20, 0x0F	; 15
 ed6:	40 5d       	subi	r20, 0xD0	; 208
 ed8:	4a 33       	cpi	r20, 0x3A	; 58
 eda:	18 f0       	brcs	.+6      	; 0xee2 <__ultoa_invert+0x7c>
 edc:	49 5d       	subi	r20, 0xD9	; 217
 ede:	31 fd       	sbrc	r19, 1
 ee0:	40 52       	subi	r20, 0x20	; 32
 ee2:	41 93       	st	Z+, r20
 ee4:	02 d0       	rcall	.+4      	; 0xeea <__ultoa_invert+0x84>
 ee6:	a9 f7       	brne	.-22     	; 0xed2 <__ultoa_invert+0x6c>
 ee8:	ea cf       	rjmp	.-44     	; 0xebe <__ultoa_invert+0x58>
 eea:	b4 e0       	ldi	r27, 0x04	; 4
 eec:	a6 95       	lsr	r26
 eee:	97 95       	ror	r25
 ef0:	87 95       	ror	r24
 ef2:	77 95       	ror	r23
 ef4:	67 95       	ror	r22
 ef6:	ba 95       	dec	r27
 ef8:	c9 f7       	brne	.-14     	; 0xeec <__ultoa_invert+0x86>
 efa:	00 97       	sbiw	r24, 0x00	; 0
 efc:	61 05       	cpc	r22, r1
 efe:	71 05       	cpc	r23, r1
 f00:	08 95       	ret
 f02:	9b 01       	movw	r18, r22
 f04:	ac 01       	movw	r20, r24
 f06:	0a 2e       	mov	r0, r26
 f08:	06 94       	lsr	r0
 f0a:	57 95       	ror	r21
 f0c:	47 95       	ror	r20
 f0e:	37 95       	ror	r19
 f10:	27 95       	ror	r18
 f12:	ba 95       	dec	r27
 f14:	c9 f7       	brne	.-14     	; 0xf08 <__ultoa_invert+0xa2>
 f16:	62 0f       	add	r22, r18
 f18:	73 1f       	adc	r23, r19
 f1a:	84 1f       	adc	r24, r20
 f1c:	95 1f       	adc	r25, r21
 f1e:	a0 1d       	adc	r26, r0
 f20:	08 95       	ret

00000f22 <__prologue_saves__>:
 f22:	2f 92       	push	r2
 f24:	3f 92       	push	r3
 f26:	4f 92       	push	r4
 f28:	5f 92       	push	r5
 f2a:	6f 92       	push	r6
 f2c:	7f 92       	push	r7
 f2e:	8f 92       	push	r8
 f30:	9f 92       	push	r9
 f32:	af 92       	push	r10
 f34:	bf 92       	push	r11
 f36:	cf 92       	push	r12
 f38:	df 92       	push	r13
 f3a:	ef 92       	push	r14
 f3c:	ff 92       	push	r15
 f3e:	0f 93       	push	r16
 f40:	1f 93       	push	r17
 f42:	cf 93       	push	r28
 f44:	df 93       	push	r29
 f46:	cd b7       	in	r28, 0x3d	; 61
 f48:	de b7       	in	r29, 0x3e	; 62
 f4a:	ca 1b       	sub	r28, r26
 f4c:	db 0b       	sbc	r29, r27
 f4e:	0f b6       	in	r0, 0x3f	; 63
 f50:	f8 94       	cli
 f52:	de bf       	out	0x3e, r29	; 62
 f54:	0f be       	out	0x3f, r0	; 63
 f56:	cd bf       	out	0x3d, r28	; 61
 f58:	09 94       	ijmp

00000f5a <__epilogue_restores__>:
 f5a:	2a 88       	ldd	r2, Y+18	; 0x12
 f5c:	39 88       	ldd	r3, Y+17	; 0x11
 f5e:	48 88       	ldd	r4, Y+16	; 0x10
 f60:	5f 84       	ldd	r5, Y+15	; 0x0f
 f62:	6e 84       	ldd	r6, Y+14	; 0x0e
 f64:	7d 84       	ldd	r7, Y+13	; 0x0d
 f66:	8c 84       	ldd	r8, Y+12	; 0x0c
 f68:	9b 84       	ldd	r9, Y+11	; 0x0b
 f6a:	aa 84       	ldd	r10, Y+10	; 0x0a
 f6c:	b9 84       	ldd	r11, Y+9	; 0x09
 f6e:	c8 84       	ldd	r12, Y+8	; 0x08
 f70:	df 80       	ldd	r13, Y+7	; 0x07
 f72:	ee 80       	ldd	r14, Y+6	; 0x06
 f74:	fd 80       	ldd	r15, Y+5	; 0x05
 f76:	0c 81       	ldd	r16, Y+4	; 0x04
 f78:	1b 81       	ldd	r17, Y+3	; 0x03
 f7a:	aa 81       	ldd	r26, Y+2	; 0x02
 f7c:	b9 81       	ldd	r27, Y+1	; 0x01
 f7e:	ce 0f       	add	r28, r30
 f80:	d1 1d       	adc	r29, r1
 f82:	0f b6       	in	r0, 0x3f	; 63
 f84:	f8 94       	cli
 f86:	de bf       	out	0x3e, r29	; 62
 f88:	0f be       	out	0x3f, r0	; 63
 f8a:	cd bf       	out	0x3d, r28	; 61
 f8c:	ed 01       	movw	r28, r26
 f8e:	08 95       	ret

00000f90 <_exit>:
 f90:	f8 94       	cli

00000f92 <__stop_program>:
 f92:	ff cf       	rjmp	.-2      	; 0xf92 <__stop_program>
