
IHM_Envase_LucasMM_MatheusRW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000354  000003e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000354  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080010e  0080010e  000003f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000428  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000468  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001098  00000000  00000000  000004d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000087a  00000000  00000000  00001568  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006f9  00000000  00000000  00001de2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  000024dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004da  00000000  00000000  000025a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000091c  00000000  00000000  00002a7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  0000339a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <__vector_1>
   8:	0c 94 84 01 	jmp	0x308	; 0x308 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e5       	ldi	r30, 0x54	; 84
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 31       	cpi	r26, 0x10	; 16
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 25 01 	call	0x24a	; 0x24a <main>
  9e:	0c 94 a8 01 	jmp	0x350	; 0x350 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <lcd_cmd>:
*/
void lcd_cmd(
    unsigned char c, /*!< command to send */
    cmdType_t cmd)
{
    switch(cmd) {
  a6:	66 23       	and	r22, r22
  a8:	19 f0       	breq	.+6      	; 0xb0 <lcd_cmd+0xa>
  aa:	61 30       	cpi	r22, 0x01	; 1
  ac:	19 f0       	breq	.+6      	; 0xb4 <lcd_cmd+0xe>
  ae:	03 c0       	rjmp	.+6      	; 0xb6 <lcd_cmd+0x10>
    case LCD_CMD:
        rst_bit(LCD_RS);
  b0:	59 98       	cbi	0x0b, 1	; 11
        break;
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <lcd_cmd+0x10>
    case LCD_CHAR:
        set_bit(LCD_RS);
  b4:	59 9a       	sbi	0x0b, 1	; 11
    }
    /*send first nibble (high half) of data*/
#if USE_LOWER_NIBLE
    LCD_PORT |= (c & 0xf0) >> 4;
#else
    LCD_PORT |= (c & 0xf0);
  b6:	9b b1       	in	r25, 0x0b	; 11
  b8:	28 2f       	mov	r18, r24
  ba:	20 7f       	andi	r18, 0xF0	; 240
  bc:	92 2b       	or	r25, r18
  be:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	45 e0       	ldi	r20, 0x05	; 5
  c2:	4a 95       	dec	r20
  c4:	f1 f7       	brne	.-4      	; 0xc2 <lcd_cmd+0x1c>
  c6:	00 00       	nop
#endif
    enable_pulse();
  c8:	58 9a       	sbi	0x0b, 0	; 11
  ca:	95 e0       	ldi	r25, 0x05	; 5
  cc:	9a 95       	dec	r25
  ce:	f1 f7       	brne	.-4      	; 0xcc <lcd_cmd+0x26>
  d0:	00 00       	nop
  d2:	58 98       	cbi	0x0b, 0	; 11
  d4:	40 ef       	ldi	r20, 0xF0	; 240
  d6:	4a 95       	dec	r20
  d8:	f1 f7       	brne	.-4      	; 0xd6 <lcd_cmd+0x30>

    /*send second (lower) nibble of data*/
#if USE_LOWER_NIBLE
    LCD_PORT |= (c & 0x0f);
#else
    LCD_PORT |= (c & 0x0f) << 4;
  da:	9b b1       	in	r25, 0x0b	; 11
  dc:	40 e1       	ldi	r20, 0x10	; 16
  de:	84 9f       	mul	r24, r20
  e0:	90 01       	movw	r18, r0
  e2:	11 24       	eor	r1, r1
  e4:	29 2b       	or	r18, r25
  e6:	2b b9       	out	0x0b, r18	; 11
  e8:	95 e0       	ldi	r25, 0x05	; 5
  ea:	9a 95       	dec	r25
  ec:	f1 f7       	brne	.-4      	; 0xea <lcd_cmd+0x44>
  ee:	00 00       	nop
#endif
    enable_pulse();
  f0:	58 9a       	sbi	0x0b, 0	; 11
  f2:	45 e0       	ldi	r20, 0x05	; 5
  f4:	4a 95       	dec	r20
  f6:	f1 f7       	brne	.-4      	; 0xf4 <lcd_cmd+0x4e>
  f8:	00 00       	nop
  fa:	58 98       	cbi	0x0b, 0	; 11
  fc:	90 ef       	ldi	r25, 0xF0	; 240
  fe:	9a 95       	dec	r25
 100:	f1 f7       	brne	.-4      	; 0xfe <lcd_cmd+0x58>

    //se for instrução de retorno ou limpeza espera LCD estar pronto
    if(c<4)
 102:	84 30       	cpi	r24, 0x04	; 4
 104:	30 f4       	brcc	.+12     	; 0x112 <lcd_cmd+0x6c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 106:	8f e3       	ldi	r24, 0x3F	; 63
 108:	9f e1       	ldi	r25, 0x1F	; 31
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <lcd_cmd+0x64>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <lcd_cmd+0x6a>
 110:	00 00       	nop
 112:	08 95       	ret

00000114 <lcd_4bit_init>:
/**
   sequência ditada pelo fabricando do circuito integrado HD44780
 */
void lcd_4bit_init(void)
{
  rst_bit(LCD_RS); // indica instrução
 114:	59 98       	cbi	0x0b, 1	; 11
  rst_bit(LCD_EN); // enable em 0
 116:	58 98       	cbi	0x0b, 0	; 11
 118:	2f ef       	ldi	r18, 0xFF	; 255
 11a:	89 ef       	ldi	r24, 0xF9	; 249
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	21 50       	subi	r18, 0x01	; 1
 120:	80 40       	sbci	r24, 0x00	; 0
 122:	90 40       	sbci	r25, 0x00	; 0
 124:	e1 f7       	brne	.-8      	; 0x11e <lcd_4bit_init+0xa>
 126:	00 c0       	rjmp	.+0      	; 0x128 <lcd_4bit_init+0x14>
 128:	00 00       	nop
	_delay_ms(20);

#if USE_LOWER_NIBLE
  LCD_PORT |= 0x03;
#else
  LCD_PORT |= 0x30;
 12a:	8b b1       	in	r24, 0x0b	; 11
 12c:	80 63       	ori	r24, 0x30	; 48
 12e:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 130:	25 e0       	ldi	r18, 0x05	; 5
 132:	2a 95       	dec	r18
 134:	f1 f7       	brne	.-4      	; 0x132 <lcd_4bit_init+0x1e>
 136:	00 00       	nop
#endif

  //habilitação respeitando os tempos de resposta do LCD
	enable_pulse();
 138:	58 9a       	sbi	0x0b, 0	; 11
 13a:	85 e0       	ldi	r24, 0x05	; 5
 13c:	8a 95       	dec	r24
 13e:	f1 f7       	brne	.-4      	; 0x13c <lcd_4bit_init+0x28>
 140:	00 00       	nop
 142:	58 98       	cbi	0x0b, 0	; 11
 144:	90 ef       	ldi	r25, 0xF0	; 240
 146:	9a 95       	dec	r25
 148:	f1 f7       	brne	.-4      	; 0x146 <lcd_4bit_init+0x32>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14a:	8f e1       	ldi	r24, 0x1F	; 31
 14c:	9e e4       	ldi	r25, 0x4E	; 78
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <lcd_4bit_init+0x3a>
 152:	00 c0       	rjmp	.+0      	; 0x154 <lcd_4bit_init+0x40>
 154:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 156:	95 e0       	ldi	r25, 0x05	; 5
 158:	9a 95       	dec	r25
 15a:	f1 f7       	brne	.-4      	; 0x158 <lcd_4bit_init+0x44>
 15c:	00 00       	nop
	_delay_ms(5);
	enable_pulse();
 15e:	58 9a       	sbi	0x0b, 0	; 11
 160:	25 e0       	ldi	r18, 0x05	; 5
 162:	2a 95       	dec	r18
 164:	f1 f7       	brne	.-4      	; 0x162 <lcd_4bit_init+0x4e>
 166:	00 00       	nop
 168:	58 98       	cbi	0x0b, 0	; 11
 16a:	80 ef       	ldi	r24, 0xF0	; 240
 16c:	8a 95       	dec	r24
 16e:	f1 f7       	brne	.-4      	; 0x16c <lcd_4bit_init+0x58>
 170:	8f e1       	ldi	r24, 0x1F	; 31
 172:	93 e0       	ldi	r25, 0x03	; 3
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <lcd_4bit_init+0x60>
 178:	00 c0       	rjmp	.+0      	; 0x17a <lcd_4bit_init+0x66>
 17a:	00 00       	nop
 17c:	95 e0       	ldi	r25, 0x05	; 5
 17e:	9a 95       	dec	r25
 180:	f1 f7       	brne	.-4      	; 0x17e <lcd_4bit_init+0x6a>
 182:	00 00       	nop
	_delay_us(200);
	enable_pulse();
 184:	58 9a       	sbi	0x0b, 0	; 11
 186:	25 e0       	ldi	r18, 0x05	; 5
 188:	2a 95       	dec	r18
 18a:	f1 f7       	brne	.-4      	; 0x188 <lcd_4bit_init+0x74>
 18c:	00 00       	nop
 18e:	58 98       	cbi	0x0b, 0	; 11
 190:	80 ef       	ldi	r24, 0xF0	; 240
 192:	8a 95       	dec	r24
 194:	f1 f7       	brne	.-4      	; 0x192 <lcd_4bit_init+0x7e>

#if USE_LOWER_NIBLE
  LCD_PORT |= 0x02;
#else
  LCD_PORT |= 0x20;
 196:	5d 9a       	sbi	0x0b, 5	; 11
 198:	95 e0       	ldi	r25, 0x05	; 5
 19a:	9a 95       	dec	r25
 19c:	f1 f7       	brne	.-4      	; 0x19a <lcd_4bit_init+0x86>
 19e:	00 00       	nop
#endif
  enable_pulse();
 1a0:	58 9a       	sbi	0x0b, 0	; 11
 1a2:	25 e0       	ldi	r18, 0x05	; 5
 1a4:	2a 95       	dec	r18
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <lcd_4bit_init+0x90>
 1a8:	00 00       	nop
 1aa:	58 98       	cbi	0x0b, 0	; 11
 1ac:	80 ef       	ldi	r24, 0xF0	; 240
 1ae:	8a 95       	dec	r24
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <lcd_4bit_init+0x9a>

  lcd_cmd(0x28,LCD_CMD); //interface de 4 bits 2 linhas (aqui se habilita as 2 linhas)
 1b2:	60 e0       	ldi	r22, 0x00	; 0
 1b4:	88 e2       	ldi	r24, 0x28	; 40
 1b6:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
  lcd_cmd(0x08,LCD_CMD); //desliga o display
 1ba:	60 e0       	ldi	r22, 0x00	; 0
 1bc:	88 e0       	ldi	r24, 0x08	; 8
 1be:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
  lcd_cmd(0x01,LCD_CMD); //limpa todo o display
 1c2:	60 e0       	ldi	r22, 0x00	; 0
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
  lcd_cmd(0x0C,LCD_CMD); //mensagem aparente cursor inativo não piscando
 1ca:	60 e0       	ldi	r22, 0x00	; 0
 1cc:	8c e0       	ldi	r24, 0x0C	; 12
 1ce:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
  lcd_cmd(0x80,LCD_CMD); //inicializa cursor na primeira posição a esquerda - 1a linha
 1d2:	60 e0       	ldi	r22, 0x00	; 0
 1d4:	80 e8       	ldi	r24, 0x80	; 128
 1d6:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
 1da:	08 95       	ret

000001dc <lcd_send_char>:
    }
}

void lcd_send_char(const char c)
{
    set_bit(LCD_RS);
 1dc:	59 9a       	sbi	0x0b, 1	; 11

#if USE_LOWER_NIBLE
    LCD_PORT |= (c & 0xf0) >> 4;
#else
    LCD_PORT |= (c & 0xf0);
 1de:	9b b1       	in	r25, 0x0b	; 11
 1e0:	28 2f       	mov	r18, r24
 1e2:	20 7f       	andi	r18, 0xF0	; 240
 1e4:	92 2b       	or	r25, r18
 1e6:	9b b9       	out	0x0b, r25	; 11
 1e8:	35 e0       	ldi	r19, 0x05	; 5
 1ea:	3a 95       	dec	r19
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <lcd_send_char+0xe>
 1ee:	00 00       	nop
#endif
    enable_pulse();
 1f0:	58 9a       	sbi	0x0b, 0	; 11
 1f2:	95 e0       	ldi	r25, 0x05	; 5
 1f4:	9a 95       	dec	r25
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <lcd_send_char+0x18>
 1f8:	00 00       	nop
 1fa:	58 98       	cbi	0x0b, 0	; 11
 1fc:	30 ef       	ldi	r19, 0xF0	; 240
 1fe:	3a 95       	dec	r19
 200:	f1 f7       	brne	.-4      	; 0x1fe <lcd_send_char+0x22>

    /*send second (lower) nibble of data*/
#if USE_LOWER_NIBLE
    LCD_PORT |= (c & 0x0f);
#else
    LCD_PORT |= (c & 0x0f) << 4;
 202:	2b b1       	in	r18, 0x0b	; 11
 204:	30 e1       	ldi	r19, 0x10	; 16
 206:	83 9f       	mul	r24, r19
 208:	c0 01       	movw	r24, r0
 20a:	11 24       	eor	r1, r1
 20c:	82 2b       	or	r24, r18
 20e:	8b b9       	out	0x0b, r24	; 11
 210:	85 e0       	ldi	r24, 0x05	; 5
 212:	8a 95       	dec	r24
 214:	f1 f7       	brne	.-4      	; 0x212 <lcd_send_char+0x36>
 216:	00 00       	nop
#endif
    enable_pulse();
 218:	58 9a       	sbi	0x0b, 0	; 11
 21a:	95 e0       	ldi	r25, 0x05	; 5
 21c:	9a 95       	dec	r25
 21e:	f1 f7       	brne	.-4      	; 0x21c <lcd_send_char+0x40>
 220:	00 00       	nop
 222:	58 98       	cbi	0x0b, 0	; 11
 224:	30 ef       	ldi	r19, 0xF0	; 240
 226:	3a 95       	dec	r19
 228:	f1 f7       	brne	.-4      	; 0x226 <lcd_send_char+0x4a>
 22a:	08 95       	ret

0000022c <lcd_write>:
}
/**
   write a string to the display.
 */
void lcd_write(char *str)
{
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
 230:	ec 01       	movw	r28, r24
   for (;*str;++str) lcd_send_char(*str);
 232:	88 81       	ld	r24, Y
 234:	88 23       	and	r24, r24
 236:	31 f0       	breq	.+12     	; 0x244 <lcd_write+0x18>
 238:	21 96       	adiw	r28, 0x01	; 1
 23a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_send_char>
 23e:	89 91       	ld	r24, Y+
 240:	81 11       	cpse	r24, r1
 242:	fb cf       	rjmp	.-10     	; 0x23a <lcd_write+0xe>
}
 244:	df 91       	pop	r29
 246:	cf 91       	pop	r28
 248:	08 95       	ret

0000024a <main>:

/*--------- Main ---------*/
int main(void)
{
    //configure interrupts
    EICRA |= 0b00001010; //set INT0 and INT1 as falling edge
 24a:	e9 e6       	ldi	r30, 0x69	; 105
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	80 81       	ld	r24, Z
 250:	8a 60       	ori	r24, 0x0A	; 10
 252:	80 83       	st	Z, r24

    //set up pin directions
    DDRB = 0x00;
 254:	14 b8       	out	0x04, r1	; 4
    DDRC = 0b00111000;
 256:	88 e3       	ldi	r24, 0x38	; 56
 258:	87 b9       	out	0x07, r24	; 7
    DDRD = 0b11110011;
 25a:	83 ef       	ldi	r24, 0xF3	; 243
 25c:	8a b9       	out	0x0a, r24	; 10

    sei();
 25e:	78 94       	sei

    lcd_4bit_init();//will configure it's own pins
 260:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_4bit_init>

    lcd_write("Hello there!");
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	91 e0       	ldi	r25, 0x01	; 1
 268:	0e 94 16 01 	call	0x22c	; 0x22c <lcd_write>
	
	set_bit(CYL_B);
 26c:	44 9a       	sbi	0x08, 4	; 8
                break;
            case LOADING:
				//lcd_write("Loading box");
				rst_bit(CYL_C);
				//_delay_ms(variable * 1000);  TODO: create variable for user-defined wait time (seconds)
				if(get_bit(C_O)==0) run_state = RELEASING;
 26e:	94 e0       	ldi	r25, 0x04	; 4
				break;
            case RELEASING:
				//lcd_write("Releasing box");
				set_bit(CYL_A);
				set_bit(CYL_B);
				if(get_bit(A_1)==0 && get_bit(B_1)==0) run_state = LOADING;
 270:	32 e0       	ldi	r19, 0x02	; 2
        case RUN:
            switch(run_state) //TODO: prever casos impossÃ­veis / erros
            {
            case WAITING:
				//lcd_write("Waiting for next box");
				if(get_bit(SNS_CX)==0) run_state = DETECTED;
 272:	21 e0       	ldi	r18, 0x01	; 1
	
	set_bit(CYL_B);

  while(1)
    {
        switch(major_state)
 274:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <major_state>
 278:	83 30       	cpi	r24, 0x03	; 3
 27a:	e1 f7       	brne	.-8      	; 0x274 <main+0x2a>
        break;
        case READY:

            break;
        case RUN:
            switch(run_state) //TODO: prever casos impossÃ­veis / erros
 27c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 280:	82 30       	cpi	r24, 0x02	; 2
 282:	c9 f0       	breq	.+50     	; 0x2b6 <main+0x6c>
 284:	28 f4       	brcc	.+10     	; 0x290 <main+0x46>
 286:	88 23       	and	r24, r24
 288:	41 f0       	breq	.+16     	; 0x29a <main+0x50>
 28a:	81 30       	cpi	r24, 0x01	; 1
 28c:	59 f0       	breq	.+22     	; 0x2a4 <main+0x5a>
 28e:	f2 cf       	rjmp	.-28     	; 0x274 <main+0x2a>
 290:	83 30       	cpi	r24, 0x03	; 3
 292:	b9 f0       	breq	.+46     	; 0x2c2 <main+0x78>
 294:	84 30       	cpi	r24, 0x04	; 4
 296:	d9 f0       	breq	.+54     	; 0x2ce <main+0x84>
 298:	ed cf       	rjmp	.-38     	; 0x274 <main+0x2a>
            {
            case WAITING:
				//lcd_write("Waiting for next box");
				if(get_bit(SNS_CX)==0) run_state = DETECTED;
 29a:	1e 99       	sbic	0x03, 6	; 3
 29c:	eb cf       	rjmp	.-42     	; 0x274 <main+0x2a>
 29e:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <__data_end>
 2a2:	e8 cf       	rjmp	.-48     	; 0x274 <main+0x2a>
                break;
            case DETECTED:
				//lcd_write("Box detected");
				set_bit(CYL_A);
 2a4:	43 9a       	sbi	0x08, 3	; 8
				set_bit(CYL_B);
 2a6:	44 9a       	sbi	0x08, 4	; 8
				if(get_bit(A_1)==0 && get_bit(B_1)==0) run_state = LOADING;
 2a8:	19 99       	sbic	0x03, 1	; 3
 2aa:	e4 cf       	rjmp	.-56     	; 0x274 <main+0x2a>
 2ac:	1b 99       	sbic	0x03, 3	; 3
 2ae:	e2 cf       	rjmp	.-60     	; 0x274 <main+0x2a>
 2b0:	30 93 0e 01 	sts	0x010E, r19	; 0x80010e <__data_end>
 2b4:	df cf       	rjmp	.-66     	; 0x274 <main+0x2a>
                break;
            case LOADING:
				//lcd_write("Loading box");
				rst_bit(CYL_C);
 2b6:	45 98       	cbi	0x08, 5	; 8
				//_delay_ms(variable * 1000);  TODO: create variable for user-defined wait time (seconds)
				if(get_bit(C_O)==0) run_state = RELEASING;
 2b8:	1c 99       	sbic	0x03, 4	; 3
 2ba:	dc cf       	rjmp	.-72     	; 0x274 <main+0x2a>
 2bc:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <__data_end>
 2c0:	d9 cf       	rjmp	.-78     	; 0x274 <main+0x2a>
                break;
			case CLOSING:
				//lcd_write("Closing dispenser");
				set_bit(CYL_C);
 2c2:	45 9a       	sbi	0x08, 5	; 8
				if(get_bit(C_1)==0) run_state = RELEASING;
 2c4:	1d 99       	sbic	0x03, 5	; 3
 2c6:	d6 cf       	rjmp	.-84     	; 0x274 <main+0x2a>
 2c8:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <__data_end>
 2cc:	d3 cf       	rjmp	.-90     	; 0x274 <main+0x2a>
				break;
            case RELEASING:
				//lcd_write("Releasing box");
				set_bit(CYL_A);
 2ce:	43 9a       	sbi	0x08, 3	; 8
				set_bit(CYL_B);
 2d0:	44 9a       	sbi	0x08, 4	; 8
				if(get_bit(A_1)==0 && get_bit(B_1)==0) run_state = LOADING;
 2d2:	19 99       	sbic	0x03, 1	; 3
 2d4:	cf cf       	rjmp	.-98     	; 0x274 <main+0x2a>
 2d6:	1b 99       	sbic	0x03, 3	; 3
 2d8:	cd cf       	rjmp	.-102    	; 0x274 <main+0x2a>
 2da:	30 93 0e 01 	sts	0x010E, r19	; 0x80010e <__data_end>
 2de:	ca cf       	rjmp	.-108    	; 0x274 <main+0x2a>

000002e0 <__vector_1>:
    }
}

/*--------- Interrupts ---------*/
ISR(E_STOP_INTR) //Emergency stop button ISR
{
 2e0:	1f 92       	push	r1
 2e2:	0f 92       	push	r0
 2e4:	0f b6       	in	r0, 0x3f	; 63
 2e6:	0f 92       	push	r0
 2e8:	11 24       	eor	r1, r1
 2ea:	8f 93       	push	r24
   major_state = ERROR;
 2ec:	85 e0       	ldi	r24, 0x05	; 5
 2ee:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <major_state>
	set_bit(CYL_B);
 2f2:	44 9a       	sbi	0x08, 4	; 8
	set_bit(CYL_C);
 2f4:	45 9a       	sbi	0x08, 5	; 8
	rst_bit(CYL_A);
 2f6:	43 98       	cbi	0x08, 3	; 8
   while(!get_bit(E_STOP_BTN)); //lock the machine while the emergency button is pressed
 2f8:	4a 9b       	sbis	0x09, 2	; 9
 2fa:	fe cf       	rjmp	.-4      	; 0x2f8 <__vector_1+0x18>
}
 2fc:	8f 91       	pop	r24
 2fe:	0f 90       	pop	r0
 300:	0f be       	out	0x3f, r0	; 63
 302:	0f 90       	pop	r0
 304:	1f 90       	pop	r1
 306:	18 95       	reti

00000308 <__vector_2>:
ISR(PAUSE_INT)
{
 308:	1f 92       	push	r1
 30a:	0f 92       	push	r0
 30c:	0f b6       	in	r0, 0x3f	; 63
 30e:	0f 92       	push	r0
 310:	11 24       	eor	r1, r1
 312:	8f 93       	push	r24
 314:	9f 93       	push	r25
    major_state = (major_state == RUN ? PAUSE : (major_state ==  PAUSE ? RUN : major_state));
 316:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <major_state>
 31a:	83 30       	cpi	r24, 0x03	; 3
 31c:	39 f0       	breq	.+14     	; 0x32c <__vector_2+0x24>
 31e:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <major_state>
 322:	84 30       	cpi	r24, 0x04	; 4
 324:	29 f0       	breq	.+10     	; 0x330 <__vector_2+0x28>
 326:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <major_state>
 32a:	03 c0       	rjmp	.+6      	; 0x332 <__vector_2+0x2a>
 32c:	84 e0       	ldi	r24, 0x04	; 4
 32e:	01 c0       	rjmp	.+2      	; 0x332 <__vector_2+0x2a>
 330:	83 e0       	ldi	r24, 0x03	; 3
 332:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <major_state>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 336:	8f e3       	ldi	r24, 0x3F	; 63
 338:	9c e9       	ldi	r25, 0x9C	; 156
 33a:	01 97       	sbiw	r24, 0x01	; 1
 33c:	f1 f7       	brne	.-4      	; 0x33a <__vector_2+0x32>
 33e:	00 c0       	rjmp	.+0      	; 0x340 <__vector_2+0x38>
 340:	00 00       	nop
    _delay_ms(10); //button debounce
}
 342:	9f 91       	pop	r25
 344:	8f 91       	pop	r24
 346:	0f 90       	pop	r0
 348:	0f be       	out	0x3f, r0	; 63
 34a:	0f 90       	pop	r0
 34c:	1f 90       	pop	r1
 34e:	18 95       	reti

00000350 <_exit>:
 350:	f8 94       	cli

00000352 <__stop_program>:
 352:	ff cf       	rjmp	.-2      	; 0x352 <__stop_program>
