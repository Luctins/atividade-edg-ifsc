
IHM_Envase_LucasMM_MatheusRW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000001e2  00000256  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000294  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000dbc  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007d5  00000000  00000000  000010f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000046f  00000000  00000000  000018c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ac  00000000  00000000  00001d34  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000460  00000000  00000000  00001de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006e8  00000000  00000000  00002240  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00002928  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ee       	ldi	r30, 0xE2	; 226
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <main>
  8e:	0c 94 ef 00 	jmp	0x1de	; 0x1de <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <lcd_cmd>:
   send a single command to the display.
*/
void lcd_cmd(unsigned char c /*!< command or character to send */,
             cmd_type_t cd)
{
  switch(cd)
  96:	66 23       	and	r22, r22
  98:	19 f0       	breq	.+6      	; 0xa0 <lcd_cmd+0xa>
  9a:	61 30       	cpi	r22, 0x01	; 1
  9c:	19 f0       	breq	.+6      	; 0xa4 <lcd_cmd+0xe>
  9e:	08 95       	ret
    {
    case LCD_CMD:
      rst_bit(LCD_RS);
  a0:	59 98       	cbi	0x0b, 1	; 11
      break;
  a2:	01 c0       	rjmp	.+2      	; 0xa6 <lcd_cmd+0x10>
    case LCD_CHAR:
      set_bit(LCD_RS);
  a4:	59 9a       	sbi	0x0b, 1	; 11
    }


  /*send first nibble of data*/
#if USE_LOWER_NIBLE
  LCD_PORT = (LCD_PORT & 0xf0) | ( 0x0f & c);
  a6:	9b b1       	in	r25, 0x0b	; 11
  a8:	90 7f       	andi	r25, 0xF0	; 240
  aa:	28 2f       	mov	r18, r24
  ac:	2f 70       	andi	r18, 0x0F	; 15
  ae:	92 2b       	or	r25, r18
  b0:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	95 e0       	ldi	r25, 0x05	; 5
  b4:	9a 95       	dec	r25
  b6:	f1 f7       	brne	.-4      	; 0xb4 <lcd_cmd+0x1e>
  b8:	00 00       	nop
#else
  LCD_PORT = (LCD_PORT & 0x0f) | ( 0xf0 & c);
#endif
  enable_pulse();
  ba:	58 9a       	sbi	0x0b, 0	; 11
  bc:	95 e0       	ldi	r25, 0x05	; 5
  be:	9a 95       	dec	r25
  c0:	f1 f7       	brne	.-4      	; 0xbe <lcd_cmd+0x28>
  c2:	00 00       	nop
  c4:	58 98       	cbi	0x0b, 0	; 11
  c6:	90 ef       	ldi	r25, 0xF0	; 240
  c8:	9a 95       	dec	r25
  ca:	f1 f7       	brne	.-4      	; 0xc8 <lcd_cmd+0x32>

  /*send second nibble of data*/
#if USE_LOWER_NIBLE
  LCD_PORT = (LCD_PORT & 0xf0) | ( 0x0f & (c << 4));
  cc:	9b b1       	in	r25, 0x0b	; 11
  ce:	90 7f       	andi	r25, 0xF0	; 240
  d0:	9b b9       	out	0x0b, r25	; 11
#else
  LCD_PORT = (LCD_PORT & 0x0f) | ( 0xf0 & (c << 4));
#endif

  //se for instrução de retorno ou limpeza espera LCD estar pronto
	if((cd==LCD_CMD) && (c<4))
  d2:	61 11       	cpse	r22, r1
  d4:	08 c0       	rjmp	.+16     	; 0xe6 <lcd_cmd+0x50>
  d6:	84 30       	cpi	r24, 0x04	; 4
  d8:	30 f4       	brcc	.+12     	; 0xe6 <lcd_cmd+0x50>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	8f e3       	ldi	r24, 0x3F	; 63
  dc:	9f e1       	ldi	r25, 0x1F	; 31
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <lcd_cmd+0x48>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <lcd_cmd+0x4e>
  e4:	00 00       	nop
  e6:	08 95       	ret

000000e8 <lcd_4bit_init>:
   sequência ditada pelo fabricando do circuito integrado HD44780
 */
void lcd_4bit_init(void)
{
   //configure pins
  LCD_DDR |= LCD_DATA_MASK;
  e8:	8a b1       	in	r24, 0x0a	; 10
  ea:	8f 60       	ori	r24, 0x0F	; 15
  ec:	8a b9       	out	0x0a, r24	; 10

  rst_bit(LCD_RS); // inidica instrução
  ee:	59 98       	cbi	0x0b, 1	; 11
  rst_bit(LCD_EN); // enable em 0
  f0:	58 98       	cbi	0x0b, 0	; 11
  f2:	2f ef       	ldi	r18, 0xFF	; 255
  f4:	89 ef       	ldi	r24, 0xF9	; 249
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	21 50       	subi	r18, 0x01	; 1
  fa:	80 40       	sbci	r24, 0x00	; 0
  fc:	90 40       	sbci	r25, 0x00	; 0
  fe:	e1 f7       	brne	.-8      	; 0xf8 <lcd_4bit_init+0x10>
 100:	00 c0       	rjmp	.+0      	; 0x102 <lcd_4bit_init+0x1a>
 102:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 104:	25 e0       	ldi	r18, 0x05	; 5
 106:	2a 95       	dec	r18
 108:	f1 f7       	brne	.-4      	; 0x106 <lcd_4bit_init+0x1e>
 10a:	00 00       	nop
  */
	_delay_ms(20);


  //habilitação respeitando os tempos de resposta do LCD
	enable_pulse();
 10c:	58 9a       	sbi	0x0b, 0	; 11
 10e:	85 e0       	ldi	r24, 0x05	; 5
 110:	8a 95       	dec	r24
 112:	f1 f7       	brne	.-4      	; 0x110 <lcd_4bit_init+0x28>
 114:	00 00       	nop
 116:	58 98       	cbi	0x0b, 0	; 11
 118:	90 ef       	ldi	r25, 0xF0	; 240
 11a:	9a 95       	dec	r25
 11c:	f1 f7       	brne	.-4      	; 0x11a <lcd_4bit_init+0x32>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11e:	8f e1       	ldi	r24, 0x1F	; 31
 120:	9e e4       	ldi	r25, 0x4E	; 78
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <lcd_4bit_init+0x3a>
 126:	00 c0       	rjmp	.+0      	; 0x128 <lcd_4bit_init+0x40>
 128:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12a:	95 e0       	ldi	r25, 0x05	; 5
 12c:	9a 95       	dec	r25
 12e:	f1 f7       	brne	.-4      	; 0x12c <lcd_4bit_init+0x44>
 130:	00 00       	nop
	_delay_ms(5);
	enable_pulse();
 132:	58 9a       	sbi	0x0b, 0	; 11
 134:	25 e0       	ldi	r18, 0x05	; 5
 136:	2a 95       	dec	r18
 138:	f1 f7       	brne	.-4      	; 0x136 <lcd_4bit_init+0x4e>
 13a:	00 00       	nop
 13c:	58 98       	cbi	0x0b, 0	; 11
 13e:	80 ef       	ldi	r24, 0xF0	; 240
 140:	8a 95       	dec	r24
 142:	f1 f7       	brne	.-4      	; 0x140 <lcd_4bit_init+0x58>
 144:	8f e1       	ldi	r24, 0x1F	; 31
 146:	93 e0       	ldi	r25, 0x03	; 3
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <lcd_4bit_init+0x60>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <lcd_4bit_init+0x66>
 14e:	00 00       	nop
 150:	95 e0       	ldi	r25, 0x05	; 5
 152:	9a 95       	dec	r25
 154:	f1 f7       	brne	.-4      	; 0x152 <lcd_4bit_init+0x6a>
 156:	00 00       	nop
	_delay_us(200);
	enable_pulse();
 158:	58 9a       	sbi	0x0b, 0	; 11
 15a:	25 e0       	ldi	r18, 0x05	; 5
 15c:	2a 95       	dec	r18
 15e:	f1 f7       	brne	.-4      	; 0x15c <lcd_4bit_init+0x74>
 160:	00 00       	nop
 162:	58 98       	cbi	0x0b, 0	; 11
 164:	80 ef       	ldi	r24, 0xF0	; 240
 166:	8a 95       	dec	r24
 168:	f1 f7       	brne	.-4      	; 0x166 <lcd_4bit_init+0x7e>

	#if USE_LOWER_NIBLE
		LCD_PORT |= 0x02;
 16a:	59 9a       	sbi	0x0b, 1	; 11
 16c:	95 e0       	ldi	r25, 0x05	; 5
 16e:	9a 95       	dec	r25
 170:	f1 f7       	brne	.-4      	; 0x16e <lcd_4bit_init+0x86>
 172:	00 00       	nop
	#else
		LCD_PORT |= 0x20;
	#endif

	enable_pulse();
 174:	58 9a       	sbi	0x0b, 0	; 11
 176:	25 e0       	ldi	r18, 0x05	; 5
 178:	2a 95       	dec	r18
 17a:	f1 f7       	brne	.-4      	; 0x178 <lcd_4bit_init+0x90>
 17c:	00 00       	nop
 17e:	58 98       	cbi	0x0b, 0	; 11
 180:	80 ef       	ldi	r24, 0xF0	; 240
 182:	8a 95       	dec	r24
 184:	f1 f7       	brne	.-4      	; 0x182 <lcd_4bit_init+0x9a>
  lcd_cmd(0x28,LCD_CMD); //interface de 4 bits 2 linhas (aqui se habilita as 2 linhas)
 186:	60 e0       	ldi	r22, 0x00	; 0
 188:	88 e2       	ldi	r24, 0x28	; 40
 18a:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_cmd>
  lcd_cmd(0x08,LCD_CMD); //desliga o display
 18e:	60 e0       	ldi	r22, 0x00	; 0
 190:	88 e0       	ldi	r24, 0x08	; 8
 192:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_cmd>
  lcd_cmd(0x01,LCD_CMD); //limpa todo o display
 196:	60 e0       	ldi	r22, 0x00	; 0
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_cmd>
  lcd_cmd(0x0C,LCD_CMD); //mensagem aparente cursor inativo não piscando
 19e:	60 e0       	ldi	r22, 0x00	; 0
 1a0:	8c e0       	ldi	r24, 0x0C	; 12
 1a2:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_cmd>
  lcd_cmd(0x80,LCD_CMD); //inicializa cursor na primeira posição a esquerda - 1a linha
 1a6:	60 e0       	ldi	r22, 0x00	; 0
 1a8:	80 e8       	ldi	r24, 0x80	; 128
 1aa:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_cmd>
 1ae:	08 95       	ret

000001b0 <lcd_write>:

/**
   write a string to the display.
 */
void lcd_write(char *str)
{
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	ec 01       	movw	r28, r24
   for (;*str;++str) lcd_cmd(*str,LCD_PORT);
 1b6:	88 81       	ld	r24, Y
 1b8:	88 23       	and	r24, r24
 1ba:	39 f0       	breq	.+14     	; 0x1ca <lcd_write+0x1a>
 1bc:	21 96       	adiw	r28, 0x01	; 1
 1be:	6b b1       	in	r22, 0x0b	; 11
 1c0:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_cmd>
 1c4:	89 91       	ld	r24, Y+
 1c6:	81 11       	cpse	r24, r1
 1c8:	fa cf       	rjmp	.-12     	; 0x1be <lcd_write+0xe>
}
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	08 95       	ret

000001d0 <main>:
void setup(void);

/*--------- Main ---------*/
int main(void)
{
    lcd_4bit_init();
 1d0:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_4bit_init>
    lcd_write("hello, World!");
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	91 e0       	ldi	r25, 0x01	; 1
 1d8:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_write>
 1dc:	ff cf       	rjmp	.-2      	; 0x1dc <main+0xc>

000001de <_exit>:
 1de:	f8 94       	cli

000001e0 <__stop_program>:
 1e0:	ff cf       	rjmp	.-2      	; 0x1e0 <__stop_program>
