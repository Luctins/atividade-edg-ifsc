
IHM_Envase_LucasMM_MatheusRW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ac  00800100  00000414  000004a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000414  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  008001ac  008001ac  00000554  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000554  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000584  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000005c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001397  00000000  00000000  00000624  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008c1  00000000  00000000  000019bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000760  00000000  00000000  0000227c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b8  00000000  00000000  000029dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000050f  00000000  00000000  00002a94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008a3  00000000  00000000  00002fa3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00003846  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__vector_1>
   8:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e1       	ldi	r30, 0x14	; 20
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 3a       	cpi	r26, 0xAC	; 172
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac ea       	ldi	r26, 0xAC	; 172
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 3a       	cpi	r26, 0xAF	; 175
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 0a 01 	call	0x214	; 0x214 <main>
  9e:	0c 94 08 02 	jmp	0x410	; 0x410 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <lcd_cmd>:
   send a single command to the display.
*/
void lcd_cmd(unsigned char c, /*!< command to send */
             cmdType_t cmd /*!< command to send */)
{
    switch(cmd) {
  a6:	66 23       	and	r22, r22
  a8:	19 f0       	breq	.+6      	; 0xb0 <lcd_cmd+0xa>
  aa:	61 30       	cpi	r22, 0x01	; 1
  ac:	19 f0       	breq	.+6      	; 0xb4 <lcd_cmd+0xe>
  ae:	03 c0       	rjmp	.+6      	; 0xb6 <lcd_cmd+0x10>
    case LCD_CMD:
        rst_bit(LCD_RS);
  b0:	59 98       	cbi	0x0b, 1	; 11
        break;
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <lcd_cmd+0x10>
    case LCD_CHAR:
        set_bit(LCD_RS);
  b4:	59 9a       	sbi	0x0b, 1	; 11

    /*send first nibble (high half) of data*/
#if USE_LOWER_NIBLE == 1
    LCD_PORT = (LCD_PORT & 0xf0) | ((c & 0xf0) >> 4);
#else
    LCD_PORT = (LCD_PORT & 0x0f) | (c & 0xf0);
  b6:	9b b1       	in	r25, 0x0b	; 11
  b8:	9f 70       	andi	r25, 0x0F	; 15
  ba:	28 2f       	mov	r18, r24
  bc:	20 7f       	andi	r18, 0xF0	; 240
  be:	92 2b       	or	r25, r18
  c0:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	45 e0       	ldi	r20, 0x05	; 5
  c4:	4a 95       	dec	r20
  c6:	f1 f7       	brne	.-4      	; 0xc4 <lcd_cmd+0x1e>
  c8:	00 00       	nop
#endif
    enable_pulse();
  ca:	58 9a       	sbi	0x0b, 0	; 11
  cc:	95 e0       	ldi	r25, 0x05	; 5
  ce:	9a 95       	dec	r25
  d0:	f1 f7       	brne	.-4      	; 0xce <lcd_cmd+0x28>
  d2:	00 00       	nop
  d4:	58 98       	cbi	0x0b, 0	; 11
  d6:	40 ef       	ldi	r20, 0xF0	; 240
  d8:	4a 95       	dec	r20
  da:	f1 f7       	brne	.-4      	; 0xd8 <lcd_cmd+0x32>

    /*send second (lower) nibble of data*/
#if USE_LOWER_NIBLE == 1
    LCD_PORT = (LCD_PORT & 0xf0) | (c & 0x0f);
#else
    LCD_PORT = (LCD_PORT & 0x0f) | ((c & 0x0f) << 4);
  dc:	2b b1       	in	r18, 0x0b	; 11
  de:	92 2f       	mov	r25, r18
  e0:	9f 70       	andi	r25, 0x0F	; 15
  e2:	40 e1       	ldi	r20, 0x10	; 16
  e4:	84 9f       	mul	r24, r20
  e6:	90 01       	movw	r18, r0
  e8:	11 24       	eor	r1, r1
  ea:	29 2b       	or	r18, r25
  ec:	2b b9       	out	0x0b, r18	; 11
  ee:	95 e0       	ldi	r25, 0x05	; 5
  f0:	9a 95       	dec	r25
  f2:	f1 f7       	brne	.-4      	; 0xf0 <lcd_cmd+0x4a>
  f4:	00 00       	nop
#endif
    enable_pulse();
  f6:	58 9a       	sbi	0x0b, 0	; 11
  f8:	45 e0       	ldi	r20, 0x05	; 5
  fa:	4a 95       	dec	r20
  fc:	f1 f7       	brne	.-4      	; 0xfa <lcd_cmd+0x54>
  fe:	00 00       	nop
 100:	58 98       	cbi	0x0b, 0	; 11
 102:	90 ef       	ldi	r25, 0xF0	; 240
 104:	9a 95       	dec	r25
 106:	f1 f7       	brne	.-4      	; 0x104 <lcd_cmd+0x5e>

    //wait if cmd is clear or return home (exec time ~1.52ms)
    if(c<4 && cmd == LCD_CMD)
 108:	84 30       	cpi	r24, 0x04	; 4
 10a:	40 f4       	brcc	.+16     	; 0x11c <lcd_cmd+0x76>
 10c:	61 11       	cpse	r22, r1
 10e:	06 c0       	rjmp	.+12     	; 0x11c <lcd_cmd+0x76>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 110:	8f e3       	ldi	r24, 0x3F	; 63
 112:	9f e1       	ldi	r25, 0x1F	; 31
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <lcd_cmd+0x6e>
 118:	00 c0       	rjmp	.+0      	; 0x11a <lcd_cmd+0x74>
 11a:	00 00       	nop
    {
        _delay_ms(2);
    }
    //set_bit(LCD_RS);
    LCD_PORT &= ~(LCD_DATA_MASK);
 11c:	8b b1       	in	r24, 0x0b	; 11
 11e:	8f 70       	andi	r24, 0x0F	; 15
 120:	8b b9       	out	0x0b, r24	; 11
 122:	08 95       	ret

00000124 <lcd_4bit_init>:
void lcd_4bit_init(void)
{

    /* reset lcd port bits and set RS low */
    //LCD_PORT &= 0x0f;
    rst_bit(LCD_RS);
 124:	59 98       	cbi	0x0b, 1	; 11
    rst_bit(LCD_EN);
 126:	58 98       	cbi	0x0b, 0	; 11
 128:	2f ef       	ldi	r18, 0xFF	; 255
 12a:	89 ef       	ldi	r24, 0xF9	; 249
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	21 50       	subi	r18, 0x01	; 1
 130:	80 40       	sbci	r24, 0x00	; 0
 132:	90 40       	sbci	r25, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <lcd_4bit_init+0xa>
 136:	00 c0       	rjmp	.+0      	; 0x138 <lcd_4bit_init+0x14>
 138:	00 00       	nop
       @see https://www.sparkfun.com/datasheets/LCD/HD44780.pdf
    */
#if USE_LOWER_NIBLE == 1
    LCD_PORT = (LCD_PORT & 0xf0) | 0x03;
#else
    LCD_PORT = (LCD_PORT & 0x0f) | 0x30;
 13a:	8b b1       	in	r24, 0x0b	; 11
 13c:	8f 70       	andi	r24, 0x0F	; 15
 13e:	80 63       	ori	r24, 0x30	; 48
 140:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 142:	25 e0       	ldi	r18, 0x05	; 5
 144:	2a 95       	dec	r18
 146:	f1 f7       	brne	.-4      	; 0x144 <lcd_4bit_init+0x20>
 148:	00 00       	nop
#endif
    enable_pulse();
 14a:	58 9a       	sbi	0x0b, 0	; 11
 14c:	85 e0       	ldi	r24, 0x05	; 5
 14e:	8a 95       	dec	r24
 150:	f1 f7       	brne	.-4      	; 0x14e <lcd_4bit_init+0x2a>
 152:	00 00       	nop
 154:	58 98       	cbi	0x0b, 0	; 11
 156:	90 ef       	ldi	r25, 0xF0	; 240
 158:	9a 95       	dec	r25
 15a:	f1 f7       	brne	.-4      	; 0x158 <lcd_4bit_init+0x34>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15c:	8f e1       	ldi	r24, 0x1F	; 31
 15e:	9e e4       	ldi	r25, 0x4E	; 78
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <lcd_4bit_init+0x3c>
 164:	00 c0       	rjmp	.+0      	; 0x166 <lcd_4bit_init+0x42>
 166:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 168:	95 e0       	ldi	r25, 0x05	; 5
 16a:	9a 95       	dec	r25
 16c:	f1 f7       	brne	.-4      	; 0x16a <lcd_4bit_init+0x46>
 16e:	00 00       	nop
    _delay_ms(5);
    enable_pulse();
 170:	58 9a       	sbi	0x0b, 0	; 11
 172:	25 e0       	ldi	r18, 0x05	; 5
 174:	2a 95       	dec	r18
 176:	f1 f7       	brne	.-4      	; 0x174 <lcd_4bit_init+0x50>
 178:	00 00       	nop
 17a:	58 98       	cbi	0x0b, 0	; 11
 17c:	80 ef       	ldi	r24, 0xF0	; 240
 17e:	8a 95       	dec	r24
 180:	f1 f7       	brne	.-4      	; 0x17e <lcd_4bit_init+0x5a>
 182:	8f e1       	ldi	r24, 0x1F	; 31
 184:	93 e0       	ldi	r25, 0x03	; 3
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <lcd_4bit_init+0x62>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <lcd_4bit_init+0x68>
 18c:	00 00       	nop
 18e:	95 e0       	ldi	r25, 0x05	; 5
 190:	9a 95       	dec	r25
 192:	f1 f7       	brne	.-4      	; 0x190 <lcd_4bit_init+0x6c>
 194:	00 00       	nop
    _delay_us(200);
    enable_pulse();
 196:	58 9a       	sbi	0x0b, 0	; 11
 198:	25 e0       	ldi	r18, 0x05	; 5
 19a:	2a 95       	dec	r18
 19c:	f1 f7       	brne	.-4      	; 0x19a <lcd_4bit_init+0x76>
 19e:	00 00       	nop
 1a0:	58 98       	cbi	0x0b, 0	; 11
 1a2:	80 ef       	ldi	r24, 0xF0	; 240
 1a4:	8a 95       	dec	r24
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <lcd_4bit_init+0x80>

#if USE_LOWER_NIBLE
    LCD_PORT = (LCD_PORT & 0xf0) | 0x02;
#else
    LCD_PORT = (LCD_PORT & 0x0f) | 0x20;
 1a8:	8b b1       	in	r24, 0x0b	; 11
 1aa:	8f 70       	andi	r24, 0x0F	; 15
 1ac:	80 62       	ori	r24, 0x20	; 32
 1ae:	8b b9       	out	0x0b, r24	; 11
 1b0:	95 e0       	ldi	r25, 0x05	; 5
 1b2:	9a 95       	dec	r25
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <lcd_4bit_init+0x8e>
 1b6:	00 00       	nop
#endif
    enable_pulse();
 1b8:	58 9a       	sbi	0x0b, 0	; 11
 1ba:	25 e0       	ldi	r18, 0x05	; 5
 1bc:	2a 95       	dec	r18
 1be:	f1 f7       	brne	.-4      	; 0x1bc <lcd_4bit_init+0x98>
 1c0:	00 00       	nop
 1c2:	58 98       	cbi	0x0b, 0	; 11
 1c4:	80 ef       	ldi	r24, 0xF0	; 240
 1c6:	8a 95       	dec	r24
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <lcd_4bit_init+0xa2>


    /* set interface 4 bits, 2 lines, 8 dots font  */
    lcd_cmd(0b00101000,LCD_CMD);
 1ca:	60 e0       	ldi	r22, 0x00	; 0
 1cc:	88 e2       	ldi	r24, 0x28	; 40
 1ce:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
    lcd_cmd(0x08,LCD_CMD); // turn off display
 1d2:	60 e0       	ldi	r22, 0x00	; 0
 1d4:	88 e0       	ldi	r24, 0x08	; 8
 1d6:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
    lcd_cmd(0x01,LCD_CMD); // clear display
 1da:	60 e0       	ldi	r22, 0x00	; 0
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
    lcd_cmd(0x0c,LCD_CMD); // turn displ. on, visible cursor, no blink
 1e2:	60 e0       	ldi	r22, 0x00	; 0
 1e4:	8c e0       	ldi	r24, 0x0C	; 12
 1e6:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
    lcd_cmd(0x80,LCD_CMD); //set CGRAM adress to 0 (1st position)
 1ea:	60 e0       	ldi	r22, 0x00	; 0
 1ec:	80 e8       	ldi	r24, 0x80	; 128
 1ee:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
 1f2:	08 95       	ret

000001f4 <lcd_write>:

/**
   write a string to the display.
 */
void lcd_write(char *str)
{
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	ec 01       	movw	r28, r24
    for (;*str;++str)
 1fa:	88 81       	ld	r24, Y
 1fc:	88 23       	and	r24, r24
 1fe:	39 f0       	breq	.+14     	; 0x20e <lcd_write+0x1a>
 200:	21 96       	adiw	r28, 0x01	; 1
    {
        lcd_cmd(*str,LCD_CHAR);
 202:	61 e0       	ldi	r22, 0x01	; 1
 204:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
/**
   write a string to the display.
 */
void lcd_write(char *str)
{
    for (;*str;++str)
 208:	89 91       	ld	r24, Y+
 20a:	81 11       	cpse	r24, r1
 20c:	fa cf       	rjmp	.-12     	; 0x202 <lcd_write+0xe>
    {
        lcd_cmd(*str,LCD_CHAR);
    }
}
 20e:	df 91       	pop	r29
 210:	cf 91       	pop	r28
 212:	08 95       	ret

00000214 <main>:
 
/*--------- Main ---------*/
int main(void)
{
    //configure interrupts
    EICRA |= 0b00001010; //set INT0 and INT1 as falling edge
 214:	e9 e6       	ldi	r30, 0x69	; 105
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 81       	ld	r24, Z
 21a:	8a 60       	ori	r24, 0x0A	; 10
 21c:	80 83       	st	Z, r24

    EIMSK |= 0x03; //enable INT 1 and 0
 21e:	8d b3       	in	r24, 0x1d	; 29
 220:	83 60       	ori	r24, 0x03	; 3
 222:	8d bb       	out	0x1d, r24	; 29

    //set up pin directions
    DDRB = 0x00;
 224:	14 b8       	out	0x04, r1	; 4
    DDRC = 0b00111000;
 226:	88 e3       	ldi	r24, 0x38	; 56
 228:	87 b9       	out	0x07, r24	; 7
    DDRD = 0b11110011;
 22a:	83 ef       	ldi	r24, 0xF3	; 243
 22c:	8a b9       	out	0x0a, r24	; 10

    sei();
 22e:	78 94       	sei

    lcd_4bit_init();//will configure it's own pins
 230:	0e 94 92 00 	call	0x124	; 0x124 <lcd_4bit_init>

    lcd_write("Hello there!");
 234:	82 e0       	ldi	r24, 0x02	; 2
 236:	91 e0       	ldi	r25, 0x01	; 1
 238:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
				lcd_move_cursor(0,0);
				lcd_write("Loading box    ");
				rst_bit(CYL_C);
				//_delay_ms(fill_delay_ms); TODO
				if(get_bit(C_O)==0) {
					run_state = RELEASING;
 23c:	d4 e0       	ldi	r29, 0x04	; 4
            {
            case WAITING:
				lcd_move_cursor(0,0);
                lcd_write("Waiting box    ");
                if(get_bit(SNS_CX)==0) {
                    run_state = DETECTED;
 23e:	c1 e0       	ldi	r28, 0x01	; 1
                lcd_move_cursor(0,0);
                lcd_write("Box detected   ");
                set_bit(CYL_A);
                set_bit(CYL_B);
                if(get_bit(A_1)==0 && get_bit(B_1)==0) {
                    run_state = LOADING;
 240:	12 e0       	ldi	r17, 0x02	; 2

    lcd_write("Hello there!");

  while(1)
    {
        switch(major_state)
 242:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <major_state>
 246:	83 30       	cpi	r24, 0x03	; 3
 248:	29 f0       	breq	.+10     	; 0x254 <main+0x40>
 24a:	d8 f3       	brcs	.-10     	; 0x242 <main+0x2e>
 24c:	84 30       	cpi	r24, 0x04	; 4
 24e:	09 f4       	brne	.+2      	; 0x252 <main+0x3e>
 250:	95 c0       	rjmp	.+298    	; 0x37c <main+0x168>
 252:	9d c0       	rjmp	.+314    	; 0x38e <main+0x17a>
        break;
        case READY:

            break;
        case RUN:
            switch(run_state) //TODO: prever casos impossíveis / erros, trocar lcd_clears por comando de mover cursor pro inicio do lcd
 254:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <run_state>
 258:	82 30       	cpi	r24, 0x02	; 2
 25a:	49 f1       	breq	.+82     	; 0x2ae <main+0x9a>
 25c:	28 f4       	brcc	.+10     	; 0x268 <main+0x54>
 25e:	88 23       	and	r24, r24
 260:	41 f0       	breq	.+16     	; 0x272 <main+0x5e>
 262:	81 30       	cpi	r24, 0x01	; 1
 264:	99 f0       	breq	.+38     	; 0x28c <main+0x78>
 266:	ed cf       	rjmp	.-38     	; 0x242 <main+0x2e>
 268:	83 30       	cpi	r24, 0x03	; 3
 26a:	79 f1       	breq	.+94     	; 0x2ca <main+0xb6>
 26c:	84 30       	cpi	r24, 0x04	; 4
 26e:	d9 f1       	breq	.+118    	; 0x2e6 <main+0xd2>
 270:	e8 cf       	rjmp	.-48     	; 0x242 <main+0x2e>
void lcd_4bit_init(void);
void lcd_cmd(unsigned char c, cmdType_t type);

inline void lcd_move_cursor(uint8_t l, uint8_t c)
{
    lcd_cmd(0x80 | ((l < 0x0f ? l : 0x0f )+(c > 0 ? 0x40 : 0)), LCD_CMD);
 272:	60 e0       	ldi	r22, 0x00	; 0
 274:	80 e8       	ldi	r24, 0x80	; 128
 276:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
            {
            case WAITING:
				lcd_move_cursor(0,0);
                lcd_write("Waiting box    ");
 27a:	8f e0       	ldi	r24, 0x0F	; 15
 27c:	91 e0       	ldi	r25, 0x01	; 1
 27e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
                if(get_bit(SNS_CX)==0) {
 282:	1e 99       	sbic	0x03, 6	; 3
 284:	de cf       	rjmp	.-68     	; 0x242 <main+0x2e>
                    run_state = DETECTED;
 286:	c0 93 ad 01 	sts	0x01AD, r28	; 0x8001ad <run_state>
 28a:	db cf       	rjmp	.-74     	; 0x242 <main+0x2e>
 28c:	60 e0       	ldi	r22, 0x00	; 0
 28e:	80 e8       	ldi	r24, 0x80	; 128
 290:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
                }
                break;
            case DETECTED:
                lcd_move_cursor(0,0);
                lcd_write("Box detected   ");
 294:	8f e1       	ldi	r24, 0x1F	; 31
 296:	91 e0       	ldi	r25, 0x01	; 1
 298:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
                set_bit(CYL_A);
 29c:	43 9a       	sbi	0x08, 3	; 8
                set_bit(CYL_B);
 29e:	44 9a       	sbi	0x08, 4	; 8
                if(get_bit(A_1)==0 && get_bit(B_1)==0) {
 2a0:	19 99       	sbic	0x03, 1	; 3
 2a2:	cf cf       	rjmp	.-98     	; 0x242 <main+0x2e>
 2a4:	1b 99       	sbic	0x03, 3	; 3
 2a6:	cd cf       	rjmp	.-102    	; 0x242 <main+0x2e>
                    run_state = LOADING;
 2a8:	10 93 ad 01 	sts	0x01AD, r17	; 0x8001ad <run_state>
 2ac:	ca cf       	rjmp	.-108    	; 0x242 <main+0x2e>
 2ae:	60 e0       	ldi	r22, 0x00	; 0
 2b0:	80 e8       	ldi	r24, 0x80	; 128
 2b2:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
                }
                break;
            case LOADING:
				lcd_move_cursor(0,0);
				lcd_write("Loading box    ");
 2b6:	8f e2       	ldi	r24, 0x2F	; 47
 2b8:	91 e0       	ldi	r25, 0x01	; 1
 2ba:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
				rst_bit(CYL_C);
 2be:	45 98       	cbi	0x08, 5	; 8
				//_delay_ms(fill_delay_ms); TODO
				if(get_bit(C_O)==0) {
 2c0:	1c 99       	sbic	0x03, 4	; 3
 2c2:	bf cf       	rjmp	.-130    	; 0x242 <main+0x2e>
					run_state = RELEASING;
 2c4:	d0 93 ad 01 	sts	0x01AD, r29	; 0x8001ad <run_state>
 2c8:	bc cf       	rjmp	.-136    	; 0x242 <main+0x2e>
 2ca:	60 e0       	ldi	r22, 0x00	; 0
 2cc:	80 e8       	ldi	r24, 0x80	; 128
 2ce:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
				}
                break;
			case CLOSING:
				lcd_move_cursor(0,0);
				lcd_write("Closing disp.  ");
 2d2:	8f e3       	ldi	r24, 0x3F	; 63
 2d4:	91 e0       	ldi	r25, 0x01	; 1
 2d6:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
				set_bit(CYL_C);
 2da:	45 9a       	sbi	0x08, 5	; 8
				if(get_bit(C_1)==0) {
 2dc:	1d 99       	sbic	0x03, 5	; 3
 2de:	b1 cf       	rjmp	.-158    	; 0x242 <main+0x2e>
					run_state = RELEASING;
 2e0:	d0 93 ad 01 	sts	0x01AD, r29	; 0x8001ad <run_state>
 2e4:	ae cf       	rjmp	.-164    	; 0x242 <main+0x2e>
 2e6:	60 e0       	ldi	r22, 0x00	; 0
 2e8:	80 e8       	ldi	r24, 0x80	; 128
 2ea:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
				}
				break;
            case RELEASING:
				lcd_move_cursor(0,0);
				lcd_write("Releasing box  ");
 2ee:	8f e4       	ldi	r24, 0x4F	; 79
 2f0:	91 e0       	ldi	r25, 0x01	; 1
 2f2:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
				set_bit(CYL_A);
 2f6:	43 9a       	sbi	0x08, 3	; 8
				set_bit(CYL_B);
 2f8:	44 9a       	sbi	0x08, 4	; 8
				if(get_bit(A_1)==0 && get_bit(B_1)==0) {
 2fa:	19 99       	sbic	0x03, 1	; 3
 2fc:	a2 cf       	rjmp	.-188    	; 0x242 <main+0x2e>
 2fe:	1b 99       	sbic	0x03, 3	; 3
 300:	a0 cf       	rjmp	.-192    	; 0x242 <main+0x2e>
 302:	60 e0       	ldi	r22, 0x00	; 0
 304:	80 e8       	ldi	r24, 0x80	; 128
 306:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
					lcd_move_cursor(0,0);
					lcd_write("Box finished   ");
 30a:	8f e5       	ldi	r24, 0x5F	; 95
 30c:	91 e0       	ldi	r25, 0x01	; 1
 30e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
					++ lot_quantity; //Incrementa uma caixa no lote atual
 312:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <__data_end>
 316:	8f 5f       	subi	r24, 0xFF	; 255
 318:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <__data_end>
					if (lot_quantity == lot_size) //Se o lote atuala atingiu o número de caixas desejado
 31c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <lot_size>
 320:	89 13       	cpse	r24, r25
 322:	29 c0       	rjmp	.+82     	; 0x376 <main+0x162>
					{
						++ lot_number; //Incrementa número de lotes prontos
 324:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 328:	8f 5f       	subi	r24, 0xFF	; 255
 32a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
						lot_quantity = 0; //Reinicia contagem de caixas no lote
 32e:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <__data_end>
 332:	60 e0       	ldi	r22, 0x00	; 0
 334:	80 e8       	ldi	r24, 0x80	; 128
 336:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
						lcd_move_cursor(0,0);
						lcd_write("Lot finished   ");
 33a:	8f e6       	ldi	r24, 0x6F	; 111
 33c:	91 e0       	ldi	r25, 0x01	; 1
 33e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 342:	2f ef       	ldi	r18, 0xFF	; 255
 344:	83 ed       	ldi	r24, 0xD3	; 211
 346:	90 e3       	ldi	r25, 0x30	; 48
 348:	21 50       	subi	r18, 0x01	; 1
 34a:	80 40       	sbci	r24, 0x00	; 0
 34c:	90 40       	sbci	r25, 0x00	; 0
 34e:	e1 f7       	brne	.-8      	; 0x348 <main+0x134>
 350:	00 c0       	rjmp	.+0      	; 0x352 <main+0x13e>
 352:	00 00       	nop
 354:	60 e0       	ldi	r22, 0x00	; 0
 356:	80 e8       	ldi	r24, 0x80	; 128
 358:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
						_delay_ms(1000);
						lcd_move_cursor(0,0);
						lcd_write("Start next lot ");
 35c:	8f e7       	ldi	r24, 0x7F	; 127
 35e:	91 e0       	ldi	r25, 0x01	; 1
 360:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
 364:	2f ef       	ldi	r18, 0xFF	; 255
 366:	83 ed       	ldi	r24, 0xD3	; 211
 368:	90 e3       	ldi	r25, 0x30	; 48
 36a:	21 50       	subi	r18, 0x01	; 1
 36c:	80 40       	sbci	r24, 0x00	; 0
 36e:	90 40       	sbci	r25, 0x00	; 0
 370:	e1 f7       	brne	.-8      	; 0x36a <main+0x156>
 372:	00 c0       	rjmp	.+0      	; 0x374 <main+0x160>
 374:	00 00       	nop
						_delay_ms(1000);
					}
					run_state = WAITING;
 376:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <run_state>
 37a:	63 cf       	rjmp	.-314    	; 0x242 <main+0x2e>
 37c:	60 e0       	ldi	r22, 0x00	; 0
 37e:	80 e8       	ldi	r24, 0x80	; 128
 380:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
				lcd_write(buff);
            }
            break;
        case PAUSE:
			lcd_move_cursor(0,0);
			lcd_write("System paused..");
 384:	8f e8       	ldi	r24, 0x8F	; 143
 386:	91 e0       	ldi	r25, 0x01	; 1
 388:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
            break;
 38c:	5a cf       	rjmp	.-332    	; 0x242 <main+0x2e>
        default:
        case ERROR:
			lcd_clear();
 38e:	60 e0       	ldi	r22, 0x00	; 0
 390:	8c 2f       	mov	r24, r28
 392:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
			lcd_write("SYSTEM ERROR");
 396:	8f e9       	ldi	r24, 0x9F	; 159
 398:	91 e0       	ldi	r25, 0x01	; 1
 39a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
			break;
 39e:	51 cf       	rjmp	.-350    	; 0x242 <main+0x2e>

000003a0 <__vector_1>:
    }
}

/*--------- Interrupts ---------*/
ISR(E_STOP_INTR) //Emergency stop button ISR
{
 3a0:	1f 92       	push	r1
 3a2:	0f 92       	push	r0
 3a4:	0f b6       	in	r0, 0x3f	; 63
 3a6:	0f 92       	push	r0
 3a8:	11 24       	eor	r1, r1
 3aa:	8f 93       	push	r24
   major_state = ERROR;
 3ac:	85 e0       	ldi	r24, 0x05	; 5
 3ae:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <major_state>
	set_bit(CYL_B);
 3b2:	44 9a       	sbi	0x08, 4	; 8
	set_bit(CYL_C);
 3b4:	45 9a       	sbi	0x08, 5	; 8
	rst_bit(CYL_A);
 3b6:	43 98       	cbi	0x08, 3	; 8
   while(!get_bit(E_STOP_BTN)); //lock the machine while the emergency button is pressed
 3b8:	4a 9b       	sbis	0x09, 2	; 9
 3ba:	fe cf       	rjmp	.-4      	; 0x3b8 <__vector_1+0x18>
}
 3bc:	8f 91       	pop	r24
 3be:	0f 90       	pop	r0
 3c0:	0f be       	out	0x3f, r0	; 63
 3c2:	0f 90       	pop	r0
 3c4:	1f 90       	pop	r1
 3c6:	18 95       	reti

000003c8 <__vector_2>:
ISR(PAUSE_INT)
{
 3c8:	1f 92       	push	r1
 3ca:	0f 92       	push	r0
 3cc:	0f b6       	in	r0, 0x3f	; 63
 3ce:	0f 92       	push	r0
 3d0:	11 24       	eor	r1, r1
 3d2:	8f 93       	push	r24
 3d4:	9f 93       	push	r25
    major_state = (major_state == RUN ? PAUSE : (major_state ==  PAUSE ? RUN : major_state));
 3d6:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <major_state>
 3da:	83 30       	cpi	r24, 0x03	; 3
 3dc:	39 f0       	breq	.+14     	; 0x3ec <__vector_2+0x24>
 3de:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <major_state>
 3e2:	84 30       	cpi	r24, 0x04	; 4
 3e4:	29 f0       	breq	.+10     	; 0x3f0 <__vector_2+0x28>
 3e6:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <major_state>
 3ea:	03 c0       	rjmp	.+6      	; 0x3f2 <__vector_2+0x2a>
 3ec:	84 e0       	ldi	r24, 0x04	; 4
 3ee:	01 c0       	rjmp	.+2      	; 0x3f2 <__vector_2+0x2a>
 3f0:	83 e0       	ldi	r24, 0x03	; 3
 3f2:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <major_state>
 3f6:	8f e3       	ldi	r24, 0x3F	; 63
 3f8:	9c e9       	ldi	r25, 0x9C	; 156
 3fa:	01 97       	sbiw	r24, 0x01	; 1
 3fc:	f1 f7       	brne	.-4      	; 0x3fa <__vector_2+0x32>
 3fe:	00 c0       	rjmp	.+0      	; 0x400 <__LOCK_REGION_LENGTH__>
 400:	00 00       	nop
    _delay_ms(10); //button debounce
}
 402:	9f 91       	pop	r25
 404:	8f 91       	pop	r24
 406:	0f 90       	pop	r0
 408:	0f be       	out	0x3f, r0	; 63
 40a:	0f 90       	pop	r0
 40c:	1f 90       	pop	r1
 40e:	18 95       	reti

00000410 <_exit>:
 410:	f8 94       	cli

00000412 <__stop_program>:
 412:	ff cf       	rjmp	.-2      	; 0x412 <__stop_program>
