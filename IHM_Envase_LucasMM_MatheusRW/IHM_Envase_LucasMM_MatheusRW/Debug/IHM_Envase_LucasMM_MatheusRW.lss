
IHM_Envase_LucasMM_MatheusRW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011e  00800100  00000c86  00000d1a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c86  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  0080021e  0080021e  00000e38  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e38  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e94  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001922  00000000  00000000  00000f34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000092b  00000000  00000000  00002856  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000098d  00000000  00000000  00003181  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  00003b10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000053d  00000000  00000000  00003bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c0f  00000000  00000000  00004115  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00004d24  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 03 03 	jmp	0x606	; 0x606 <__vector_1>
   8:	0c 94 17 03 	jmp	0x62e	; 0x62e <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e8       	ldi	r30, 0x86	; 134
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 31       	cpi	r26, 0x1E	; 30
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	ae e1       	ldi	r26, 0x1E	; 30
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 32       	cpi	r26, 0x26	; 38
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 0a 01 	call	0x214	; 0x214 <main>
  9e:	0c 94 41 06 	jmp	0xc82	; 0xc82 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <lcd_cmd>:
   send a single command to the display.
*/
void lcd_cmd(unsigned char c, /*!< command to send */
             cmdType_t cmd /*!< command to send */)
{
    switch(cmd) {
  a6:	66 23       	and	r22, r22
  a8:	19 f0       	breq	.+6      	; 0xb0 <lcd_cmd+0xa>
  aa:	61 30       	cpi	r22, 0x01	; 1
  ac:	19 f0       	breq	.+6      	; 0xb4 <lcd_cmd+0xe>
  ae:	03 c0       	rjmp	.+6      	; 0xb6 <lcd_cmd+0x10>
    case LCD_CMD:
        rst_bit(LCD_RS);
  b0:	59 98       	cbi	0x0b, 1	; 11
        break;
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <lcd_cmd+0x10>
    case LCD_CHAR:
        set_bit(LCD_RS);
  b4:	59 9a       	sbi	0x0b, 1	; 11

    /*send first nibble (high half) of data*/
#if USE_LOWER_NIBLE == 1
    LCD_PORT = (LCD_PORT & 0xf0) | ((c & 0xf0) >> 4);
#else
    LCD_PORT = (LCD_PORT & 0x0f) | (c & 0xf0);
  b6:	9b b1       	in	r25, 0x0b	; 11
  b8:	9f 70       	andi	r25, 0x0F	; 15
  ba:	28 2f       	mov	r18, r24
  bc:	20 7f       	andi	r18, 0xF0	; 240
  be:	92 2b       	or	r25, r18
  c0:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	45 e0       	ldi	r20, 0x05	; 5
  c4:	4a 95       	dec	r20
  c6:	f1 f7       	brne	.-4      	; 0xc4 <lcd_cmd+0x1e>
  c8:	00 00       	nop
#endif
    enable_pulse();
  ca:	58 9a       	sbi	0x0b, 0	; 11
  cc:	95 e0       	ldi	r25, 0x05	; 5
  ce:	9a 95       	dec	r25
  d0:	f1 f7       	brne	.-4      	; 0xce <lcd_cmd+0x28>
  d2:	00 00       	nop
  d4:	58 98       	cbi	0x0b, 0	; 11
  d6:	40 ef       	ldi	r20, 0xF0	; 240
  d8:	4a 95       	dec	r20
  da:	f1 f7       	brne	.-4      	; 0xd8 <lcd_cmd+0x32>

    /*send second (lower) nibble of data*/
#if USE_LOWER_NIBLE == 1
    LCD_PORT = (LCD_PORT & 0xf0) | (c & 0x0f);
#else
    LCD_PORT = (LCD_PORT & 0x0f) | ((c & 0x0f) << 4);
  dc:	2b b1       	in	r18, 0x0b	; 11
  de:	92 2f       	mov	r25, r18
  e0:	9f 70       	andi	r25, 0x0F	; 15
  e2:	40 e1       	ldi	r20, 0x10	; 16
  e4:	84 9f       	mul	r24, r20
  e6:	90 01       	movw	r18, r0
  e8:	11 24       	eor	r1, r1
  ea:	29 2b       	or	r18, r25
  ec:	2b b9       	out	0x0b, r18	; 11
  ee:	95 e0       	ldi	r25, 0x05	; 5
  f0:	9a 95       	dec	r25
  f2:	f1 f7       	brne	.-4      	; 0xf0 <lcd_cmd+0x4a>
  f4:	00 00       	nop
#endif
    enable_pulse();
  f6:	58 9a       	sbi	0x0b, 0	; 11
  f8:	45 e0       	ldi	r20, 0x05	; 5
  fa:	4a 95       	dec	r20
  fc:	f1 f7       	brne	.-4      	; 0xfa <lcd_cmd+0x54>
  fe:	00 00       	nop
 100:	58 98       	cbi	0x0b, 0	; 11
 102:	90 ef       	ldi	r25, 0xF0	; 240
 104:	9a 95       	dec	r25
 106:	f1 f7       	brne	.-4      	; 0x104 <lcd_cmd+0x5e>

    //wait if cmd is clear or return home (exec time ~1.52ms)
    if(c<4 && cmd == LCD_CMD)
 108:	84 30       	cpi	r24, 0x04	; 4
 10a:	40 f4       	brcc	.+16     	; 0x11c <lcd_cmd+0x76>
 10c:	61 11       	cpse	r22, r1
 10e:	06 c0       	rjmp	.+12     	; 0x11c <lcd_cmd+0x76>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 110:	8f e3       	ldi	r24, 0x3F	; 63
 112:	9f e1       	ldi	r25, 0x1F	; 31
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <lcd_cmd+0x6e>
 118:	00 c0       	rjmp	.+0      	; 0x11a <lcd_cmd+0x74>
 11a:	00 00       	nop
    {
        _delay_ms(2);
    }
    //set_bit(LCD_RS);
    LCD_PORT &= ~(LCD_DATA_MASK);
 11c:	8b b1       	in	r24, 0x0b	; 11
 11e:	8f 70       	andi	r24, 0x0F	; 15
 120:	8b b9       	out	0x0b, r24	; 11
 122:	08 95       	ret

00000124 <lcd_4bit_init>:
void lcd_4bit_init(void)
{

    /* reset lcd port bits and set RS low */
    //LCD_PORT &= 0x0f;
    rst_bit(LCD_RS);
 124:	59 98       	cbi	0x0b, 1	; 11
    rst_bit(LCD_EN);
 126:	58 98       	cbi	0x0b, 0	; 11
 128:	2f ef       	ldi	r18, 0xFF	; 255
 12a:	89 ef       	ldi	r24, 0xF9	; 249
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	21 50       	subi	r18, 0x01	; 1
 130:	80 40       	sbci	r24, 0x00	; 0
 132:	90 40       	sbci	r25, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <lcd_4bit_init+0xa>
 136:	00 c0       	rjmp	.+0      	; 0x138 <lcd_4bit_init+0x14>
 138:	00 00       	nop
       @see https://www.sparkfun.com/datasheets/LCD/HD44780.pdf
    */
#if USE_LOWER_NIBLE == 1
    LCD_PORT = (LCD_PORT & 0xf0) | 0x03;
#else
    LCD_PORT = (LCD_PORT & 0x0f) | 0x30;
 13a:	8b b1       	in	r24, 0x0b	; 11
 13c:	8f 70       	andi	r24, 0x0F	; 15
 13e:	80 63       	ori	r24, 0x30	; 48
 140:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 142:	25 e0       	ldi	r18, 0x05	; 5
 144:	2a 95       	dec	r18
 146:	f1 f7       	brne	.-4      	; 0x144 <lcd_4bit_init+0x20>
 148:	00 00       	nop
#endif
    enable_pulse();
 14a:	58 9a       	sbi	0x0b, 0	; 11
 14c:	85 e0       	ldi	r24, 0x05	; 5
 14e:	8a 95       	dec	r24
 150:	f1 f7       	brne	.-4      	; 0x14e <lcd_4bit_init+0x2a>
 152:	00 00       	nop
 154:	58 98       	cbi	0x0b, 0	; 11
 156:	90 ef       	ldi	r25, 0xF0	; 240
 158:	9a 95       	dec	r25
 15a:	f1 f7       	brne	.-4      	; 0x158 <lcd_4bit_init+0x34>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15c:	8f e1       	ldi	r24, 0x1F	; 31
 15e:	9e e4       	ldi	r25, 0x4E	; 78
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <lcd_4bit_init+0x3c>
 164:	00 c0       	rjmp	.+0      	; 0x166 <lcd_4bit_init+0x42>
 166:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 168:	95 e0       	ldi	r25, 0x05	; 5
 16a:	9a 95       	dec	r25
 16c:	f1 f7       	brne	.-4      	; 0x16a <lcd_4bit_init+0x46>
 16e:	00 00       	nop
    _delay_ms(5);
    enable_pulse();
 170:	58 9a       	sbi	0x0b, 0	; 11
 172:	25 e0       	ldi	r18, 0x05	; 5
 174:	2a 95       	dec	r18
 176:	f1 f7       	brne	.-4      	; 0x174 <lcd_4bit_init+0x50>
 178:	00 00       	nop
 17a:	58 98       	cbi	0x0b, 0	; 11
 17c:	80 ef       	ldi	r24, 0xF0	; 240
 17e:	8a 95       	dec	r24
 180:	f1 f7       	brne	.-4      	; 0x17e <lcd_4bit_init+0x5a>
 182:	8f e1       	ldi	r24, 0x1F	; 31
 184:	93 e0       	ldi	r25, 0x03	; 3
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <lcd_4bit_init+0x62>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <lcd_4bit_init+0x68>
 18c:	00 00       	nop
 18e:	95 e0       	ldi	r25, 0x05	; 5
 190:	9a 95       	dec	r25
 192:	f1 f7       	brne	.-4      	; 0x190 <lcd_4bit_init+0x6c>
 194:	00 00       	nop
    _delay_us(200);
    enable_pulse();
 196:	58 9a       	sbi	0x0b, 0	; 11
 198:	25 e0       	ldi	r18, 0x05	; 5
 19a:	2a 95       	dec	r18
 19c:	f1 f7       	brne	.-4      	; 0x19a <lcd_4bit_init+0x76>
 19e:	00 00       	nop
 1a0:	58 98       	cbi	0x0b, 0	; 11
 1a2:	80 ef       	ldi	r24, 0xF0	; 240
 1a4:	8a 95       	dec	r24
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <lcd_4bit_init+0x80>

#if USE_LOWER_NIBLE
    LCD_PORT = (LCD_PORT & 0xf0) | 0x02;
#else
    LCD_PORT = (LCD_PORT & 0x0f) | 0x20;
 1a8:	8b b1       	in	r24, 0x0b	; 11
 1aa:	8f 70       	andi	r24, 0x0F	; 15
 1ac:	80 62       	ori	r24, 0x20	; 32
 1ae:	8b b9       	out	0x0b, r24	; 11
 1b0:	95 e0       	ldi	r25, 0x05	; 5
 1b2:	9a 95       	dec	r25
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <lcd_4bit_init+0x8e>
 1b6:	00 00       	nop
#endif
    enable_pulse();
 1b8:	58 9a       	sbi	0x0b, 0	; 11
 1ba:	25 e0       	ldi	r18, 0x05	; 5
 1bc:	2a 95       	dec	r18
 1be:	f1 f7       	brne	.-4      	; 0x1bc <lcd_4bit_init+0x98>
 1c0:	00 00       	nop
 1c2:	58 98       	cbi	0x0b, 0	; 11
 1c4:	80 ef       	ldi	r24, 0xF0	; 240
 1c6:	8a 95       	dec	r24
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <lcd_4bit_init+0xa2>


    /* set interface 4 bits, 2 lines, 8 dots font  */
    lcd_cmd(0b00101000,LCD_CMD);
 1ca:	60 e0       	ldi	r22, 0x00	; 0
 1cc:	88 e2       	ldi	r24, 0x28	; 40
 1ce:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
    lcd_cmd(0x08,LCD_CMD); // turn off display
 1d2:	60 e0       	ldi	r22, 0x00	; 0
 1d4:	88 e0       	ldi	r24, 0x08	; 8
 1d6:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
    lcd_cmd(0x01,LCD_CMD); // clear display
 1da:	60 e0       	ldi	r22, 0x00	; 0
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
    lcd_cmd(0x0c,LCD_CMD); // turn displ. on, visible cursor, no blink
 1e2:	60 e0       	ldi	r22, 0x00	; 0
 1e4:	8c e0       	ldi	r24, 0x0C	; 12
 1e6:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
    lcd_cmd(0x80,LCD_CMD); //set CGRAM adress to 0 (1st position)
 1ea:	60 e0       	ldi	r22, 0x00	; 0
 1ec:	80 e8       	ldi	r24, 0x80	; 128
 1ee:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
 1f2:	08 95       	ret

000001f4 <lcd_write>:

/**
   write a string to the display.
 */
void lcd_write(const char * str)
{
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	ec 01       	movw	r28, r24
    for (;*str;++str)
 1fa:	88 81       	ld	r24, Y
 1fc:	88 23       	and	r24, r24
 1fe:	39 f0       	breq	.+14     	; 0x20e <lcd_write+0x1a>
 200:	21 96       	adiw	r28, 0x01	; 1
    {
        lcd_cmd(*str,LCD_CHAR);
 202:	61 e0       	ldi	r22, 0x01	; 1
 204:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
/**
   write a string to the display.
 */
void lcd_write(const char * str)
{
    for (;*str;++str)
 208:	89 91       	ld	r24, Y+
 20a:	81 11       	cpse	r24, r1
 20c:	fa cf       	rjmp	.-12     	; 0x202 <lcd_write+0xe>
    {
        lcd_cmd(*str,LCD_CHAR);
    }
}
 20e:	df 91       	pop	r29
 210:	cf 91       	pop	r28
 212:	08 95       	ret

00000214 <main>:
uint8_t lot_quantity = LOT_QUANTITY_DEFAULT;    //Caixas prontas no lote atual
uint8_t lot_number = LOT_NUMBER_DEFAULT;        //Número do lote (quantos lotes já foram feitos)

/*--------- Main ---------*/
int main(void)
{
 214:	cf 93       	push	r28
 216:	df 93       	push	r29
 218:	cd b7       	in	r28, 0x3d	; 61
 21a:	de b7       	in	r29, 0x3e	; 62
 21c:	61 97       	sbiw	r28, 0x11	; 17
 21e:	0f b6       	in	r0, 0x3f	; 63
 220:	f8 94       	cli
 222:	de bf       	out	0x3e, r29	; 62
 224:	0f be       	out	0x3f, r0	; 63
 226:	cd bf       	out	0x3d, r28	; 61
    //configure interrupts
    EICRA |= 0b00001010; //set INT0 and INT1 as falling edge
 228:	e9 e6       	ldi	r30, 0x69	; 105
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	80 81       	ld	r24, Z
 22e:	8a 60       	ori	r24, 0x0A	; 10
 230:	80 83       	st	Z, r24

    EIMSK |= 0x03; //enable INT 1 and 0
 232:	8d b3       	in	r24, 0x1d	; 29
 234:	83 60       	ori	r24, 0x03	; 3
 236:	8d bb       	out	0x1d, r24	; 29

    //set up pin directions
    DDRB = 0x00;
 238:	14 b8       	out	0x04, r1	; 4
    DDRC = 0b00111000;
 23a:	88 e3       	ldi	r24, 0x38	; 56
 23c:	87 b9       	out	0x07, r24	; 7
    DDRD = 0b11110011;
 23e:	83 ef       	ldi	r24, 0xF3	; 243
 240:	8a b9       	out	0x0a, r24	; 10

    sei();
 242:	78 94       	sei

    lcd_4bit_init();
 244:	0e 94 92 00 	call	0x124	; 0x124 <lcd_4bit_init>

    lcd_write("Booting...     ");
 248:	88 e0       	ldi	r24, 0x08	; 8
 24a:	91 e0       	ldi	r25, 0x01	; 1
 24c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 250:	2f ef       	ldi	r18, 0xFF	; 255
 252:	33 ed       	ldi	r19, 0xD3	; 211
 254:	80 e3       	ldi	r24, 0x30	; 48
 256:	21 50       	subi	r18, 0x01	; 1
 258:	30 40       	sbci	r19, 0x00	; 0
 25a:	80 40       	sbci	r24, 0x00	; 0
 25c:	e1 f7       	brne	.-8      	; 0x256 <main+0x42>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <main+0x4c>
 260:	00 00       	nop
        case READY:
			lcd_move_cursor(0,0);
			lcd_write("Ready press STR");
			if (get_bit(STRT_STOP_BTN)==0)
			{
				major_state=RUN;
 262:	68 94       	set
 264:	bb 24       	eor	r11, r11
 266:	b2 f8       	bld	r11, 2
            }
        case CONFIG:
			lcd_move_cursor(0,0);
            lcd_write("Conf. param.");
            //TODO: ask for lot size, fill_delay
            major_state=READY;
 268:	0f 2e       	mov	r0, r31
 26a:	f3 e0       	ldi	r31, 0x03	; 3
 26c:	cf 2e       	mov	r12, r31
 26e:	f0 2d       	mov	r31, r0
            break;
        case RUN:
			;
			//Segunda linha do LCD, status do lote:
			char buff[17];
			snprintf(buff,17, "Lot %02i, box %02i ",lot_number,lot_quantity+1);
 270:	0f 2e       	mov	r0, r31
 272:	f3 e6       	ldi	r31, 0x63	; 99
 274:	8f 2e       	mov	r8, r31
 276:	f1 e0       	ldi	r31, 0x01	; 1
 278:	9f 2e       	mov	r9, r31
 27a:	f0 2d       	mov	r31, r0
 27c:	0f 2e       	mov	r0, r31
 27e:	f1 e1       	ldi	r31, 0x11	; 17
 280:	af 2e       	mov	r10, r31
 282:	f0 2d       	mov	r31, r0
 284:	9e 01       	movw	r18, r28
 286:	2f 5f       	subi	r18, 0xFF	; 255
 288:	3f 4f       	sbci	r19, 0xFF	; 255
 28a:	79 01       	movw	r14, r18
                lcd_move_cursor(0,0);
                lcd_write("Box detected   ");
                set_bit(CYL_A);
                set_bit(CYL_B);
                if(get_bit(A_1)==0 && get_bit(B_1)==0) {
                    run_state = LOADING;
 28c:	68 94       	set
 28e:	dd 24       	eor	r13, r13
 290:	d1 f8       	bld	r13, 1
    lcd_4bit_init();

    lcd_write("Booting...     ");
    _delay_ms(1000);
    while(1) {
        switch(major_state) {
 292:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <major_state>
 296:	82 30       	cpi	r24, 0x02	; 2
 298:	09 f4       	brne	.+2      	; 0x29c <main+0x88>
 29a:	d0 c0       	rjmp	.+416    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 29c:	28 f4       	brcc	.+10     	; 0x2a8 <main+0x94>
 29e:	88 23       	and	r24, r24
 2a0:	61 f0       	breq	.+24     	; 0x2ba <main+0xa6>
 2a2:	81 30       	cpi	r24, 0x01	; 1
 2a4:	09 f1       	breq	.+66     	; 0x2e8 <main+0xd4>
 2a6:	a6 c1       	rjmp	.+844    	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
 2a8:	84 30       	cpi	r24, 0x04	; 4
 2aa:	09 f4       	brne	.+2      	; 0x2ae <main+0x9a>
 2ac:	de c0       	rjmp	.+444    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 2ae:	08 f4       	brcc	.+2      	; 0x2b2 <main+0x9e>
 2b0:	cf c0       	rjmp	.+414    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 2b2:	85 30       	cpi	r24, 0x05	; 5
 2b4:	09 f4       	brne	.+2      	; 0x2b8 <main+0xa4>
 2b6:	95 c1       	rjmp	.+810    	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
 2b8:	9d c1       	rjmp	.+826    	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
        case START:
            //major_state = READY; //TODO: mudar depois que resolver o PWD
            run_state = WAITING;
 2ba:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <run_state>
            rst_bit(CYL_A);
 2be:	43 98       	cbi	0x08, 3	; 8
            rst_bit(CYL_B);
 2c0:	44 98       	cbi	0x08, 4	; 8
            set_bit(CYL_C);
 2c2:	45 9a       	sbi	0x08, 5	; 8
void lcd_4bit_init(void);
void lcd_cmd(unsigned char c, cmdType_t type);

inline void lcd_move_cursor(uint8_t c, uint8_t l)
{
    lcd_cmd(0x80 + (c < 0x0f ? c : 0x0f ) + (l > 0 ? 0x40 : 0), LCD_CMD);
 2c4:	60 e0       	ldi	r22, 0x00	; 0
 2c6:	80 e8       	ldi	r24, 0x80	; 128
 2c8:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
			lcd_move_cursor(0,0);
			lcd_write("Wait start pos.");
 2cc:	88 e1       	ldi	r24, 0x18	; 24
 2ce:	91 e0       	ldi	r25, 0x01	; 1
 2d0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
            if(!(get_bit(A_0) || get_bit(B_0) || get_bit(C_1))) {
 2d4:	18 99       	sbic	0x03, 0	; 3
 2d6:	dd cf       	rjmp	.-70     	; 0x292 <main+0x7e>
 2d8:	1a 99       	sbic	0x03, 2	; 3
 2da:	db cf       	rjmp	.-74     	; 0x292 <main+0x7e>
 2dc:	1d 99       	sbic	0x03, 5	; 3
 2de:	d9 cf       	rjmp	.-78     	; 0x292 <main+0x7e>
                major_state = PWD;
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <major_state>
 2e6:	d5 cf       	rjmp	.-86     	; 0x292 <main+0x7e>
            }
            break;
        case PWD:
            lcd_clear();
 2e8:	60 e0       	ldi	r22, 0x00	; 0
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
            
            //draw * equivalent to the input password len
            uint8_t curr_opt = 0;
            uint8_t pwd_pos = 0;
            memcpy(pwd_buff, "0   \0", 5);
 2f0:	85 e0       	ldi	r24, 0x05	; 5
 2f2:	e2 e0       	ldi	r30, 0x02	; 2
 2f4:	f1 e0       	ldi	r31, 0x01	; 1
 2f6:	af e1       	ldi	r26, 0x1F	; 31
 2f8:	b2 e0       	ldi	r27, 0x02	; 2
 2fa:	01 90       	ld	r0, Z+
 2fc:	0d 92       	st	X+, r0
 2fe:	8a 95       	dec	r24
 300:	e1 f7       	brne	.-8      	; 0x2fa <main+0xe6>
        case PWD:
            lcd_clear();
            
            //draw * equivalent to the input password len
            uint8_t curr_opt = 0;
            uint8_t pwd_pos = 0;
 302:	00 e0       	ldi	r16, 0x00	; 0
            break;
        case PWD:
            lcd_clear();
            
            //draw * equivalent to the input password len
            uint8_t curr_opt = 0;
 304:	10 e0       	ldi	r17, 0x00	; 0
 306:	60 e0       	ldi	r22, 0x00	; 0
 308:	80 e8       	ldi	r24, 0x80	; 128
 30a:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
            uint8_t pwd_pos = 0;
            memcpy(pwd_buff, "0   \0", 5);
            while(1)
            {
				lcd_move_cursor(0,0);
				lcd_write(pwd_txt);
 30e:	84 e1       	ldi	r24, 0x14	; 20
 310:	92 e0       	ldi	r25, 0x02	; 2
 312:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
 316:	60 e0       	ldi	r22, 0x00	; 0
 318:	80 ec       	ldi	r24, 0xC0	; 192
 31a:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
                lcd_move_cursor(0, 1);
                pwd_buff[pwd_pos] = '0' + curr_opt;
 31e:	e0 2f       	mov	r30, r16
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	e1 5e       	subi	r30, 0xE1	; 225
 324:	fd 4f       	sbci	r31, 0xFD	; 253
 326:	80 e3       	ldi	r24, 0x30	; 48
 328:	81 0f       	add	r24, r17
 32a:	80 83       	st	Z, r24
                lcd_write(pwd_buff);
 32c:	8f e1       	ldi	r24, 0x1F	; 31
 32e:	92 e0       	ldi	r25, 0x02	; 2
 330:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
                while(get_bit(UP_BTN) && get_bit(DWN_BTN) && get_bit(ENTR_BTN)) {
 334:	1f 9b       	sbis	0x03, 7	; 3
 336:	04 c0       	rjmp	.+8      	; 0x340 <main+0x12c>
 338:	30 9b       	sbis	0x06, 0	; 6
 33a:	02 c0       	rjmp	.+4      	; 0x340 <main+0x12c>
 33c:	31 99       	sbic	0x06, 1	; 6
 33e:	fa cf       	rjmp	.-12     	; 0x334 <main+0x120>
                    //draw_idle();
                }

                if(!get_bit(UP_BTN)) {
 340:	1f 99       	sbic	0x03, 7	; 3
 342:	11 c0       	rjmp	.+34     	; 0x366 <main+0x152>
                    curr_opt = curr_opt >= 9 ? 0 : curr_opt + 1;
 344:	19 30       	cpi	r17, 0x09	; 9
 346:	10 f4       	brcc	.+4      	; 0x34c <main+0x138>
 348:	1f 5f       	subi	r17, 0xFF	; 255
 34a:	01 c0       	rjmp	.+2      	; 0x34e <main+0x13a>
 34c:	10 e0       	ldi	r17, 0x00	; 0
 34e:	3f ef       	ldi	r19, 0xFF	; 255
 350:	80 e7       	ldi	r24, 0x70	; 112
 352:	92 e0       	ldi	r25, 0x02	; 2
 354:	31 50       	subi	r19, 0x01	; 1
 356:	80 40       	sbci	r24, 0x00	; 0
 358:	90 40       	sbci	r25, 0x00	; 0
 35a:	e1 f7       	brne	.-8      	; 0x354 <main+0x140>
 35c:	00 c0       	rjmp	.+0      	; 0x35e <main+0x14a>
 35e:	00 00       	nop
                    _delay_ms(50);
                    while(!get_bit(UP_BTN)); //wait button release
 360:	1f 9b       	sbis	0x03, 7	; 3
 362:	fe cf       	rjmp	.-4      	; 0x360 <main+0x14c>
 364:	d0 cf       	rjmp	.-96     	; 0x306 <main+0xf2>
                } else if (!get_bit(DWN_BTN)) {
 366:	30 99       	sbic	0x06, 0	; 6
 368:	11 c0       	rjmp	.+34     	; 0x38c <main+0x178>
                    curr_opt = curr_opt == 0 ? 9 : curr_opt - 1;
 36a:	11 23       	and	r17, r17
 36c:	11 f0       	breq	.+4      	; 0x372 <main+0x15e>
 36e:	11 50       	subi	r17, 0x01	; 1
 370:	01 c0       	rjmp	.+2      	; 0x374 <main+0x160>
 372:	19 e0       	ldi	r17, 0x09	; 9
 374:	2f ef       	ldi	r18, 0xFF	; 255
 376:	30 e7       	ldi	r19, 0x70	; 112
 378:	82 e0       	ldi	r24, 0x02	; 2
 37a:	21 50       	subi	r18, 0x01	; 1
 37c:	30 40       	sbci	r19, 0x00	; 0
 37e:	80 40       	sbci	r24, 0x00	; 0
 380:	e1 f7       	brne	.-8      	; 0x37a <main+0x166>
 382:	00 c0       	rjmp	.+0      	; 0x384 <main+0x170>
 384:	00 00       	nop
                    _delay_ms(50);
                    while(!get_bit(DWN_BTN)); //wait button release
 386:	30 9b       	sbis	0x06, 0	; 6
 388:	fe cf       	rjmp	.-4      	; 0x386 <main+0x172>
 38a:	bd cf       	rjmp	.-134    	; 0x306 <main+0xf2>
                } else if (!get_bit(ENTR_BTN)) {
 38c:	31 99       	sbic	0x06, 1	; 6
 38e:	bb cf       	rjmp	.-138    	; 0x306 <main+0xf2>
                    if(pwd_pos == PWD_LEN-1)
 390:	03 30       	cpi	r16, 0x03	; 3
 392:	09 f0       	breq	.+2      	; 0x396 <main+0x182>
 394:	46 c0       	rjmp	.+140    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
                    {
                        //check password match
                        if(strncmp(PWD_DEFAULT, pwd_buff, 4) == 0) {
 396:	44 e0       	ldi	r20, 0x04	; 4
 398:	50 e0       	ldi	r21, 0x00	; 0
 39a:	6f e1       	ldi	r22, 0x1F	; 31
 39c:	72 e0       	ldi	r23, 0x02	; 2
 39e:	88 e2       	ldi	r24, 0x28	; 40
 3a0:	91 e0       	ldi	r25, 0x01	; 1
 3a2:	0e 94 3b 03 	call	0x676	; 0x676 <strncmp>
 3a6:	89 2b       	or	r24, r25
 3a8:	39 f4       	brne	.+14     	; 0x3b8 <main+0x1a4>
                            major_state = CONFIG;
 3aa:	d0 92 25 02 	sts	0x0225, r13	; 0x800225 <major_state>
							lcd_clear();
 3ae:	60 e0       	ldi	r22, 0x00	; 0
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
                            break;
 3b6:	42 c0       	rjmp	.+132    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 3b8:	60 e0       	ldi	r22, 0x00	; 0
 3ba:	80 ec       	ldi	r24, 0xC0	; 192
 3bc:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
                        }
                        //wrong password
                        else {
                            lcd_move_cursor(0, 1);
                            lcd_write("Wrong passwd");
 3c0:	8d e2       	ldi	r24, 0x2D	; 45
 3c2:	91 e0       	ldi	r25, 0x01	; 1
 3c4:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
 3c8:	9f ef       	ldi	r25, 0xFF	; 255
 3ca:	23 ed       	ldi	r18, 0xD3	; 211
 3cc:	30 e3       	ldi	r19, 0x30	; 48
 3ce:	91 50       	subi	r25, 0x01	; 1
 3d0:	20 40       	sbci	r18, 0x00	; 0
 3d2:	30 40       	sbci	r19, 0x00	; 0
 3d4:	e1 f7       	brne	.-8      	; 0x3ce <main+0x1ba>
 3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <main+0x1c4>
 3d8:	00 00       	nop
                            _delay_ms(1000);
							lcd_clear();
 3da:	60 e0       	ldi	r22, 0x00	; 0
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
							lcd_write("dumb mtfckr");
 3e2:	8a e3       	ldi	r24, 0x3A	; 58
 3e4:	91 e0       	ldi	r25, 0x01	; 1
 3e6:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
 3ea:	8f ef       	ldi	r24, 0xFF	; 255
 3ec:	91 ee       	ldi	r25, 0xE1	; 225
 3ee:	24 e0       	ldi	r18, 0x04	; 4
 3f0:	81 50       	subi	r24, 0x01	; 1
 3f2:	90 40       	sbci	r25, 0x00	; 0
 3f4:	20 40       	sbci	r18, 0x00	; 0
 3f6:	e1 f7       	brne	.-8      	; 0x3f0 <main+0x1dc>
 3f8:	00 c0       	rjmp	.+0      	; 0x3fa <main+0x1e6>
 3fa:	00 00       	nop
							_delay_ms(100);
							lcd_clear();
 3fc:	60 e0       	ldi	r22, 0x00	; 0
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
 404:	60 e0       	ldi	r22, 0x00	; 0
 406:	80 ec       	ldi	r24, 0xC0	; 192
 408:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
                            lcd_move_cursor(0, 1);
                            memcpy(pwd_buff, "0   \0", 5);
 40c:	85 e0       	ldi	r24, 0x05	; 5
 40e:	e2 e0       	ldi	r30, 0x02	; 2
 410:	f1 e0       	ldi	r31, 0x01	; 1
 412:	af e1       	ldi	r26, 0x1F	; 31
 414:	b2 e0       	ldi	r27, 0x02	; 2
 416:	01 90       	ld	r0, Z+
 418:	0d 92       	st	X+, r0
 41a:	8a 95       	dec	r24
 41c:	e1 f7       	brne	.-8      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
                            pwd_pos = 0;
 41e:	00 e0       	ldi	r16, 0x00	; 0
 420:	01 c0       	rjmp	.+2      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
                        }
                    }
                    else {
                        //pwd_buff[pwd_pos] = '0' + curr_opt;
                        ++pwd_pos;
 422:	0f 5f       	subi	r16, 0xFF	; 255
                    }
                    while(!get_bit(ENTR_BTN)); //wait for button release
 424:	31 9b       	sbis	0x06, 1	; 6
 426:	fe cf       	rjmp	.-4      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 428:	3f ef       	ldi	r19, 0xFF	; 255
 42a:	80 e7       	ldi	r24, 0x70	; 112
 42c:	92 e0       	ldi	r25, 0x02	; 2
 42e:	31 50       	subi	r19, 0x01	; 1
 430:	80 40       	sbci	r24, 0x00	; 0
 432:	90 40       	sbci	r25, 0x00	; 0
 434:	e1 f7       	brne	.-8      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 436:	00 c0       	rjmp	.+0      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 438:	00 00       	nop
 43a:	65 cf       	rjmp	.-310    	; 0x306 <main+0xf2>
 43c:	60 e0       	ldi	r22, 0x00	; 0
 43e:	80 e8       	ldi	r24, 0x80	; 128
 440:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
                    _delay_ms(50);
                }
            }
        case CONFIG:
			lcd_move_cursor(0,0);
            lcd_write("Conf. param.");
 444:	86 e4       	ldi	r24, 0x46	; 70
 446:	91 e0       	ldi	r25, 0x01	; 1
 448:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
            //TODO: ask for lot size, fill_delay
            major_state=READY;
 44c:	c0 92 25 02 	sts	0x0225, r12	; 0x800225 <major_state>
 450:	60 e0       	ldi	r22, 0x00	; 0
 452:	80 e8       	ldi	r24, 0x80	; 128
 454:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
        case READY:
			lcd_move_cursor(0,0);
			lcd_write("Ready press STR");
 458:	83 e5       	ldi	r24, 0x53	; 83
 45a:	91 e0       	ldi	r25, 0x01	; 1
 45c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
			if (get_bit(STRT_STOP_BTN)==0)
 460:	32 99       	sbic	0x06, 2	; 6
 462:	17 cf       	rjmp	.-466    	; 0x292 <main+0x7e>
			{
				major_state=RUN;
 464:	b0 92 25 02 	sts	0x0225, r11	; 0x800225 <major_state>
 468:	14 cf       	rjmp	.-472    	; 0x292 <main+0x7e>
            break;
        case RUN:
			;
			//Segunda linha do LCD, status do lote:
			char buff[17];
			snprintf(buff,17, "Lot %02i, box %02i ",lot_number,lot_quantity+1);
 46a:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <__data_end>
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	01 96       	adiw	r24, 0x01	; 1
 472:	9f 93       	push	r25
 474:	8f 93       	push	r24
 476:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 47a:	1f 92       	push	r1
 47c:	8f 93       	push	r24
 47e:	9f 92       	push	r9
 480:	8f 92       	push	r8
 482:	1f 92       	push	r1
 484:	af 92       	push	r10
 486:	ff 92       	push	r15
 488:	ef 92       	push	r14
 48a:	0e 94 49 03 	call	0x692	; 0x692 <snprintf>
 48e:	60 e0       	ldi	r22, 0x00	; 0
 490:	80 ec       	ldi	r24, 0xC0	; 192
 492:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
			lcd_move_cursor(0,1);
			lcd_write(buff);
 496:	c7 01       	movw	r24, r14
 498:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
            //TODO: prever casos impossíveis / erros, trocar lcd_clears por comando de mover cursor pro inicio do lcd
            switch(run_state) {
 49c:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <run_state>
 4a0:	0f b6       	in	r0, 0x3f	; 63
 4a2:	f8 94       	cli
 4a4:	de bf       	out	0x3e, r29	; 62
 4a6:	0f be       	out	0x3f, r0	; 63
 4a8:	cd bf       	out	0x3d, r28	; 61
 4aa:	82 30       	cpi	r24, 0x02	; 2
 4ac:	51 f1       	breq	.+84     	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
 4ae:	28 f4       	brcc	.+10     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 4b0:	88 23       	and	r24, r24
 4b2:	41 f0       	breq	.+16     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
 4b4:	81 30       	cpi	r24, 0x01	; 1
 4b6:	a1 f0       	breq	.+40     	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
 4b8:	ec ce       	rjmp	.-552    	; 0x292 <main+0x7e>
 4ba:	83 30       	cpi	r24, 0x03	; 3
 4bc:	81 f1       	breq	.+96     	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
 4be:	84 30       	cpi	r24, 0x04	; 4
 4c0:	e1 f1       	breq	.+120    	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
 4c2:	e7 ce       	rjmp	.-562    	; 0x292 <main+0x7e>
 4c4:	60 e0       	ldi	r22, 0x00	; 0
 4c6:	80 e8       	ldi	r24, 0x80	; 128
 4c8:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
            case WAITING:
                lcd_move_cursor(0,0);
                lcd_write("Waiting box    ");
 4cc:	87 e7       	ldi	r24, 0x77	; 119
 4ce:	91 e0       	ldi	r25, 0x01	; 1
 4d0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
                if(get_bit(SNS_CX)==0) {
 4d4:	1e 99       	sbic	0x03, 6	; 3
 4d6:	dd ce       	rjmp	.-582    	; 0x292 <main+0x7e>
                    run_state = DETECTED;
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <run_state>
 4de:	d9 ce       	rjmp	.-590    	; 0x292 <main+0x7e>
 4e0:	60 e0       	ldi	r22, 0x00	; 0
 4e2:	80 e8       	ldi	r24, 0x80	; 128
 4e4:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
                }
                break;
            case DETECTED:
                lcd_move_cursor(0,0);
                lcd_write("Box detected   ");
 4e8:	87 e8       	ldi	r24, 0x87	; 135
 4ea:	91 e0       	ldi	r25, 0x01	; 1
 4ec:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
                set_bit(CYL_A);
 4f0:	43 9a       	sbi	0x08, 3	; 8
                set_bit(CYL_B);
 4f2:	44 9a       	sbi	0x08, 4	; 8
                if(get_bit(A_1)==0 && get_bit(B_1)==0) {
 4f4:	19 99       	sbic	0x03, 1	; 3
 4f6:	cd ce       	rjmp	.-614    	; 0x292 <main+0x7e>
 4f8:	1b 99       	sbic	0x03, 3	; 3
 4fa:	cb ce       	rjmp	.-618    	; 0x292 <main+0x7e>
                    run_state = LOADING;
 4fc:	d0 92 24 02 	sts	0x0224, r13	; 0x800224 <run_state>
 500:	c8 ce       	rjmp	.-624    	; 0x292 <main+0x7e>
 502:	60 e0       	ldi	r22, 0x00	; 0
 504:	80 e8       	ldi	r24, 0x80	; 128
 506:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
                }
                break;
            case LOADING:
                lcd_move_cursor(0,0);
                lcd_write("Loading box    ");
 50a:	87 e9       	ldi	r24, 0x97	; 151
 50c:	91 e0       	ldi	r25, 0x01	; 1
 50e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
                rst_bit(CYL_C);
 512:	45 98       	cbi	0x08, 5	; 8
                //_delay_ms(fill_delay_ms); TODO
                if(get_bit(C_0)==0) {
 514:	1c 99       	sbic	0x03, 4	; 3
 516:	bd ce       	rjmp	.-646    	; 0x292 <main+0x7e>
                    run_state = CLOSING;
 518:	c0 92 24 02 	sts	0x0224, r12	; 0x800224 <run_state>
 51c:	ba ce       	rjmp	.-652    	; 0x292 <main+0x7e>
 51e:	60 e0       	ldi	r22, 0x00	; 0
 520:	80 e8       	ldi	r24, 0x80	; 128
 522:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
                }
                break;
            case CLOSING:
                lcd_move_cursor(0,0);
                lcd_write("Closing disp.  ");
 526:	87 ea       	ldi	r24, 0xA7	; 167
 528:	91 e0       	ldi	r25, 0x01	; 1
 52a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
                set_bit(CYL_C);
 52e:	45 9a       	sbi	0x08, 5	; 8
                if(get_bit(C_1)==0) {
 530:	1d 99       	sbic	0x03, 5	; 3
 532:	af ce       	rjmp	.-674    	; 0x292 <main+0x7e>
                    run_state = RELEASING;
 534:	b0 92 24 02 	sts	0x0224, r11	; 0x800224 <run_state>
 538:	ac ce       	rjmp	.-680    	; 0x292 <main+0x7e>
 53a:	60 e0       	ldi	r22, 0x00	; 0
 53c:	80 e8       	ldi	r24, 0x80	; 128
 53e:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
                }
                break;
            case RELEASING:
                lcd_move_cursor(0,0);
                lcd_write("Releasing box  ");
 542:	87 eb       	ldi	r24, 0xB7	; 183
 544:	91 e0       	ldi	r25, 0x01	; 1
 546:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
                rst_bit(CYL_A);
 54a:	43 98       	cbi	0x08, 3	; 8
                rst_bit(CYL_B);
 54c:	44 98       	cbi	0x08, 4	; 8
                if(get_bit(A_0)==0 && get_bit(B_0)==0) {
 54e:	18 99       	sbic	0x03, 0	; 3
 550:	a0 ce       	rjmp	.-704    	; 0x292 <main+0x7e>
 552:	1a 99       	sbic	0x03, 2	; 3
 554:	9e ce       	rjmp	.-708    	; 0x292 <main+0x7e>
 556:	60 e0       	ldi	r22, 0x00	; 0
 558:	80 e8       	ldi	r24, 0x80	; 128
 55a:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
                    lcd_move_cursor(0,0);
                    lcd_write("Box finished   ");
 55e:	87 ec       	ldi	r24, 0xC7	; 199
 560:	91 e0       	ldi	r25, 0x01	; 1
 562:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
 566:	3f ef       	ldi	r19, 0xFF	; 255
 568:	87 ea       	ldi	r24, 0xA7	; 167
 56a:	91 e6       	ldi	r25, 0x61	; 97
 56c:	31 50       	subi	r19, 0x01	; 1
 56e:	80 40       	sbci	r24, 0x00	; 0
 570:	90 40       	sbci	r25, 0x00	; 0
 572:	e1 f7       	brne	.-8      	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
 574:	00 c0       	rjmp	.+0      	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
 576:	00 00       	nop
					_delay_ms(2000);
                    ++ lot_quantity; //Incrementa uma caixa no lote atual
 578:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <__data_end>
 57c:	8f 5f       	subi	r24, 0xFF	; 255
 57e:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <__data_end>
                    if (lot_quantity == lot_size) //Se o lote atuala atingiu o número de caixas desejado
 582:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <lot_size>
 586:	89 13       	cpse	r24, r25
 588:	29 c0       	rjmp	.+82     	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
                    {
                        ++ lot_number; //Incrementa número de lotes prontos
 58a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 58e:	8f 5f       	subi	r24, 0xFF	; 255
 590:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
                        lot_quantity = 0; //Reinicia contagem de caixas no lote
 594:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <__data_end>
 598:	60 e0       	ldi	r22, 0x00	; 0
 59a:	80 e8       	ldi	r24, 0x80	; 128
 59c:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
                        lcd_move_cursor(0,0);
                        lcd_write("Lot finished   ");
 5a0:	87 ed       	ldi	r24, 0xD7	; 215
 5a2:	91 e0       	ldi	r25, 0x01	; 1
 5a4:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
 5a8:	2f ef       	ldi	r18, 0xFF	; 255
 5aa:	33 ed       	ldi	r19, 0xD3	; 211
 5ac:	80 e3       	ldi	r24, 0x30	; 48
 5ae:	21 50       	subi	r18, 0x01	; 1
 5b0:	30 40       	sbci	r19, 0x00	; 0
 5b2:	80 40       	sbci	r24, 0x00	; 0
 5b4:	e1 f7       	brne	.-8      	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
 5b6:	00 c0       	rjmp	.+0      	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
 5b8:	00 00       	nop
 5ba:	60 e0       	ldi	r22, 0x00	; 0
 5bc:	80 e8       	ldi	r24, 0x80	; 128
 5be:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
                        _delay_ms(1000);
                        lcd_move_cursor(0,0);
                        lcd_write("Start next lot ");
 5c2:	87 ee       	ldi	r24, 0xE7	; 231
 5c4:	91 e0       	ldi	r25, 0x01	; 1
 5c6:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
 5ca:	9f ef       	ldi	r25, 0xFF	; 255
 5cc:	23 ed       	ldi	r18, 0xD3	; 211
 5ce:	30 e3       	ldi	r19, 0x30	; 48
 5d0:	91 50       	subi	r25, 0x01	; 1
 5d2:	20 40       	sbci	r18, 0x00	; 0
 5d4:	30 40       	sbci	r19, 0x00	; 0
 5d6:	e1 f7       	brne	.-8      	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
 5d8:	00 c0       	rjmp	.+0      	; 0x5da <__LOCK_REGION_LENGTH__+0x1da>
 5da:	00 00       	nop
                        _delay_ms(1000);
                    }
                    run_state = WAITING;
 5dc:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <run_state>
 5e0:	58 ce       	rjmp	.-848    	; 0x292 <main+0x7e>
 5e2:	60 e0       	ldi	r22, 0x00	; 0
 5e4:	80 e8       	ldi	r24, 0x80	; 128
 5e6:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
                break;
            }
            break;
        case PAUSE:
            lcd_move_cursor(0,0);
            lcd_write("System paused..");
 5ea:	87 ef       	ldi	r24, 0xF7	; 247
 5ec:	91 e0       	ldi	r25, 0x01	; 1
 5ee:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
            break;
 5f2:	4f ce       	rjmp	.-866    	; 0x292 <main+0x7e>
        default:
        case ERROR:
            lcd_clear();
 5f4:	60 e0       	ldi	r22, 0x00	; 0
 5f6:	81 e0       	ldi	r24, 0x01	; 1
 5f8:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
            lcd_write("SYSTEM ERROR");
 5fc:	87 e0       	ldi	r24, 0x07	; 7
 5fe:	92 e0       	ldi	r25, 0x02	; 2
 600:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
            break;
        }
    }
 604:	46 ce       	rjmp	.-884    	; 0x292 <main+0x7e>

00000606 <__vector_1>:
	}
}

/*--------- Interrupts ---------*/
ISR(E_STOP_INTR) //Emergency stop button ISR
{
 606:	1f 92       	push	r1
 608:	0f 92       	push	r0
 60a:	0f b6       	in	r0, 0x3f	; 63
 60c:	0f 92       	push	r0
 60e:	11 24       	eor	r1, r1
 610:	8f 93       	push	r24
    major_state = ERROR;
 612:	86 e0       	ldi	r24, 0x06	; 6
 614:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <major_state>
    set_bit(CYL_B);
 618:	44 9a       	sbi	0x08, 4	; 8
    set_bit(CYL_C);
 61a:	45 9a       	sbi	0x08, 5	; 8
    rst_bit(CYL_A);
 61c:	43 98       	cbi	0x08, 3	; 8

    while(!get_bit(E_STOP_BTN)); //lock the machine while the emergency button is pressed
 61e:	4a 9b       	sbis	0x09, 2	; 9
 620:	fe cf       	rjmp	.-4      	; 0x61e <__vector_1+0x18>
}
 622:	8f 91       	pop	r24
 624:	0f 90       	pop	r0
 626:	0f be       	out	0x3f, r0	; 63
 628:	0f 90       	pop	r0
 62a:	1f 90       	pop	r1
 62c:	18 95       	reti

0000062e <__vector_2>:
ISR(PAUSE_INT)
{
 62e:	1f 92       	push	r1
 630:	0f 92       	push	r0
 632:	0f b6       	in	r0, 0x3f	; 63
 634:	0f 92       	push	r0
 636:	11 24       	eor	r1, r1
 638:	8f 93       	push	r24
 63a:	9f 93       	push	r25
    major_state = (major_state == RUN ? PAUSE : (major_state ==  PAUSE ? RUN : major_state));
 63c:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <major_state>
 640:	84 30       	cpi	r24, 0x04	; 4
 642:	39 f0       	breq	.+14     	; 0x652 <__vector_2+0x24>
 644:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <major_state>
 648:	85 30       	cpi	r24, 0x05	; 5
 64a:	29 f0       	breq	.+10     	; 0x656 <__vector_2+0x28>
 64c:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <major_state>
 650:	03 c0       	rjmp	.+6      	; 0x658 <__vector_2+0x2a>
 652:	85 e0       	ldi	r24, 0x05	; 5
 654:	01 c0       	rjmp	.+2      	; 0x658 <__vector_2+0x2a>
 656:	84 e0       	ldi	r24, 0x04	; 4
 658:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <major_state>
 65c:	8f e3       	ldi	r24, 0x3F	; 63
 65e:	9c e9       	ldi	r25, 0x9C	; 156
 660:	01 97       	sbiw	r24, 0x01	; 1
 662:	f1 f7       	brne	.-4      	; 0x660 <__vector_2+0x32>
 664:	00 c0       	rjmp	.+0      	; 0x666 <__vector_2+0x38>
 666:	00 00       	nop
    _delay_ms(10); //button debounce
}
 668:	9f 91       	pop	r25
 66a:	8f 91       	pop	r24
 66c:	0f 90       	pop	r0
 66e:	0f be       	out	0x3f, r0	; 63
 670:	0f 90       	pop	r0
 672:	1f 90       	pop	r1
 674:	18 95       	reti

00000676 <strncmp>:
 676:	fb 01       	movw	r30, r22
 678:	dc 01       	movw	r26, r24
 67a:	41 50       	subi	r20, 0x01	; 1
 67c:	50 40       	sbci	r21, 0x00	; 0
 67e:	30 f0       	brcs	.+12     	; 0x68c <strncmp+0x16>
 680:	8d 91       	ld	r24, X+
 682:	01 90       	ld	r0, Z+
 684:	80 19       	sub	r24, r0
 686:	19 f4       	brne	.+6      	; 0x68e <strncmp+0x18>
 688:	00 20       	and	r0, r0
 68a:	b9 f7       	brne	.-18     	; 0x67a <strncmp+0x4>
 68c:	88 1b       	sub	r24, r24
 68e:	99 0b       	sbc	r25, r25
 690:	08 95       	ret

00000692 <snprintf>:
 692:	ae e0       	ldi	r26, 0x0E	; 14
 694:	b0 e0       	ldi	r27, 0x00	; 0
 696:	ef e4       	ldi	r30, 0x4F	; 79
 698:	f3 e0       	ldi	r31, 0x03	; 3
 69a:	0c 94 18 06 	jmp	0xc30	; 0xc30 <__prologue_saves__+0x1c>
 69e:	0d 89       	ldd	r16, Y+21	; 0x15
 6a0:	1e 89       	ldd	r17, Y+22	; 0x16
 6a2:	8f 89       	ldd	r24, Y+23	; 0x17
 6a4:	98 8d       	ldd	r25, Y+24	; 0x18
 6a6:	26 e0       	ldi	r18, 0x06	; 6
 6a8:	2c 83       	std	Y+4, r18	; 0x04
 6aa:	1a 83       	std	Y+2, r17	; 0x02
 6ac:	09 83       	std	Y+1, r16	; 0x01
 6ae:	97 ff       	sbrs	r25, 7
 6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <snprintf+0x24>
 6b2:	80 e0       	ldi	r24, 0x00	; 0
 6b4:	90 e8       	ldi	r25, 0x80	; 128
 6b6:	01 97       	sbiw	r24, 0x01	; 1
 6b8:	9e 83       	std	Y+6, r25	; 0x06
 6ba:	8d 83       	std	Y+5, r24	; 0x05
 6bc:	ae 01       	movw	r20, r28
 6be:	45 5e       	subi	r20, 0xE5	; 229
 6c0:	5f 4f       	sbci	r21, 0xFF	; 255
 6c2:	69 8d       	ldd	r22, Y+25	; 0x19
 6c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
 6c6:	ce 01       	movw	r24, r28
 6c8:	01 96       	adiw	r24, 0x01	; 1
 6ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <vfprintf>
 6ce:	4d 81       	ldd	r20, Y+5	; 0x05
 6d0:	5e 81       	ldd	r21, Y+6	; 0x06
 6d2:	57 fd       	sbrc	r21, 7
 6d4:	0a c0       	rjmp	.+20     	; 0x6ea <snprintf+0x58>
 6d6:	2f 81       	ldd	r18, Y+7	; 0x07
 6d8:	38 85       	ldd	r19, Y+8	; 0x08
 6da:	42 17       	cp	r20, r18
 6dc:	53 07       	cpc	r21, r19
 6de:	0c f4       	brge	.+2      	; 0x6e2 <snprintf+0x50>
 6e0:	9a 01       	movw	r18, r20
 6e2:	f8 01       	movw	r30, r16
 6e4:	e2 0f       	add	r30, r18
 6e6:	f3 1f       	adc	r31, r19
 6e8:	10 82       	st	Z, r1
 6ea:	2e 96       	adiw	r28, 0x0e	; 14
 6ec:	e4 e0       	ldi	r30, 0x04	; 4
 6ee:	0c 94 34 06 	jmp	0xc68	; 0xc68 <__epilogue_restores__+0x1c>

000006f2 <vfprintf>:
 6f2:	ab e0       	ldi	r26, 0x0B	; 11
 6f4:	b0 e0       	ldi	r27, 0x00	; 0
 6f6:	ef e7       	ldi	r30, 0x7F	; 127
 6f8:	f3 e0       	ldi	r31, 0x03	; 3
 6fa:	0c 94 0a 06 	jmp	0xc14	; 0xc14 <__prologue_saves__>
 6fe:	6c 01       	movw	r12, r24
 700:	7b 01       	movw	r14, r22
 702:	8a 01       	movw	r16, r20
 704:	fc 01       	movw	r30, r24
 706:	17 82       	std	Z+7, r1	; 0x07
 708:	16 82       	std	Z+6, r1	; 0x06
 70a:	83 81       	ldd	r24, Z+3	; 0x03
 70c:	81 ff       	sbrs	r24, 1
 70e:	cc c1       	rjmp	.+920    	; 0xaa8 <__stack+0x1a9>
 710:	ce 01       	movw	r24, r28
 712:	01 96       	adiw	r24, 0x01	; 1
 714:	3c 01       	movw	r6, r24
 716:	f6 01       	movw	r30, r12
 718:	93 81       	ldd	r25, Z+3	; 0x03
 71a:	f7 01       	movw	r30, r14
 71c:	93 fd       	sbrc	r25, 3
 71e:	85 91       	lpm	r24, Z+
 720:	93 ff       	sbrs	r25, 3
 722:	81 91       	ld	r24, Z+
 724:	7f 01       	movw	r14, r30
 726:	88 23       	and	r24, r24
 728:	09 f4       	brne	.+2      	; 0x72c <vfprintf+0x3a>
 72a:	ba c1       	rjmp	.+884    	; 0xaa0 <__stack+0x1a1>
 72c:	85 32       	cpi	r24, 0x25	; 37
 72e:	39 f4       	brne	.+14     	; 0x73e <vfprintf+0x4c>
 730:	93 fd       	sbrc	r25, 3
 732:	85 91       	lpm	r24, Z+
 734:	93 ff       	sbrs	r25, 3
 736:	81 91       	ld	r24, Z+
 738:	7f 01       	movw	r14, r30
 73a:	85 32       	cpi	r24, 0x25	; 37
 73c:	29 f4       	brne	.+10     	; 0x748 <vfprintf+0x56>
 73e:	b6 01       	movw	r22, r12
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	0e 94 70 05 	call	0xae0	; 0xae0 <fputc>
 746:	e7 cf       	rjmp	.-50     	; 0x716 <vfprintf+0x24>
 748:	91 2c       	mov	r9, r1
 74a:	21 2c       	mov	r2, r1
 74c:	31 2c       	mov	r3, r1
 74e:	ff e1       	ldi	r31, 0x1F	; 31
 750:	f3 15       	cp	r31, r3
 752:	d8 f0       	brcs	.+54     	; 0x78a <vfprintf+0x98>
 754:	8b 32       	cpi	r24, 0x2B	; 43
 756:	79 f0       	breq	.+30     	; 0x776 <vfprintf+0x84>
 758:	38 f4       	brcc	.+14     	; 0x768 <vfprintf+0x76>
 75a:	80 32       	cpi	r24, 0x20	; 32
 75c:	79 f0       	breq	.+30     	; 0x77c <vfprintf+0x8a>
 75e:	83 32       	cpi	r24, 0x23	; 35
 760:	a1 f4       	brne	.+40     	; 0x78a <vfprintf+0x98>
 762:	23 2d       	mov	r18, r3
 764:	20 61       	ori	r18, 0x10	; 16
 766:	1d c0       	rjmp	.+58     	; 0x7a2 <vfprintf+0xb0>
 768:	8d 32       	cpi	r24, 0x2D	; 45
 76a:	61 f0       	breq	.+24     	; 0x784 <vfprintf+0x92>
 76c:	80 33       	cpi	r24, 0x30	; 48
 76e:	69 f4       	brne	.+26     	; 0x78a <vfprintf+0x98>
 770:	23 2d       	mov	r18, r3
 772:	21 60       	ori	r18, 0x01	; 1
 774:	16 c0       	rjmp	.+44     	; 0x7a2 <vfprintf+0xb0>
 776:	83 2d       	mov	r24, r3
 778:	82 60       	ori	r24, 0x02	; 2
 77a:	38 2e       	mov	r3, r24
 77c:	e3 2d       	mov	r30, r3
 77e:	e4 60       	ori	r30, 0x04	; 4
 780:	3e 2e       	mov	r3, r30
 782:	2a c0       	rjmp	.+84     	; 0x7d8 <vfprintf+0xe6>
 784:	f3 2d       	mov	r31, r3
 786:	f8 60       	ori	r31, 0x08	; 8
 788:	1d c0       	rjmp	.+58     	; 0x7c4 <vfprintf+0xd2>
 78a:	37 fc       	sbrc	r3, 7
 78c:	2d c0       	rjmp	.+90     	; 0x7e8 <vfprintf+0xf6>
 78e:	20 ed       	ldi	r18, 0xD0	; 208
 790:	28 0f       	add	r18, r24
 792:	2a 30       	cpi	r18, 0x0A	; 10
 794:	40 f0       	brcs	.+16     	; 0x7a6 <vfprintf+0xb4>
 796:	8e 32       	cpi	r24, 0x2E	; 46
 798:	b9 f4       	brne	.+46     	; 0x7c8 <vfprintf+0xd6>
 79a:	36 fc       	sbrc	r3, 6
 79c:	81 c1       	rjmp	.+770    	; 0xaa0 <__stack+0x1a1>
 79e:	23 2d       	mov	r18, r3
 7a0:	20 64       	ori	r18, 0x40	; 64
 7a2:	32 2e       	mov	r3, r18
 7a4:	19 c0       	rjmp	.+50     	; 0x7d8 <vfprintf+0xe6>
 7a6:	36 fe       	sbrs	r3, 6
 7a8:	06 c0       	rjmp	.+12     	; 0x7b6 <vfprintf+0xc4>
 7aa:	8a e0       	ldi	r24, 0x0A	; 10
 7ac:	98 9e       	mul	r9, r24
 7ae:	20 0d       	add	r18, r0
 7b0:	11 24       	eor	r1, r1
 7b2:	92 2e       	mov	r9, r18
 7b4:	11 c0       	rjmp	.+34     	; 0x7d8 <vfprintf+0xe6>
 7b6:	ea e0       	ldi	r30, 0x0A	; 10
 7b8:	2e 9e       	mul	r2, r30
 7ba:	20 0d       	add	r18, r0
 7bc:	11 24       	eor	r1, r1
 7be:	22 2e       	mov	r2, r18
 7c0:	f3 2d       	mov	r31, r3
 7c2:	f0 62       	ori	r31, 0x20	; 32
 7c4:	3f 2e       	mov	r3, r31
 7c6:	08 c0       	rjmp	.+16     	; 0x7d8 <vfprintf+0xe6>
 7c8:	8c 36       	cpi	r24, 0x6C	; 108
 7ca:	21 f4       	brne	.+8      	; 0x7d4 <vfprintf+0xe2>
 7cc:	83 2d       	mov	r24, r3
 7ce:	80 68       	ori	r24, 0x80	; 128
 7d0:	38 2e       	mov	r3, r24
 7d2:	02 c0       	rjmp	.+4      	; 0x7d8 <vfprintf+0xe6>
 7d4:	88 36       	cpi	r24, 0x68	; 104
 7d6:	41 f4       	brne	.+16     	; 0x7e8 <vfprintf+0xf6>
 7d8:	f7 01       	movw	r30, r14
 7da:	93 fd       	sbrc	r25, 3
 7dc:	85 91       	lpm	r24, Z+
 7de:	93 ff       	sbrs	r25, 3
 7e0:	81 91       	ld	r24, Z+
 7e2:	7f 01       	movw	r14, r30
 7e4:	81 11       	cpse	r24, r1
 7e6:	b3 cf       	rjmp	.-154    	; 0x74e <vfprintf+0x5c>
 7e8:	98 2f       	mov	r25, r24
 7ea:	9f 7d       	andi	r25, 0xDF	; 223
 7ec:	95 54       	subi	r25, 0x45	; 69
 7ee:	93 30       	cpi	r25, 0x03	; 3
 7f0:	28 f4       	brcc	.+10     	; 0x7fc <vfprintf+0x10a>
 7f2:	0c 5f       	subi	r16, 0xFC	; 252
 7f4:	1f 4f       	sbci	r17, 0xFF	; 255
 7f6:	9f e3       	ldi	r25, 0x3F	; 63
 7f8:	99 83       	std	Y+1, r25	; 0x01
 7fa:	0d c0       	rjmp	.+26     	; 0x816 <vfprintf+0x124>
 7fc:	83 36       	cpi	r24, 0x63	; 99
 7fe:	31 f0       	breq	.+12     	; 0x80c <vfprintf+0x11a>
 800:	83 37       	cpi	r24, 0x73	; 115
 802:	71 f0       	breq	.+28     	; 0x820 <vfprintf+0x12e>
 804:	83 35       	cpi	r24, 0x53	; 83
 806:	09 f0       	breq	.+2      	; 0x80a <vfprintf+0x118>
 808:	59 c0       	rjmp	.+178    	; 0x8bc <vfprintf+0x1ca>
 80a:	21 c0       	rjmp	.+66     	; 0x84e <vfprintf+0x15c>
 80c:	f8 01       	movw	r30, r16
 80e:	80 81       	ld	r24, Z
 810:	89 83       	std	Y+1, r24	; 0x01
 812:	0e 5f       	subi	r16, 0xFE	; 254
 814:	1f 4f       	sbci	r17, 0xFF	; 255
 816:	88 24       	eor	r8, r8
 818:	83 94       	inc	r8
 81a:	91 2c       	mov	r9, r1
 81c:	53 01       	movw	r10, r6
 81e:	13 c0       	rjmp	.+38     	; 0x846 <vfprintf+0x154>
 820:	28 01       	movw	r4, r16
 822:	f2 e0       	ldi	r31, 0x02	; 2
 824:	4f 0e       	add	r4, r31
 826:	51 1c       	adc	r5, r1
 828:	f8 01       	movw	r30, r16
 82a:	a0 80       	ld	r10, Z
 82c:	b1 80       	ldd	r11, Z+1	; 0x01
 82e:	36 fe       	sbrs	r3, 6
 830:	03 c0       	rjmp	.+6      	; 0x838 <vfprintf+0x146>
 832:	69 2d       	mov	r22, r9
 834:	70 e0       	ldi	r23, 0x00	; 0
 836:	02 c0       	rjmp	.+4      	; 0x83c <vfprintf+0x14a>
 838:	6f ef       	ldi	r22, 0xFF	; 255
 83a:	7f ef       	ldi	r23, 0xFF	; 255
 83c:	c5 01       	movw	r24, r10
 83e:	0e 94 65 05 	call	0xaca	; 0xaca <strnlen>
 842:	4c 01       	movw	r8, r24
 844:	82 01       	movw	r16, r4
 846:	f3 2d       	mov	r31, r3
 848:	ff 77       	andi	r31, 0x7F	; 127
 84a:	3f 2e       	mov	r3, r31
 84c:	16 c0       	rjmp	.+44     	; 0x87a <vfprintf+0x188>
 84e:	28 01       	movw	r4, r16
 850:	22 e0       	ldi	r18, 0x02	; 2
 852:	42 0e       	add	r4, r18
 854:	51 1c       	adc	r5, r1
 856:	f8 01       	movw	r30, r16
 858:	a0 80       	ld	r10, Z
 85a:	b1 80       	ldd	r11, Z+1	; 0x01
 85c:	36 fe       	sbrs	r3, 6
 85e:	03 c0       	rjmp	.+6      	; 0x866 <vfprintf+0x174>
 860:	69 2d       	mov	r22, r9
 862:	70 e0       	ldi	r23, 0x00	; 0
 864:	02 c0       	rjmp	.+4      	; 0x86a <vfprintf+0x178>
 866:	6f ef       	ldi	r22, 0xFF	; 255
 868:	7f ef       	ldi	r23, 0xFF	; 255
 86a:	c5 01       	movw	r24, r10
 86c:	0e 94 5a 05 	call	0xab4	; 0xab4 <strnlen_P>
 870:	4c 01       	movw	r8, r24
 872:	f3 2d       	mov	r31, r3
 874:	f0 68       	ori	r31, 0x80	; 128
 876:	3f 2e       	mov	r3, r31
 878:	82 01       	movw	r16, r4
 87a:	33 fc       	sbrc	r3, 3
 87c:	1b c0       	rjmp	.+54     	; 0x8b4 <vfprintf+0x1c2>
 87e:	82 2d       	mov	r24, r2
 880:	90 e0       	ldi	r25, 0x00	; 0
 882:	88 16       	cp	r8, r24
 884:	99 06       	cpc	r9, r25
 886:	b0 f4       	brcc	.+44     	; 0x8b4 <vfprintf+0x1c2>
 888:	b6 01       	movw	r22, r12
 88a:	80 e2       	ldi	r24, 0x20	; 32
 88c:	90 e0       	ldi	r25, 0x00	; 0
 88e:	0e 94 70 05 	call	0xae0	; 0xae0 <fputc>
 892:	2a 94       	dec	r2
 894:	f4 cf       	rjmp	.-24     	; 0x87e <vfprintf+0x18c>
 896:	f5 01       	movw	r30, r10
 898:	37 fc       	sbrc	r3, 7
 89a:	85 91       	lpm	r24, Z+
 89c:	37 fe       	sbrs	r3, 7
 89e:	81 91       	ld	r24, Z+
 8a0:	5f 01       	movw	r10, r30
 8a2:	b6 01       	movw	r22, r12
 8a4:	90 e0       	ldi	r25, 0x00	; 0
 8a6:	0e 94 70 05 	call	0xae0	; 0xae0 <fputc>
 8aa:	21 10       	cpse	r2, r1
 8ac:	2a 94       	dec	r2
 8ae:	21 e0       	ldi	r18, 0x01	; 1
 8b0:	82 1a       	sub	r8, r18
 8b2:	91 08       	sbc	r9, r1
 8b4:	81 14       	cp	r8, r1
 8b6:	91 04       	cpc	r9, r1
 8b8:	71 f7       	brne	.-36     	; 0x896 <vfprintf+0x1a4>
 8ba:	e8 c0       	rjmp	.+464    	; 0xa8c <__stack+0x18d>
 8bc:	84 36       	cpi	r24, 0x64	; 100
 8be:	11 f0       	breq	.+4      	; 0x8c4 <vfprintf+0x1d2>
 8c0:	89 36       	cpi	r24, 0x69	; 105
 8c2:	41 f5       	brne	.+80     	; 0x914 <__stack+0x15>
 8c4:	f8 01       	movw	r30, r16
 8c6:	37 fe       	sbrs	r3, 7
 8c8:	07 c0       	rjmp	.+14     	; 0x8d8 <vfprintf+0x1e6>
 8ca:	60 81       	ld	r22, Z
 8cc:	71 81       	ldd	r23, Z+1	; 0x01
 8ce:	82 81       	ldd	r24, Z+2	; 0x02
 8d0:	93 81       	ldd	r25, Z+3	; 0x03
 8d2:	0c 5f       	subi	r16, 0xFC	; 252
 8d4:	1f 4f       	sbci	r17, 0xFF	; 255
 8d6:	08 c0       	rjmp	.+16     	; 0x8e8 <vfprintf+0x1f6>
 8d8:	60 81       	ld	r22, Z
 8da:	71 81       	ldd	r23, Z+1	; 0x01
 8dc:	07 2e       	mov	r0, r23
 8de:	00 0c       	add	r0, r0
 8e0:	88 0b       	sbc	r24, r24
 8e2:	99 0b       	sbc	r25, r25
 8e4:	0e 5f       	subi	r16, 0xFE	; 254
 8e6:	1f 4f       	sbci	r17, 0xFF	; 255
 8e8:	f3 2d       	mov	r31, r3
 8ea:	ff 76       	andi	r31, 0x6F	; 111
 8ec:	3f 2e       	mov	r3, r31
 8ee:	97 ff       	sbrs	r25, 7
 8f0:	09 c0       	rjmp	.+18     	; 0x904 <__stack+0x5>
 8f2:	90 95       	com	r25
 8f4:	80 95       	com	r24
 8f6:	70 95       	com	r23
 8f8:	61 95       	neg	r22
 8fa:	7f 4f       	sbci	r23, 0xFF	; 255
 8fc:	8f 4f       	sbci	r24, 0xFF	; 255
 8fe:	9f 4f       	sbci	r25, 0xFF	; 255
 900:	f0 68       	ori	r31, 0x80	; 128
 902:	3f 2e       	mov	r3, r31
 904:	2a e0       	ldi	r18, 0x0A	; 10
 906:	30 e0       	ldi	r19, 0x00	; 0
 908:	a3 01       	movw	r20, r6
 90a:	0e 94 ac 05 	call	0xb58	; 0xb58 <__ultoa_invert>
 90e:	88 2e       	mov	r8, r24
 910:	86 18       	sub	r8, r6
 912:	45 c0       	rjmp	.+138    	; 0x99e <__stack+0x9f>
 914:	85 37       	cpi	r24, 0x75	; 117
 916:	31 f4       	brne	.+12     	; 0x924 <__stack+0x25>
 918:	23 2d       	mov	r18, r3
 91a:	2f 7e       	andi	r18, 0xEF	; 239
 91c:	b2 2e       	mov	r11, r18
 91e:	2a e0       	ldi	r18, 0x0A	; 10
 920:	30 e0       	ldi	r19, 0x00	; 0
 922:	25 c0       	rjmp	.+74     	; 0x96e <__stack+0x6f>
 924:	93 2d       	mov	r25, r3
 926:	99 7f       	andi	r25, 0xF9	; 249
 928:	b9 2e       	mov	r11, r25
 92a:	8f 36       	cpi	r24, 0x6F	; 111
 92c:	c1 f0       	breq	.+48     	; 0x95e <__stack+0x5f>
 92e:	18 f4       	brcc	.+6      	; 0x936 <__stack+0x37>
 930:	88 35       	cpi	r24, 0x58	; 88
 932:	79 f0       	breq	.+30     	; 0x952 <__stack+0x53>
 934:	b5 c0       	rjmp	.+362    	; 0xaa0 <__stack+0x1a1>
 936:	80 37       	cpi	r24, 0x70	; 112
 938:	19 f0       	breq	.+6      	; 0x940 <__stack+0x41>
 93a:	88 37       	cpi	r24, 0x78	; 120
 93c:	21 f0       	breq	.+8      	; 0x946 <__stack+0x47>
 93e:	b0 c0       	rjmp	.+352    	; 0xaa0 <__stack+0x1a1>
 940:	e9 2f       	mov	r30, r25
 942:	e0 61       	ori	r30, 0x10	; 16
 944:	be 2e       	mov	r11, r30
 946:	b4 fe       	sbrs	r11, 4
 948:	0d c0       	rjmp	.+26     	; 0x964 <__stack+0x65>
 94a:	fb 2d       	mov	r31, r11
 94c:	f4 60       	ori	r31, 0x04	; 4
 94e:	bf 2e       	mov	r11, r31
 950:	09 c0       	rjmp	.+18     	; 0x964 <__stack+0x65>
 952:	34 fe       	sbrs	r3, 4
 954:	0a c0       	rjmp	.+20     	; 0x96a <__stack+0x6b>
 956:	29 2f       	mov	r18, r25
 958:	26 60       	ori	r18, 0x06	; 6
 95a:	b2 2e       	mov	r11, r18
 95c:	06 c0       	rjmp	.+12     	; 0x96a <__stack+0x6b>
 95e:	28 e0       	ldi	r18, 0x08	; 8
 960:	30 e0       	ldi	r19, 0x00	; 0
 962:	05 c0       	rjmp	.+10     	; 0x96e <__stack+0x6f>
 964:	20 e1       	ldi	r18, 0x10	; 16
 966:	30 e0       	ldi	r19, 0x00	; 0
 968:	02 c0       	rjmp	.+4      	; 0x96e <__stack+0x6f>
 96a:	20 e1       	ldi	r18, 0x10	; 16
 96c:	32 e0       	ldi	r19, 0x02	; 2
 96e:	f8 01       	movw	r30, r16
 970:	b7 fe       	sbrs	r11, 7
 972:	07 c0       	rjmp	.+14     	; 0x982 <__stack+0x83>
 974:	60 81       	ld	r22, Z
 976:	71 81       	ldd	r23, Z+1	; 0x01
 978:	82 81       	ldd	r24, Z+2	; 0x02
 97a:	93 81       	ldd	r25, Z+3	; 0x03
 97c:	0c 5f       	subi	r16, 0xFC	; 252
 97e:	1f 4f       	sbci	r17, 0xFF	; 255
 980:	06 c0       	rjmp	.+12     	; 0x98e <__stack+0x8f>
 982:	60 81       	ld	r22, Z
 984:	71 81       	ldd	r23, Z+1	; 0x01
 986:	80 e0       	ldi	r24, 0x00	; 0
 988:	90 e0       	ldi	r25, 0x00	; 0
 98a:	0e 5f       	subi	r16, 0xFE	; 254
 98c:	1f 4f       	sbci	r17, 0xFF	; 255
 98e:	a3 01       	movw	r20, r6
 990:	0e 94 ac 05 	call	0xb58	; 0xb58 <__ultoa_invert>
 994:	88 2e       	mov	r8, r24
 996:	86 18       	sub	r8, r6
 998:	fb 2d       	mov	r31, r11
 99a:	ff 77       	andi	r31, 0x7F	; 127
 99c:	3f 2e       	mov	r3, r31
 99e:	36 fe       	sbrs	r3, 6
 9a0:	0d c0       	rjmp	.+26     	; 0x9bc <__stack+0xbd>
 9a2:	23 2d       	mov	r18, r3
 9a4:	2e 7f       	andi	r18, 0xFE	; 254
 9a6:	a2 2e       	mov	r10, r18
 9a8:	89 14       	cp	r8, r9
 9aa:	58 f4       	brcc	.+22     	; 0x9c2 <__stack+0xc3>
 9ac:	34 fe       	sbrs	r3, 4
 9ae:	0b c0       	rjmp	.+22     	; 0x9c6 <__stack+0xc7>
 9b0:	32 fc       	sbrc	r3, 2
 9b2:	09 c0       	rjmp	.+18     	; 0x9c6 <__stack+0xc7>
 9b4:	83 2d       	mov	r24, r3
 9b6:	8e 7e       	andi	r24, 0xEE	; 238
 9b8:	a8 2e       	mov	r10, r24
 9ba:	05 c0       	rjmp	.+10     	; 0x9c6 <__stack+0xc7>
 9bc:	b8 2c       	mov	r11, r8
 9be:	a3 2c       	mov	r10, r3
 9c0:	03 c0       	rjmp	.+6      	; 0x9c8 <__stack+0xc9>
 9c2:	b8 2c       	mov	r11, r8
 9c4:	01 c0       	rjmp	.+2      	; 0x9c8 <__stack+0xc9>
 9c6:	b9 2c       	mov	r11, r9
 9c8:	a4 fe       	sbrs	r10, 4
 9ca:	0f c0       	rjmp	.+30     	; 0x9ea <__stack+0xeb>
 9cc:	fe 01       	movw	r30, r28
 9ce:	e8 0d       	add	r30, r8
 9d0:	f1 1d       	adc	r31, r1
 9d2:	80 81       	ld	r24, Z
 9d4:	80 33       	cpi	r24, 0x30	; 48
 9d6:	21 f4       	brne	.+8      	; 0x9e0 <__stack+0xe1>
 9d8:	9a 2d       	mov	r25, r10
 9da:	99 7e       	andi	r25, 0xE9	; 233
 9dc:	a9 2e       	mov	r10, r25
 9de:	09 c0       	rjmp	.+18     	; 0x9f2 <__stack+0xf3>
 9e0:	a2 fe       	sbrs	r10, 2
 9e2:	06 c0       	rjmp	.+12     	; 0x9f0 <__stack+0xf1>
 9e4:	b3 94       	inc	r11
 9e6:	b3 94       	inc	r11
 9e8:	04 c0       	rjmp	.+8      	; 0x9f2 <__stack+0xf3>
 9ea:	8a 2d       	mov	r24, r10
 9ec:	86 78       	andi	r24, 0x86	; 134
 9ee:	09 f0       	breq	.+2      	; 0x9f2 <__stack+0xf3>
 9f0:	b3 94       	inc	r11
 9f2:	a3 fc       	sbrc	r10, 3
 9f4:	11 c0       	rjmp	.+34     	; 0xa18 <__stack+0x119>
 9f6:	a0 fe       	sbrs	r10, 0
 9f8:	06 c0       	rjmp	.+12     	; 0xa06 <__stack+0x107>
 9fa:	b2 14       	cp	r11, r2
 9fc:	88 f4       	brcc	.+34     	; 0xa20 <__stack+0x121>
 9fe:	28 0c       	add	r2, r8
 a00:	92 2c       	mov	r9, r2
 a02:	9b 18       	sub	r9, r11
 a04:	0e c0       	rjmp	.+28     	; 0xa22 <__stack+0x123>
 a06:	b2 14       	cp	r11, r2
 a08:	60 f4       	brcc	.+24     	; 0xa22 <__stack+0x123>
 a0a:	b6 01       	movw	r22, r12
 a0c:	80 e2       	ldi	r24, 0x20	; 32
 a0e:	90 e0       	ldi	r25, 0x00	; 0
 a10:	0e 94 70 05 	call	0xae0	; 0xae0 <fputc>
 a14:	b3 94       	inc	r11
 a16:	f7 cf       	rjmp	.-18     	; 0xa06 <__stack+0x107>
 a18:	b2 14       	cp	r11, r2
 a1a:	18 f4       	brcc	.+6      	; 0xa22 <__stack+0x123>
 a1c:	2b 18       	sub	r2, r11
 a1e:	02 c0       	rjmp	.+4      	; 0xa24 <__stack+0x125>
 a20:	98 2c       	mov	r9, r8
 a22:	21 2c       	mov	r2, r1
 a24:	a4 fe       	sbrs	r10, 4
 a26:	10 c0       	rjmp	.+32     	; 0xa48 <__stack+0x149>
 a28:	b6 01       	movw	r22, r12
 a2a:	80 e3       	ldi	r24, 0x30	; 48
 a2c:	90 e0       	ldi	r25, 0x00	; 0
 a2e:	0e 94 70 05 	call	0xae0	; 0xae0 <fputc>
 a32:	a2 fe       	sbrs	r10, 2
 a34:	17 c0       	rjmp	.+46     	; 0xa64 <__stack+0x165>
 a36:	a1 fc       	sbrc	r10, 1
 a38:	03 c0       	rjmp	.+6      	; 0xa40 <__stack+0x141>
 a3a:	88 e7       	ldi	r24, 0x78	; 120
 a3c:	90 e0       	ldi	r25, 0x00	; 0
 a3e:	02 c0       	rjmp	.+4      	; 0xa44 <__stack+0x145>
 a40:	88 e5       	ldi	r24, 0x58	; 88
 a42:	90 e0       	ldi	r25, 0x00	; 0
 a44:	b6 01       	movw	r22, r12
 a46:	0c c0       	rjmp	.+24     	; 0xa60 <__stack+0x161>
 a48:	8a 2d       	mov	r24, r10
 a4a:	86 78       	andi	r24, 0x86	; 134
 a4c:	59 f0       	breq	.+22     	; 0xa64 <__stack+0x165>
 a4e:	a1 fe       	sbrs	r10, 1
 a50:	02 c0       	rjmp	.+4      	; 0xa56 <__stack+0x157>
 a52:	8b e2       	ldi	r24, 0x2B	; 43
 a54:	01 c0       	rjmp	.+2      	; 0xa58 <__stack+0x159>
 a56:	80 e2       	ldi	r24, 0x20	; 32
 a58:	a7 fc       	sbrc	r10, 7
 a5a:	8d e2       	ldi	r24, 0x2D	; 45
 a5c:	b6 01       	movw	r22, r12
 a5e:	90 e0       	ldi	r25, 0x00	; 0
 a60:	0e 94 70 05 	call	0xae0	; 0xae0 <fputc>
 a64:	89 14       	cp	r8, r9
 a66:	38 f4       	brcc	.+14     	; 0xa76 <__stack+0x177>
 a68:	b6 01       	movw	r22, r12
 a6a:	80 e3       	ldi	r24, 0x30	; 48
 a6c:	90 e0       	ldi	r25, 0x00	; 0
 a6e:	0e 94 70 05 	call	0xae0	; 0xae0 <fputc>
 a72:	9a 94       	dec	r9
 a74:	f7 cf       	rjmp	.-18     	; 0xa64 <__stack+0x165>
 a76:	8a 94       	dec	r8
 a78:	f3 01       	movw	r30, r6
 a7a:	e8 0d       	add	r30, r8
 a7c:	f1 1d       	adc	r31, r1
 a7e:	80 81       	ld	r24, Z
 a80:	b6 01       	movw	r22, r12
 a82:	90 e0       	ldi	r25, 0x00	; 0
 a84:	0e 94 70 05 	call	0xae0	; 0xae0 <fputc>
 a88:	81 10       	cpse	r8, r1
 a8a:	f5 cf       	rjmp	.-22     	; 0xa76 <__stack+0x177>
 a8c:	22 20       	and	r2, r2
 a8e:	09 f4       	brne	.+2      	; 0xa92 <__stack+0x193>
 a90:	42 ce       	rjmp	.-892    	; 0x716 <vfprintf+0x24>
 a92:	b6 01       	movw	r22, r12
 a94:	80 e2       	ldi	r24, 0x20	; 32
 a96:	90 e0       	ldi	r25, 0x00	; 0
 a98:	0e 94 70 05 	call	0xae0	; 0xae0 <fputc>
 a9c:	2a 94       	dec	r2
 a9e:	f6 cf       	rjmp	.-20     	; 0xa8c <__stack+0x18d>
 aa0:	f6 01       	movw	r30, r12
 aa2:	86 81       	ldd	r24, Z+6	; 0x06
 aa4:	97 81       	ldd	r25, Z+7	; 0x07
 aa6:	02 c0       	rjmp	.+4      	; 0xaac <__stack+0x1ad>
 aa8:	8f ef       	ldi	r24, 0xFF	; 255
 aaa:	9f ef       	ldi	r25, 0xFF	; 255
 aac:	2b 96       	adiw	r28, 0x0b	; 11
 aae:	e2 e1       	ldi	r30, 0x12	; 18
 ab0:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__epilogue_restores__>

00000ab4 <strnlen_P>:
 ab4:	fc 01       	movw	r30, r24
 ab6:	05 90       	lpm	r0, Z+
 ab8:	61 50       	subi	r22, 0x01	; 1
 aba:	70 40       	sbci	r23, 0x00	; 0
 abc:	01 10       	cpse	r0, r1
 abe:	d8 f7       	brcc	.-10     	; 0xab6 <strnlen_P+0x2>
 ac0:	80 95       	com	r24
 ac2:	90 95       	com	r25
 ac4:	8e 0f       	add	r24, r30
 ac6:	9f 1f       	adc	r25, r31
 ac8:	08 95       	ret

00000aca <strnlen>:
 aca:	fc 01       	movw	r30, r24
 acc:	61 50       	subi	r22, 0x01	; 1
 ace:	70 40       	sbci	r23, 0x00	; 0
 ad0:	01 90       	ld	r0, Z+
 ad2:	01 10       	cpse	r0, r1
 ad4:	d8 f7       	brcc	.-10     	; 0xacc <strnlen+0x2>
 ad6:	80 95       	com	r24
 ad8:	90 95       	com	r25
 ada:	8e 0f       	add	r24, r30
 adc:	9f 1f       	adc	r25, r31
 ade:	08 95       	ret

00000ae0 <fputc>:
 ae0:	0f 93       	push	r16
 ae2:	1f 93       	push	r17
 ae4:	cf 93       	push	r28
 ae6:	df 93       	push	r29
 ae8:	fb 01       	movw	r30, r22
 aea:	23 81       	ldd	r18, Z+3	; 0x03
 aec:	21 fd       	sbrc	r18, 1
 aee:	03 c0       	rjmp	.+6      	; 0xaf6 <fputc+0x16>
 af0:	8f ef       	ldi	r24, 0xFF	; 255
 af2:	9f ef       	ldi	r25, 0xFF	; 255
 af4:	2c c0       	rjmp	.+88     	; 0xb4e <fputc+0x6e>
 af6:	22 ff       	sbrs	r18, 2
 af8:	16 c0       	rjmp	.+44     	; 0xb26 <fputc+0x46>
 afa:	46 81       	ldd	r20, Z+6	; 0x06
 afc:	57 81       	ldd	r21, Z+7	; 0x07
 afe:	24 81       	ldd	r18, Z+4	; 0x04
 b00:	35 81       	ldd	r19, Z+5	; 0x05
 b02:	42 17       	cp	r20, r18
 b04:	53 07       	cpc	r21, r19
 b06:	44 f4       	brge	.+16     	; 0xb18 <fputc+0x38>
 b08:	a0 81       	ld	r26, Z
 b0a:	b1 81       	ldd	r27, Z+1	; 0x01
 b0c:	9d 01       	movw	r18, r26
 b0e:	2f 5f       	subi	r18, 0xFF	; 255
 b10:	3f 4f       	sbci	r19, 0xFF	; 255
 b12:	31 83       	std	Z+1, r19	; 0x01
 b14:	20 83       	st	Z, r18
 b16:	8c 93       	st	X, r24
 b18:	26 81       	ldd	r18, Z+6	; 0x06
 b1a:	37 81       	ldd	r19, Z+7	; 0x07
 b1c:	2f 5f       	subi	r18, 0xFF	; 255
 b1e:	3f 4f       	sbci	r19, 0xFF	; 255
 b20:	37 83       	std	Z+7, r19	; 0x07
 b22:	26 83       	std	Z+6, r18	; 0x06
 b24:	14 c0       	rjmp	.+40     	; 0xb4e <fputc+0x6e>
 b26:	8b 01       	movw	r16, r22
 b28:	ec 01       	movw	r28, r24
 b2a:	fb 01       	movw	r30, r22
 b2c:	00 84       	ldd	r0, Z+8	; 0x08
 b2e:	f1 85       	ldd	r31, Z+9	; 0x09
 b30:	e0 2d       	mov	r30, r0
 b32:	09 95       	icall
 b34:	89 2b       	or	r24, r25
 b36:	e1 f6       	brne	.-72     	; 0xaf0 <fputc+0x10>
 b38:	d8 01       	movw	r26, r16
 b3a:	16 96       	adiw	r26, 0x06	; 6
 b3c:	8d 91       	ld	r24, X+
 b3e:	9c 91       	ld	r25, X
 b40:	17 97       	sbiw	r26, 0x07	; 7
 b42:	01 96       	adiw	r24, 0x01	; 1
 b44:	17 96       	adiw	r26, 0x07	; 7
 b46:	9c 93       	st	X, r25
 b48:	8e 93       	st	-X, r24
 b4a:	16 97       	sbiw	r26, 0x06	; 6
 b4c:	ce 01       	movw	r24, r28
 b4e:	df 91       	pop	r29
 b50:	cf 91       	pop	r28
 b52:	1f 91       	pop	r17
 b54:	0f 91       	pop	r16
 b56:	08 95       	ret

00000b58 <__ultoa_invert>:
 b58:	fa 01       	movw	r30, r20
 b5a:	aa 27       	eor	r26, r26
 b5c:	28 30       	cpi	r18, 0x08	; 8
 b5e:	51 f1       	breq	.+84     	; 0xbb4 <__ultoa_invert+0x5c>
 b60:	20 31       	cpi	r18, 0x10	; 16
 b62:	81 f1       	breq	.+96     	; 0xbc4 <__ultoa_invert+0x6c>
 b64:	e8 94       	clt
 b66:	6f 93       	push	r22
 b68:	6e 7f       	andi	r22, 0xFE	; 254
 b6a:	6e 5f       	subi	r22, 0xFE	; 254
 b6c:	7f 4f       	sbci	r23, 0xFF	; 255
 b6e:	8f 4f       	sbci	r24, 0xFF	; 255
 b70:	9f 4f       	sbci	r25, 0xFF	; 255
 b72:	af 4f       	sbci	r26, 0xFF	; 255
 b74:	b1 e0       	ldi	r27, 0x01	; 1
 b76:	3e d0       	rcall	.+124    	; 0xbf4 <__ultoa_invert+0x9c>
 b78:	b4 e0       	ldi	r27, 0x04	; 4
 b7a:	3c d0       	rcall	.+120    	; 0xbf4 <__ultoa_invert+0x9c>
 b7c:	67 0f       	add	r22, r23
 b7e:	78 1f       	adc	r23, r24
 b80:	89 1f       	adc	r24, r25
 b82:	9a 1f       	adc	r25, r26
 b84:	a1 1d       	adc	r26, r1
 b86:	68 0f       	add	r22, r24
 b88:	79 1f       	adc	r23, r25
 b8a:	8a 1f       	adc	r24, r26
 b8c:	91 1d       	adc	r25, r1
 b8e:	a1 1d       	adc	r26, r1
 b90:	6a 0f       	add	r22, r26
 b92:	71 1d       	adc	r23, r1
 b94:	81 1d       	adc	r24, r1
 b96:	91 1d       	adc	r25, r1
 b98:	a1 1d       	adc	r26, r1
 b9a:	20 d0       	rcall	.+64     	; 0xbdc <__ultoa_invert+0x84>
 b9c:	09 f4       	brne	.+2      	; 0xba0 <__ultoa_invert+0x48>
 b9e:	68 94       	set
 ba0:	3f 91       	pop	r19
 ba2:	2a e0       	ldi	r18, 0x0A	; 10
 ba4:	26 9f       	mul	r18, r22
 ba6:	11 24       	eor	r1, r1
 ba8:	30 19       	sub	r19, r0
 baa:	30 5d       	subi	r19, 0xD0	; 208
 bac:	31 93       	st	Z+, r19
 bae:	de f6       	brtc	.-74     	; 0xb66 <__ultoa_invert+0xe>
 bb0:	cf 01       	movw	r24, r30
 bb2:	08 95       	ret
 bb4:	46 2f       	mov	r20, r22
 bb6:	47 70       	andi	r20, 0x07	; 7
 bb8:	40 5d       	subi	r20, 0xD0	; 208
 bba:	41 93       	st	Z+, r20
 bbc:	b3 e0       	ldi	r27, 0x03	; 3
 bbe:	0f d0       	rcall	.+30     	; 0xbde <__ultoa_invert+0x86>
 bc0:	c9 f7       	brne	.-14     	; 0xbb4 <__ultoa_invert+0x5c>
 bc2:	f6 cf       	rjmp	.-20     	; 0xbb0 <__ultoa_invert+0x58>
 bc4:	46 2f       	mov	r20, r22
 bc6:	4f 70       	andi	r20, 0x0F	; 15
 bc8:	40 5d       	subi	r20, 0xD0	; 208
 bca:	4a 33       	cpi	r20, 0x3A	; 58
 bcc:	18 f0       	brcs	.+6      	; 0xbd4 <__ultoa_invert+0x7c>
 bce:	49 5d       	subi	r20, 0xD9	; 217
 bd0:	31 fd       	sbrc	r19, 1
 bd2:	40 52       	subi	r20, 0x20	; 32
 bd4:	41 93       	st	Z+, r20
 bd6:	02 d0       	rcall	.+4      	; 0xbdc <__ultoa_invert+0x84>
 bd8:	a9 f7       	brne	.-22     	; 0xbc4 <__ultoa_invert+0x6c>
 bda:	ea cf       	rjmp	.-44     	; 0xbb0 <__ultoa_invert+0x58>
 bdc:	b4 e0       	ldi	r27, 0x04	; 4
 bde:	a6 95       	lsr	r26
 be0:	97 95       	ror	r25
 be2:	87 95       	ror	r24
 be4:	77 95       	ror	r23
 be6:	67 95       	ror	r22
 be8:	ba 95       	dec	r27
 bea:	c9 f7       	brne	.-14     	; 0xbde <__ultoa_invert+0x86>
 bec:	00 97       	sbiw	r24, 0x00	; 0
 bee:	61 05       	cpc	r22, r1
 bf0:	71 05       	cpc	r23, r1
 bf2:	08 95       	ret
 bf4:	9b 01       	movw	r18, r22
 bf6:	ac 01       	movw	r20, r24
 bf8:	0a 2e       	mov	r0, r26
 bfa:	06 94       	lsr	r0
 bfc:	57 95       	ror	r21
 bfe:	47 95       	ror	r20
 c00:	37 95       	ror	r19
 c02:	27 95       	ror	r18
 c04:	ba 95       	dec	r27
 c06:	c9 f7       	brne	.-14     	; 0xbfa <__ultoa_invert+0xa2>
 c08:	62 0f       	add	r22, r18
 c0a:	73 1f       	adc	r23, r19
 c0c:	84 1f       	adc	r24, r20
 c0e:	95 1f       	adc	r25, r21
 c10:	a0 1d       	adc	r26, r0
 c12:	08 95       	ret

00000c14 <__prologue_saves__>:
 c14:	2f 92       	push	r2
 c16:	3f 92       	push	r3
 c18:	4f 92       	push	r4
 c1a:	5f 92       	push	r5
 c1c:	6f 92       	push	r6
 c1e:	7f 92       	push	r7
 c20:	8f 92       	push	r8
 c22:	9f 92       	push	r9
 c24:	af 92       	push	r10
 c26:	bf 92       	push	r11
 c28:	cf 92       	push	r12
 c2a:	df 92       	push	r13
 c2c:	ef 92       	push	r14
 c2e:	ff 92       	push	r15
 c30:	0f 93       	push	r16
 c32:	1f 93       	push	r17
 c34:	cf 93       	push	r28
 c36:	df 93       	push	r29
 c38:	cd b7       	in	r28, 0x3d	; 61
 c3a:	de b7       	in	r29, 0x3e	; 62
 c3c:	ca 1b       	sub	r28, r26
 c3e:	db 0b       	sbc	r29, r27
 c40:	0f b6       	in	r0, 0x3f	; 63
 c42:	f8 94       	cli
 c44:	de bf       	out	0x3e, r29	; 62
 c46:	0f be       	out	0x3f, r0	; 63
 c48:	cd bf       	out	0x3d, r28	; 61
 c4a:	09 94       	ijmp

00000c4c <__epilogue_restores__>:
 c4c:	2a 88       	ldd	r2, Y+18	; 0x12
 c4e:	39 88       	ldd	r3, Y+17	; 0x11
 c50:	48 88       	ldd	r4, Y+16	; 0x10
 c52:	5f 84       	ldd	r5, Y+15	; 0x0f
 c54:	6e 84       	ldd	r6, Y+14	; 0x0e
 c56:	7d 84       	ldd	r7, Y+13	; 0x0d
 c58:	8c 84       	ldd	r8, Y+12	; 0x0c
 c5a:	9b 84       	ldd	r9, Y+11	; 0x0b
 c5c:	aa 84       	ldd	r10, Y+10	; 0x0a
 c5e:	b9 84       	ldd	r11, Y+9	; 0x09
 c60:	c8 84       	ldd	r12, Y+8	; 0x08
 c62:	df 80       	ldd	r13, Y+7	; 0x07
 c64:	ee 80       	ldd	r14, Y+6	; 0x06
 c66:	fd 80       	ldd	r15, Y+5	; 0x05
 c68:	0c 81       	ldd	r16, Y+4	; 0x04
 c6a:	1b 81       	ldd	r17, Y+3	; 0x03
 c6c:	aa 81       	ldd	r26, Y+2	; 0x02
 c6e:	b9 81       	ldd	r27, Y+1	; 0x01
 c70:	ce 0f       	add	r28, r30
 c72:	d1 1d       	adc	r29, r1
 c74:	0f b6       	in	r0, 0x3f	; 63
 c76:	f8 94       	cli
 c78:	de bf       	out	0x3e, r29	; 62
 c7a:	0f be       	out	0x3f, r0	; 63
 c7c:	cd bf       	out	0x3d, r28	; 61
 c7e:	ed 01       	movw	r28, r26
 c80:	08 95       	ret

00000c82 <_exit>:
 c82:	f8 94       	cli

00000c84 <__stop_program>:
 c84:	ff cf       	rjmp	.-2      	; 0xc84 <__stop_program>
