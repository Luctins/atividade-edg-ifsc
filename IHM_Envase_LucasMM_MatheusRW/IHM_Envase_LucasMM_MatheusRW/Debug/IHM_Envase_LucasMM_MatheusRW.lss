
IHM_Envase_LucasMM_MatheusRW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000012e  00800100  00000ef2  00000f86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ef2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  0080022e  0080022e  000010b4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000010b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001110  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00001150  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001cfb  00000000  00000000  000011b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000958  00000000  00000000  00002eab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bf7  00000000  00000000  00003803  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  000043fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000054f  00000000  00000000  000044c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f92  00000000  00000000  00004a13  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000059a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 39 04 	jmp	0x872	; 0x872 <__vector_1>
   8:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ef       	ldi	r30, 0xF2	; 242
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 32       	cpi	r26, 0x2E	; 46
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	ae e2       	ldi	r26, 0x2E	; 46
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 33       	cpi	r26, 0x36	; 54
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 0a 01 	call	0x214	; 0x214 <main>
  9e:	0c 94 77 07 	jmp	0xeee	; 0xeee <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <lcd_cmd>:
   send a single command to the display.
*/
void lcd_cmd(unsigned char c, /*!< command to send */
             cmdType_t cmd /*!< command to send */)
{
    switch(cmd) {
  a6:	66 23       	and	r22, r22
  a8:	19 f0       	breq	.+6      	; 0xb0 <lcd_cmd+0xa>
  aa:	61 30       	cpi	r22, 0x01	; 1
  ac:	19 f0       	breq	.+6      	; 0xb4 <lcd_cmd+0xe>
  ae:	03 c0       	rjmp	.+6      	; 0xb6 <lcd_cmd+0x10>
    case LCD_CMD:
        rst_bit(LCD_RS);
  b0:	59 98       	cbi	0x0b, 1	; 11
        break;
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <lcd_cmd+0x10>
    case LCD_CHAR:
        set_bit(LCD_RS);
  b4:	59 9a       	sbi	0x0b, 1	; 11

    /*send first nibble (high half) of data*/
#if USE_LOWER_NIBLE == 1
    LCD_PORT = (LCD_PORT & 0xf0) | ((c & 0xf0) >> 4);
#else
    LCD_PORT = (LCD_PORT & 0x0f) | (c & 0xf0);
  b6:	9b b1       	in	r25, 0x0b	; 11
  b8:	9f 70       	andi	r25, 0x0F	; 15
  ba:	28 2f       	mov	r18, r24
  bc:	20 7f       	andi	r18, 0xF0	; 240
  be:	92 2b       	or	r25, r18
  c0:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	45 e0       	ldi	r20, 0x05	; 5
  c4:	4a 95       	dec	r20
  c6:	f1 f7       	brne	.-4      	; 0xc4 <lcd_cmd+0x1e>
  c8:	00 00       	nop
#endif
    enable_pulse();
  ca:	58 9a       	sbi	0x0b, 0	; 11
  cc:	95 e0       	ldi	r25, 0x05	; 5
  ce:	9a 95       	dec	r25
  d0:	f1 f7       	brne	.-4      	; 0xce <lcd_cmd+0x28>
  d2:	00 00       	nop
  d4:	58 98       	cbi	0x0b, 0	; 11
  d6:	40 ef       	ldi	r20, 0xF0	; 240
  d8:	4a 95       	dec	r20
  da:	f1 f7       	brne	.-4      	; 0xd8 <lcd_cmd+0x32>

    /*send second (lower) nibble of data*/
#if USE_LOWER_NIBLE == 1
    LCD_PORT = (LCD_PORT & 0xf0) | (c & 0x0f);
#else
    LCD_PORT = (LCD_PORT & 0x0f) | ((c & 0x0f) << 4);
  dc:	2b b1       	in	r18, 0x0b	; 11
  de:	92 2f       	mov	r25, r18
  e0:	9f 70       	andi	r25, 0x0F	; 15
  e2:	40 e1       	ldi	r20, 0x10	; 16
  e4:	84 9f       	mul	r24, r20
  e6:	90 01       	movw	r18, r0
  e8:	11 24       	eor	r1, r1
  ea:	29 2b       	or	r18, r25
  ec:	2b b9       	out	0x0b, r18	; 11
  ee:	95 e0       	ldi	r25, 0x05	; 5
  f0:	9a 95       	dec	r25
  f2:	f1 f7       	brne	.-4      	; 0xf0 <lcd_cmd+0x4a>
  f4:	00 00       	nop
#endif
    enable_pulse();
  f6:	58 9a       	sbi	0x0b, 0	; 11
  f8:	45 e0       	ldi	r20, 0x05	; 5
  fa:	4a 95       	dec	r20
  fc:	f1 f7       	brne	.-4      	; 0xfa <lcd_cmd+0x54>
  fe:	00 00       	nop
 100:	58 98       	cbi	0x0b, 0	; 11
 102:	90 ef       	ldi	r25, 0xF0	; 240
 104:	9a 95       	dec	r25
 106:	f1 f7       	brne	.-4      	; 0x104 <lcd_cmd+0x5e>

    //wait if cmd is clear or return home (exec time ~1.52ms)
    if(c<4 && cmd == LCD_CMD)
 108:	84 30       	cpi	r24, 0x04	; 4
 10a:	40 f4       	brcc	.+16     	; 0x11c <lcd_cmd+0x76>
 10c:	61 11       	cpse	r22, r1
 10e:	06 c0       	rjmp	.+12     	; 0x11c <lcd_cmd+0x76>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 110:	8f e3       	ldi	r24, 0x3F	; 63
 112:	9f e1       	ldi	r25, 0x1F	; 31
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <lcd_cmd+0x6e>
 118:	00 c0       	rjmp	.+0      	; 0x11a <lcd_cmd+0x74>
 11a:	00 00       	nop
    {
        _delay_ms(2);
    }
    //set_bit(LCD_RS);
    LCD_PORT &= ~(LCD_DATA_MASK);
 11c:	8b b1       	in	r24, 0x0b	; 11
 11e:	8f 70       	andi	r24, 0x0F	; 15
 120:	8b b9       	out	0x0b, r24	; 11
 122:	08 95       	ret

00000124 <lcd_4bit_init>:
void lcd_4bit_init(void)
{

    /* reset lcd port bits and set RS low */
    //LCD_PORT &= 0x0f;
    rst_bit(LCD_RS);
 124:	59 98       	cbi	0x0b, 1	; 11
    rst_bit(LCD_EN);
 126:	58 98       	cbi	0x0b, 0	; 11
 128:	2f ef       	ldi	r18, 0xFF	; 255
 12a:	89 ef       	ldi	r24, 0xF9	; 249
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	21 50       	subi	r18, 0x01	; 1
 130:	80 40       	sbci	r24, 0x00	; 0
 132:	90 40       	sbci	r25, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <lcd_4bit_init+0xa>
 136:	00 c0       	rjmp	.+0      	; 0x138 <lcd_4bit_init+0x14>
 138:	00 00       	nop
       @see https://www.sparkfun.com/datasheets/LCD/HD44780.pdf
    */
#if USE_LOWER_NIBLE == 1
    LCD_PORT = (LCD_PORT & 0xf0) | 0x03;
#else
    LCD_PORT = (LCD_PORT & 0x0f) | 0x30;
 13a:	8b b1       	in	r24, 0x0b	; 11
 13c:	8f 70       	andi	r24, 0x0F	; 15
 13e:	80 63       	ori	r24, 0x30	; 48
 140:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 142:	25 e0       	ldi	r18, 0x05	; 5
 144:	2a 95       	dec	r18
 146:	f1 f7       	brne	.-4      	; 0x144 <lcd_4bit_init+0x20>
 148:	00 00       	nop
#endif
    enable_pulse();
 14a:	58 9a       	sbi	0x0b, 0	; 11
 14c:	85 e0       	ldi	r24, 0x05	; 5
 14e:	8a 95       	dec	r24
 150:	f1 f7       	brne	.-4      	; 0x14e <lcd_4bit_init+0x2a>
 152:	00 00       	nop
 154:	58 98       	cbi	0x0b, 0	; 11
 156:	90 ef       	ldi	r25, 0xF0	; 240
 158:	9a 95       	dec	r25
 15a:	f1 f7       	brne	.-4      	; 0x158 <lcd_4bit_init+0x34>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15c:	8f e1       	ldi	r24, 0x1F	; 31
 15e:	9e e4       	ldi	r25, 0x4E	; 78
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <lcd_4bit_init+0x3c>
 164:	00 c0       	rjmp	.+0      	; 0x166 <lcd_4bit_init+0x42>
 166:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 168:	95 e0       	ldi	r25, 0x05	; 5
 16a:	9a 95       	dec	r25
 16c:	f1 f7       	brne	.-4      	; 0x16a <lcd_4bit_init+0x46>
 16e:	00 00       	nop
    _delay_ms(5);
    enable_pulse();
 170:	58 9a       	sbi	0x0b, 0	; 11
 172:	25 e0       	ldi	r18, 0x05	; 5
 174:	2a 95       	dec	r18
 176:	f1 f7       	brne	.-4      	; 0x174 <lcd_4bit_init+0x50>
 178:	00 00       	nop
 17a:	58 98       	cbi	0x0b, 0	; 11
 17c:	80 ef       	ldi	r24, 0xF0	; 240
 17e:	8a 95       	dec	r24
 180:	f1 f7       	brne	.-4      	; 0x17e <lcd_4bit_init+0x5a>
 182:	8f e1       	ldi	r24, 0x1F	; 31
 184:	93 e0       	ldi	r25, 0x03	; 3
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <lcd_4bit_init+0x62>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <lcd_4bit_init+0x68>
 18c:	00 00       	nop
 18e:	95 e0       	ldi	r25, 0x05	; 5
 190:	9a 95       	dec	r25
 192:	f1 f7       	brne	.-4      	; 0x190 <lcd_4bit_init+0x6c>
 194:	00 00       	nop
    _delay_us(200);
    enable_pulse();
 196:	58 9a       	sbi	0x0b, 0	; 11
 198:	25 e0       	ldi	r18, 0x05	; 5
 19a:	2a 95       	dec	r18
 19c:	f1 f7       	brne	.-4      	; 0x19a <lcd_4bit_init+0x76>
 19e:	00 00       	nop
 1a0:	58 98       	cbi	0x0b, 0	; 11
 1a2:	80 ef       	ldi	r24, 0xF0	; 240
 1a4:	8a 95       	dec	r24
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <lcd_4bit_init+0x80>

#if USE_LOWER_NIBLE
    LCD_PORT = (LCD_PORT & 0xf0) | 0x02;
#else
    LCD_PORT = (LCD_PORT & 0x0f) | 0x20;
 1a8:	8b b1       	in	r24, 0x0b	; 11
 1aa:	8f 70       	andi	r24, 0x0F	; 15
 1ac:	80 62       	ori	r24, 0x20	; 32
 1ae:	8b b9       	out	0x0b, r24	; 11
 1b0:	95 e0       	ldi	r25, 0x05	; 5
 1b2:	9a 95       	dec	r25
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <lcd_4bit_init+0x8e>
 1b6:	00 00       	nop
#endif
    enable_pulse();
 1b8:	58 9a       	sbi	0x0b, 0	; 11
 1ba:	25 e0       	ldi	r18, 0x05	; 5
 1bc:	2a 95       	dec	r18
 1be:	f1 f7       	brne	.-4      	; 0x1bc <lcd_4bit_init+0x98>
 1c0:	00 00       	nop
 1c2:	58 98       	cbi	0x0b, 0	; 11
 1c4:	80 ef       	ldi	r24, 0xF0	; 240
 1c6:	8a 95       	dec	r24
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <lcd_4bit_init+0xa2>


    /* set interface 4 bits, 2 lines, 8 dots font  */
    lcd_cmd(0b00101000,LCD_CMD);
 1ca:	60 e0       	ldi	r22, 0x00	; 0
 1cc:	88 e2       	ldi	r24, 0x28	; 40
 1ce:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
    lcd_cmd(0x08,LCD_CMD); // turn off display
 1d2:	60 e0       	ldi	r22, 0x00	; 0
 1d4:	88 e0       	ldi	r24, 0x08	; 8
 1d6:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
    lcd_cmd(0x01,LCD_CMD); // clear display
 1da:	60 e0       	ldi	r22, 0x00	; 0
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
    lcd_cmd(0x0c,LCD_CMD); // turn displ. on, visible cursor, no blink
 1e2:	60 e0       	ldi	r22, 0x00	; 0
 1e4:	8c e0       	ldi	r24, 0x0C	; 12
 1e6:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
    lcd_cmd(0x80,LCD_CMD); //set CGRAM adress to 0 (1st position)
 1ea:	60 e0       	ldi	r22, 0x00	; 0
 1ec:	80 e8       	ldi	r24, 0x80	; 128
 1ee:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
 1f2:	08 95       	ret

000001f4 <lcd_write>:

/**
   write a string to the display.
 */
void lcd_write(const char * str)
{
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	ec 01       	movw	r28, r24
    for (;*str;++str)
 1fa:	88 81       	ld	r24, Y
 1fc:	88 23       	and	r24, r24
 1fe:	39 f0       	breq	.+14     	; 0x20e <lcd_write+0x1a>
 200:	21 96       	adiw	r28, 0x01	; 1
    {
        lcd_cmd(*str,LCD_CHAR);
 202:	61 e0       	ldi	r22, 0x01	; 1
 204:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
/**
   write a string to the display.
 */
void lcd_write(const char * str)
{
    for (;*str;++str)
 208:	89 91       	ld	r24, Y+
 20a:	81 11       	cpse	r24, r1
 20c:	fa cf       	rjmp	.-12     	; 0x202 <lcd_write+0xe>
    {
        lcd_cmd(*str,LCD_CHAR);
    }
}
 20e:	df 91       	pop	r29
 210:	cf 91       	pop	r28
 212:	08 95       	ret

00000214 <main>:
uint8_t lot_quantity = LOT_QUANTITY_DEFAULT;    //Caixas prontas no lote atual
uint8_t lot_number = LOT_NUMBER_DEFAULT;        //Número do lote (quantos lotes já foram feitos)

/*--------- Main ---------*/
int main(void)
{
 214:	cf 93       	push	r28
 216:	df 93       	push	r29
 218:	cd b7       	in	r28, 0x3d	; 61
 21a:	de b7       	in	r29, 0x3e	; 62
 21c:	63 97       	sbiw	r28, 0x13	; 19
 21e:	0f b6       	in	r0, 0x3f	; 63
 220:	f8 94       	cli
 222:	de bf       	out	0x3e, r29	; 62
 224:	0f be       	out	0x3f, r0	; 63
 226:	cd bf       	out	0x3d, r28	; 61
    //configure interrupts
    EICRA |= 0b00001010; //set INT0 and INT1 as falling edge
 228:	e9 e6       	ldi	r30, 0x69	; 105
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	80 81       	ld	r24, Z
 22e:	8a 60       	ori	r24, 0x0A	; 10
 230:	80 83       	st	Z, r24

    EIMSK |= 0x03; //enable INT 1 and 0
 232:	8d b3       	in	r24, 0x1d	; 29
 234:	83 60       	ori	r24, 0x03	; 3
 236:	8d bb       	out	0x1d, r24	; 29

    //set up pin directions
    DDRB = 0x00;
 238:	14 b8       	out	0x04, r1	; 4
    DDRC = 0b00111000;
 23a:	88 e3       	ldi	r24, 0x38	; 56
 23c:	87 b9       	out	0x07, r24	; 7
    DDRD = 0b11110011;
 23e:	83 ef       	ldi	r24, 0xF3	; 243
 240:	8a b9       	out	0x0a, r24	; 10
    __asm__("sei;");
 242:	78 94       	sei
    //sei();

    lcd_4bit_init();
 244:	0e 94 92 00 	call	0x124	; 0x124 <lcd_4bit_init>

    lcd_write("Booting");
 248:	8c e0       	ldi	r24, 0x0C	; 12
 24a:	91 e0       	ldi	r25, 0x01	; 1
 24c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 250:	2f ef       	ldi	r18, 0xFF	; 255
 252:	33 ec       	ldi	r19, 0xC3	; 195
 254:	89 e0       	ldi	r24, 0x09	; 9
 256:	21 50       	subi	r18, 0x01	; 1
 258:	30 40       	sbci	r19, 0x00	; 0
 25a:	80 40       	sbci	r24, 0x00	; 0
 25c:	e1 f7       	brne	.-8      	; 0x256 <main+0x42>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <main+0x4c>
 260:	00 00       	nop
    _delay_ms(200);
	lcd_write(".");
 262:	85 e1       	ldi	r24, 0x15	; 21
 264:	92 e0       	ldi	r25, 0x02	; 2
 266:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
 26a:	9f ef       	ldi	r25, 0xFF	; 255
 26c:	23 ec       	ldi	r18, 0xC3	; 195
 26e:	39 e0       	ldi	r19, 0x09	; 9
 270:	91 50       	subi	r25, 0x01	; 1
 272:	20 40       	sbci	r18, 0x00	; 0
 274:	30 40       	sbci	r19, 0x00	; 0
 276:	e1 f7       	brne	.-8      	; 0x270 <main+0x5c>
 278:	00 c0       	rjmp	.+0      	; 0x27a <main+0x66>
 27a:	00 00       	nop
	_delay_ms(200);
	lcd_write(".");
 27c:	85 e1       	ldi	r24, 0x15	; 21
 27e:	92 e0       	ldi	r25, 0x02	; 2
 280:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
 284:	8f ef       	ldi	r24, 0xFF	; 255
 286:	93 ec       	ldi	r25, 0xC3	; 195
 288:	29 e0       	ldi	r18, 0x09	; 9
 28a:	81 50       	subi	r24, 0x01	; 1
 28c:	90 40       	sbci	r25, 0x00	; 0
 28e:	20 40       	sbci	r18, 0x00	; 0
 290:	e1 f7       	brne	.-8      	; 0x28a <main+0x76>
 292:	00 c0       	rjmp	.+0      	; 0x294 <main+0x80>
 294:	00 00       	nop
	_delay_ms(200);
	lcd_write(".");
 296:	85 e1       	ldi	r24, 0x15	; 21
 298:	92 e0       	ldi	r25, 0x02	; 2
 29a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
 29e:	3f ef       	ldi	r19, 0xFF	; 255
 2a0:	83 ec       	ldi	r24, 0xC3	; 195
 2a2:	99 e0       	ldi	r25, 0x09	; 9
 2a4:	31 50       	subi	r19, 0x01	; 1
 2a6:	80 40       	sbci	r24, 0x00	; 0
 2a8:	90 40       	sbci	r25, 0x00	; 0
 2aa:	e1 f7       	brne	.-8      	; 0x2a4 <main+0x90>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <main+0x9a>
 2ae:	00 00       	nop
        case READY:
			lcd_move_cursor(0,0);
            lcd_write("Ready press STR");
            if (get_bit(STRT_STOP_BTN)==0)
            {
                major_state=RUN;
 2b0:	68 94       	set
 2b2:	66 24       	eor	r6, r6
 2b4:	62 f8       	bld	r6, 2
            do
            {
                lcd_move_cursor(0,0);
                lcd_write("Cycle Count:");
                lcd_move_cursor(0, 1);
                snprintf(n_buff, 4, "%02i", lot_size);
 2b6:	0f 2e       	mov	r0, r31
 2b8:	f0 e5       	ldi	r31, 0x50	; 80
 2ba:	cf 2e       	mov	r12, r31
 2bc:	f1 e0       	ldi	r31, 0x01	; 1
 2be:	df 2e       	mov	r13, r31
 2c0:	f0 2d       	mov	r31, r0
 2c2:	9e 01       	movw	r18, r28
 2c4:	2f 5f       	subi	r18, 0xFF	; 255
 2c6:	3f 4f       	sbci	r19, 0xFF	; 255
 2c8:	3b 8b       	std	Y+19, r19	; 0x13
 2ca:	2a 8b       	std	Y+18, r18	; 0x12
 2cc:	7a 88       	ldd	r7, Y+18	; 0x12
 2ce:	8b 88       	ldd	r8, Y+19	; 0x13
            do
            {
                lcd_move_cursor(0,0);
                lcd_write("Delay:");
                lcd_move_cursor(0, 1);
                snprintf(n_buff, 5, "%02i s", fill_delay);
 2d0:	0f 2e       	mov	r0, r31
 2d2:	fc e5       	ldi	r31, 0x5C	; 92
 2d4:	ef 2e       	mov	r14, r31
 2d6:	f1 e0       	ldi	r31, 0x01	; 1
 2d8:	ff 2e       	mov	r15, r31
 2da:	f0 2d       	mov	r31, r0
 2dc:	0f 2e       	mov	r0, r31
 2de:	f5 e0       	ldi	r31, 0x05	; 5
 2e0:	5f 2e       	mov	r5, r31
 2e2:	f0 2d       	mov	r31, r0
                    _delay_ms(50);
                    while(!get_bit(UP_BTN)); //wait button release
                }
                //decrement lot size
                else if (!get_bit(DWN_BTN)) {
                    lot_size = lot_size == 1 ? 24 : lot_size - 1;
 2e4:	0f 2e       	mov	r0, r31
 2e6:	f8 e1       	ldi	r31, 0x18	; 24
 2e8:	4f 2e       	mov	r4, r31
 2ea:	f0 2d       	mov	r31, r0
            break;
        case RUN:
            ;
            //Segunda linha do LCD, status do lote:
            char buff[17];
            snprintf(buff,17, "Lot %02i, box %02i ",lot_number,lot_quantity+1);
 2ec:	0f 2e       	mov	r0, r31
 2ee:	f3 e7       	ldi	r31, 0x73	; 115
 2f0:	2f 2e       	mov	r2, r31
 2f2:	f1 e0       	ldi	r31, 0x01	; 1
 2f4:	3f 2e       	mov	r3, r31
 2f6:	f0 2d       	mov	r31, r0
	lcd_write(".");
	_delay_ms(200);
	lcd_write(".");
	_delay_ms(200);
    while(1) {
        switch(major_state) {
 2f8:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <major_state>
 2fc:	82 30       	cpi	r24, 0x02	; 2
 2fe:	09 f4       	brne	.+2      	; 0x302 <main+0xee>
 300:	bf c0       	rjmp	.+382    	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 302:	28 f4       	brcc	.+10     	; 0x30e <main+0xfa>
 304:	88 23       	and	r24, r24
 306:	61 f0       	breq	.+24     	; 0x320 <main+0x10c>
 308:	81 30       	cpi	r24, 0x01	; 1
 30a:	09 f1       	breq	.+66     	; 0x34e <main+0x13a>
 30c:	96 c2       	rjmp	.+1324   	; 0x83a <__LOCK_REGION_LENGTH__+0x43a>
 30e:	84 30       	cpi	r24, 0x04	; 4
 310:	09 f4       	brne	.+2      	; 0x314 <main+0x100>
 312:	c6 c1       	rjmp	.+908    	; 0x6a0 <__LOCK_REGION_LENGTH__+0x2a0>
 314:	08 f4       	brcc	.+2      	; 0x318 <main+0x104>
 316:	b7 c1       	rjmp	.+878    	; 0x686 <__LOCK_REGION_LENGTH__+0x286>
 318:	85 30       	cpi	r24, 0x05	; 5
 31a:	09 f4       	brne	.+2      	; 0x31e <main+0x10a>
 31c:	85 c2       	rjmp	.+1290   	; 0x828 <__LOCK_REGION_LENGTH__+0x428>
 31e:	8d c2       	rjmp	.+1306   	; 0x83a <__LOCK_REGION_LENGTH__+0x43a>
        case START:
            run_state = WAITING;
 320:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <run_state>
            rst_bit(CYL_A);
 324:	43 98       	cbi	0x08, 3	; 8
            rst_bit(CYL_B);
 326:	44 98       	cbi	0x08, 4	; 8
            set_bit(CYL_C);
 328:	45 9a       	sbi	0x08, 5	; 8
void lcd_4bit_init(void);
void lcd_cmd(unsigned char c, cmdType_t type);

inline void lcd_move_cursor(uint8_t c, uint8_t l)
{
    lcd_cmd(0x80 + (c < 0x0f ? c : 0x0f ) + (l > 0 ? 0x40 : 0), LCD_CMD);
 32a:	60 e0       	ldi	r22, 0x00	; 0
 32c:	80 e8       	ldi	r24, 0x80	; 128
 32e:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
            lcd_move_cursor(0,0);
            lcd_write("Wait start pos.");
 332:	84 e1       	ldi	r24, 0x14	; 20
 334:	91 e0       	ldi	r25, 0x01	; 1
 336:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
            if(!(get_bit(A_0) || get_bit(B_0) || get_bit(C_1))) {
 33a:	18 99       	sbic	0x03, 0	; 3
 33c:	86 c2       	rjmp	.+1292   	; 0x84a <__LOCK_REGION_LENGTH__+0x44a>
 33e:	1a 99       	sbic	0x03, 2	; 3
 340:	84 c2       	rjmp	.+1288   	; 0x84a <__LOCK_REGION_LENGTH__+0x44a>
 342:	1d 99       	sbic	0x03, 5	; 3
 344:	82 c2       	rjmp	.+1284   	; 0x84a <__LOCK_REGION_LENGTH__+0x44a>
                major_state = PWD;
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <major_state>
 34c:	7e c2       	rjmp	.+1276   	; 0x84a <__LOCK_REGION_LENGTH__+0x44a>
            }
            break;
        case PWD:
            lcd_clear();
 34e:	60 e0       	ldi	r22, 0x00	; 0
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
            uint8_t curr_opt = 0;
            uint8_t pwd_pos = 0;
            memcpy(pwd_buff, "0   \0", 5);
 356:	85 e0       	ldi	r24, 0x05	; 5
 358:	e6 e0       	ldi	r30, 0x06	; 6
 35a:	f1 e0       	ldi	r31, 0x01	; 1
 35c:	af e2       	ldi	r26, 0x2F	; 47
 35e:	b2 e0       	ldi	r27, 0x02	; 2
 360:	01 90       	ld	r0, Z+
 362:	0d 92       	st	X+, r0
 364:	8a 95       	dec	r24
 366:	e1 f7       	brne	.-8      	; 0x360 <main+0x14c>
            }
            break;
        case PWD:
            lcd_clear();
            uint8_t curr_opt = 0;
            uint8_t pwd_pos = 0;
 368:	00 e0       	ldi	r16, 0x00	; 0
                major_state = PWD;
            }
            break;
        case PWD:
            lcd_clear();
            uint8_t curr_opt = 0;
 36a:	10 e0       	ldi	r17, 0x00	; 0
 36c:	60 e0       	ldi	r22, 0x00	; 0
 36e:	80 e8       	ldi	r24, 0x80	; 128
 370:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
            uint8_t pwd_pos = 0;
            memcpy(pwd_buff, "0   \0", 5);
            while(1)
            {
                lcd_move_cursor(0,0);
                lcd_write(pwd_txt);
 374:	84 e2       	ldi	r24, 0x24	; 36
 376:	92 e0       	ldi	r25, 0x02	; 2
 378:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
 37c:	60 e0       	ldi	r22, 0x00	; 0
 37e:	80 ec       	ldi	r24, 0xC0	; 192
 380:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
                lcd_move_cursor(0, 1);
                pwd_buff[pwd_pos] = '0' + curr_opt;
 384:	e0 2f       	mov	r30, r16
 386:	f0 e0       	ldi	r31, 0x00	; 0
 388:	e1 5d       	subi	r30, 0xD1	; 209
 38a:	fd 4f       	sbci	r31, 0xFD	; 253
 38c:	80 e3       	ldi	r24, 0x30	; 48
 38e:	81 0f       	add	r24, r17
 390:	80 83       	st	Z, r24
                lcd_write(pwd_buff);
 392:	8f e2       	ldi	r24, 0x2F	; 47
 394:	92 e0       	ldi	r25, 0x02	; 2
 396:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
                while(get_bit(UP_BTN) && get_bit(DWN_BTN) && get_bit(ENTR_BTN)) {
 39a:	1f 9b       	sbis	0x03, 7	; 3
 39c:	04 c0       	rjmp	.+8      	; 0x3a6 <main+0x192>
 39e:	30 9b       	sbis	0x06, 0	; 6
 3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <main+0x192>
 3a2:	31 99       	sbic	0x06, 1	; 6
 3a4:	fa cf       	rjmp	.-12     	; 0x39a <main+0x186>
                    //draw_idle();
                }

                if(!get_bit(UP_BTN)) {
 3a6:	1f 99       	sbic	0x03, 7	; 3
 3a8:	11 c0       	rjmp	.+34     	; 0x3cc <main+0x1b8>
                    curr_opt = curr_opt >= 9 ? 0 : curr_opt + 1;
 3aa:	19 30       	cpi	r17, 0x09	; 9
 3ac:	10 f4       	brcc	.+4      	; 0x3b2 <main+0x19e>
 3ae:	1f 5f       	subi	r17, 0xFF	; 255
 3b0:	01 c0       	rjmp	.+2      	; 0x3b4 <main+0x1a0>
 3b2:	10 e0       	ldi	r17, 0x00	; 0
 3b4:	3f ef       	ldi	r19, 0xFF	; 255
 3b6:	80 e7       	ldi	r24, 0x70	; 112
 3b8:	92 e0       	ldi	r25, 0x02	; 2
 3ba:	31 50       	subi	r19, 0x01	; 1
 3bc:	80 40       	sbci	r24, 0x00	; 0
 3be:	90 40       	sbci	r25, 0x00	; 0
 3c0:	e1 f7       	brne	.-8      	; 0x3ba <main+0x1a6>
 3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <main+0x1b0>
 3c4:	00 00       	nop
                    _delay_ms(50);
                    while(!get_bit(UP_BTN)); //wait button release
 3c6:	1f 9b       	sbis	0x03, 7	; 3
 3c8:	fe cf       	rjmp	.-4      	; 0x3c6 <main+0x1b2>
 3ca:	d0 cf       	rjmp	.-96     	; 0x36c <main+0x158>
                } else if (!get_bit(DWN_BTN)) {
 3cc:	30 99       	sbic	0x06, 0	; 6
 3ce:	11 c0       	rjmp	.+34     	; 0x3f2 <main+0x1de>
                    curr_opt = curr_opt == 0 ? 9 : curr_opt - 1;
 3d0:	11 23       	and	r17, r17
 3d2:	11 f0       	breq	.+4      	; 0x3d8 <main+0x1c4>
 3d4:	11 50       	subi	r17, 0x01	; 1
 3d6:	01 c0       	rjmp	.+2      	; 0x3da <main+0x1c6>
 3d8:	19 e0       	ldi	r17, 0x09	; 9
 3da:	2f ef       	ldi	r18, 0xFF	; 255
 3dc:	30 e7       	ldi	r19, 0x70	; 112
 3de:	82 e0       	ldi	r24, 0x02	; 2
 3e0:	21 50       	subi	r18, 0x01	; 1
 3e2:	30 40       	sbci	r19, 0x00	; 0
 3e4:	80 40       	sbci	r24, 0x00	; 0
 3e6:	e1 f7       	brne	.-8      	; 0x3e0 <main+0x1cc>
 3e8:	00 c0       	rjmp	.+0      	; 0x3ea <main+0x1d6>
 3ea:	00 00       	nop
                    _delay_ms(50);
                    while(!get_bit(DWN_BTN)); //wait button release
 3ec:	30 9b       	sbis	0x06, 0	; 6
 3ee:	fe cf       	rjmp	.-4      	; 0x3ec <main+0x1d8>
 3f0:	bd cf       	rjmp	.-134    	; 0x36c <main+0x158>
                } else if (!get_bit(ENTR_BTN)) {
 3f2:	31 99       	sbic	0x06, 1	; 6
 3f4:	bb cf       	rjmp	.-138    	; 0x36c <main+0x158>
                    if(pwd_pos == PWD_LEN-1)
 3f6:	03 30       	cpi	r16, 0x03	; 3
 3f8:	b1 f5       	brne	.+108    	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
                    {
                        //check password match
                        if(strncmp(PWD_DEFAULT, pwd_buff, 4) == 0) {
 3fa:	44 e0       	ldi	r20, 0x04	; 4
 3fc:	50 e0       	ldi	r21, 0x00	; 0
 3fe:	6f e2       	ldi	r22, 0x2F	; 47
 400:	72 e0       	ldi	r23, 0x02	; 2
 402:	84 e2       	ldi	r24, 0x24	; 36
 404:	91 e0       	ldi	r25, 0x01	; 1
 406:	0e 94 71 04 	call	0x8e2	; 0x8e2 <strncmp>
 40a:	89 2b       	or	r24, r25
 40c:	41 f4       	brne	.+16     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
                            major_state = CONFIG;
 40e:	82 e0       	ldi	r24, 0x02	; 2
 410:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <major_state>
                            lcd_clear();
 414:	60 e0       	ldi	r22, 0x00	; 0
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
                            break;
 41c:	31 c0       	rjmp	.+98     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 41e:	60 e0       	ldi	r22, 0x00	; 0
 420:	80 ec       	ldi	r24, 0xC0	; 192
 422:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
                        }
                        //wrong password
                        else {
                            lcd_move_cursor(0, 1);
                            lcd_write("Wrong passwd");
 426:	89 e2       	ldi	r24, 0x29	; 41
 428:	91 e0       	ldi	r25, 0x01	; 1
 42a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
 42e:	9f ef       	ldi	r25, 0xFF	; 255
 430:	23 ed       	ldi	r18, 0xD3	; 211
 432:	30 e3       	ldi	r19, 0x30	; 48
 434:	91 50       	subi	r25, 0x01	; 1
 436:	20 40       	sbci	r18, 0x00	; 0
 438:	30 40       	sbci	r19, 0x00	; 0
 43a:	e1 f7       	brne	.-8      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 43c:	00 c0       	rjmp	.+0      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 43e:	00 00       	nop
                            _delay_ms(1000);
                            lcd_clear();
 440:	60 e0       	ldi	r22, 0x00	; 0
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
 448:	60 e0       	ldi	r22, 0x00	; 0
 44a:	80 ec       	ldi	r24, 0xC0	; 192
 44c:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
                            lcd_move_cursor(0, 1);
                            memcpy(pwd_buff, "0   \0", 5);
 450:	85 e0       	ldi	r24, 0x05	; 5
 452:	e6 e0       	ldi	r30, 0x06	; 6
 454:	f1 e0       	ldi	r31, 0x01	; 1
 456:	af e2       	ldi	r26, 0x2F	; 47
 458:	b2 e0       	ldi	r27, 0x02	; 2
 45a:	01 90       	ld	r0, Z+
 45c:	0d 92       	st	X+, r0
 45e:	8a 95       	dec	r24
 460:	e1 f7       	brne	.-8      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
                            pwd_pos = 0;
 462:	00 e0       	ldi	r16, 0x00	; 0
 464:	01 c0       	rjmp	.+2      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
                        }
                    }
                    else {
                        //pwd_buff[pwd_pos] = '0' + curr_opt;
                        ++pwd_pos;
 466:	0f 5f       	subi	r16, 0xFF	; 255
                    }
                    while(!get_bit(ENTR_BTN)); //wait for button release
 468:	31 9b       	sbis	0x06, 1	; 6
 46a:	fe cf       	rjmp	.-4      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 46c:	8f ef       	ldi	r24, 0xFF	; 255
 46e:	90 e7       	ldi	r25, 0x70	; 112
 470:	22 e0       	ldi	r18, 0x02	; 2
 472:	81 50       	subi	r24, 0x01	; 1
 474:	90 40       	sbci	r25, 0x00	; 0
 476:	20 40       	sbci	r18, 0x00	; 0
 478:	e1 f7       	brne	.-8      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 47a:	00 c0       	rjmp	.+0      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 47c:	00 00       	nop
 47e:	76 cf       	rjmp	.-276    	; 0x36c <main+0x158>
 480:	60 e0       	ldi	r22, 0x00	; 0
 482:	80 e8       	ldi	r24, 0x80	; 128
 484:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
                    _delay_ms(50);
                }
            }
        case CONFIG:
            lcd_move_cursor(0,0);
            lcd_write("Conf. param.");
 488:	86 e3       	ldi	r24, 0x36	; 54
 48a:	91 e0       	ldi	r25, 0x01	; 1
 48c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
 490:	3f ef       	ldi	r19, 0xFF	; 255
 492:	89 e6       	ldi	r24, 0x69	; 105
 494:	98 e1       	ldi	r25, 0x18	; 24
 496:	31 50       	subi	r19, 0x01	; 1
 498:	80 40       	sbci	r24, 0x00	; 0
 49a:	90 40       	sbci	r25, 0x00	; 0
 49c:	e1 f7       	brne	.-8      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 49e:	00 c0       	rjmp	.+0      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 4a0:	00 00       	nop
            _delay_ms(500);
            lcd_clear();
 4a2:	60 e0       	ldi	r22, 0x00	; 0
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
                while(get_bit(UP_BTN) && get_bit(DWN_BTN) && get_bit(ENTR_BTN)) {
                    //draw_idle();
                }
                // increment lot amount
                if(!get_bit(UP_BTN)) {
                    lot_size = lot_size >= 24 ? 1 : lot_size + 1;
 4aa:	bb 24       	eor	r11, r11
 4ac:	b3 94       	inc	r11
 4ae:	60 e0       	ldi	r22, 0x00	; 0
 4b0:	80 e8       	ldi	r24, 0x80	; 128
 4b2:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
            char n_buff[5];
            char ok = 0;
            do
            {
                lcd_move_cursor(0,0);
                lcd_write("Cycle Count:");
 4b6:	83 e4       	ldi	r24, 0x43	; 67
 4b8:	91 e0       	ldi	r25, 0x01	; 1
 4ba:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
 4be:	60 e0       	ldi	r22, 0x00	; 0
 4c0:	80 ec       	ldi	r24, 0xC0	; 192
 4c2:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
                lcd_move_cursor(0, 1);
                snprintf(n_buff, 4, "%02i", lot_size);
 4c6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <lot_size>
 4ca:	1f 92       	push	r1
 4cc:	8f 93       	push	r24
 4ce:	df 92       	push	r13
 4d0:	cf 92       	push	r12
 4d2:	1f 92       	push	r1
 4d4:	6f 92       	push	r6
 4d6:	21 e0       	ldi	r18, 0x01	; 1
 4d8:	30 e0       	ldi	r19, 0x00	; 0
 4da:	2c 0f       	add	r18, r28
 4dc:	3d 1f       	adc	r19, r29
 4de:	3f 93       	push	r19
 4e0:	2f 93       	push	r18
 4e2:	0e 94 7f 04 	call	0x8fe	; 0x8fe <snprintf>
                lcd_write(n_buff);
 4e6:	87 2d       	mov	r24, r7
 4e8:	98 2d       	mov	r25, r8
 4ea:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>

                while(get_bit(UP_BTN) && get_bit(DWN_BTN) && get_bit(ENTR_BTN)) {
 4ee:	0f b6       	in	r0, 0x3f	; 63
 4f0:	f8 94       	cli
 4f2:	de bf       	out	0x3e, r29	; 62
 4f4:	0f be       	out	0x3f, r0	; 63
 4f6:	cd bf       	out	0x3d, r28	; 61
 4f8:	1f 9b       	sbis	0x03, 7	; 3
 4fa:	04 c0       	rjmp	.+8      	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
 4fc:	30 9b       	sbis	0x06, 0	; 6
 4fe:	02 c0       	rjmp	.+4      	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
 500:	31 99       	sbic	0x06, 1	; 6
 502:	fa cf       	rjmp	.-12     	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
                    //draw_idle();
                }
                // increment lot amount
                if(!get_bit(UP_BTN)) {
 504:	1f 99       	sbic	0x03, 7	; 3
 506:	15 c0       	rjmp	.+42     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
                    lot_size = lot_size >= 24 ? 1 : lot_size + 1;
 508:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <lot_size>
 50c:	88 31       	cpi	r24, 0x18	; 24
 50e:	10 f4       	brcc	.+4      	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
 510:	8f 5f       	subi	r24, 0xFF	; 255
 512:	01 c0       	rjmp	.+2      	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
 514:	8b 2d       	mov	r24, r11
 516:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <lot_size>
 51a:	9f ef       	ldi	r25, 0xFF	; 255
 51c:	20 e7       	ldi	r18, 0x70	; 112
 51e:	32 e0       	ldi	r19, 0x02	; 2
 520:	91 50       	subi	r25, 0x01	; 1
 522:	20 40       	sbci	r18, 0x00	; 0
 524:	30 40       	sbci	r19, 0x00	; 0
 526:	e1 f7       	brne	.-8      	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
 528:	00 c0       	rjmp	.+0      	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
 52a:	00 00       	nop
                    _delay_ms(50);
                    while(!get_bit(UP_BTN)); //wait button release
 52c:	1f 9b       	sbis	0x03, 7	; 3
 52e:	fe cf       	rjmp	.-4      	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
 530:	be cf       	rjmp	.-132    	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
                }
                //decrement lot size
                else if (!get_bit(DWN_BTN)) {
 532:	30 99       	sbic	0x06, 0	; 6
 534:	15 c0       	rjmp	.+42     	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
                    lot_size = lot_size == 1 ? 24 : lot_size - 1;
 536:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <lot_size>
 53a:	81 30       	cpi	r24, 0x01	; 1
 53c:	11 f0       	breq	.+4      	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
 53e:	81 50       	subi	r24, 0x01	; 1
 540:	01 c0       	rjmp	.+2      	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
 542:	84 2d       	mov	r24, r4
 544:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <lot_size>
 548:	8f ef       	ldi	r24, 0xFF	; 255
 54a:	90 e7       	ldi	r25, 0x70	; 112
 54c:	22 e0       	ldi	r18, 0x02	; 2
 54e:	81 50       	subi	r24, 0x01	; 1
 550:	90 40       	sbci	r25, 0x00	; 0
 552:	20 40       	sbci	r18, 0x00	; 0
 554:	e1 f7       	brne	.-8      	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
 556:	00 c0       	rjmp	.+0      	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
 558:	00 00       	nop
                    _delay_ms(50);
                    while(!get_bit(DWN_BTN)); //wait button release
 55a:	30 9b       	sbis	0x06, 0	; 6
 55c:	fe cf       	rjmp	.-4      	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
 55e:	a7 cf       	rjmp	.-178    	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
                }
                //confirm
                else if (!get_bit(ENTR_BTN)) {
 560:	31 99       	sbic	0x06, 1	; 6
 562:	a5 cf       	rjmp	.-182    	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
 564:	3f ef       	ldi	r19, 0xFF	; 255
 566:	80 e7       	ldi	r24, 0x70	; 112
 568:	92 e0       	ldi	r25, 0x02	; 2
 56a:	31 50       	subi	r19, 0x01	; 1
 56c:	80 40       	sbci	r24, 0x00	; 0
 56e:	90 40       	sbci	r25, 0x00	; 0
 570:	e1 f7       	brne	.-8      	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
 572:	00 c0       	rjmp	.+0      	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
 574:	00 00       	nop
                    ok = 1;
                    _delay_ms(50);
                    while(!get_bit(ENTR_BTN)); //wait for button release
 576:	31 9b       	sbis	0x06, 1	; 6
 578:	fe cf       	rjmp	.-4      	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
                }
            } while(!ok);
            ok = 0;
            char fill_delay = 1;
			lcd_clear();
 57a:	60 e0       	ldi	r22, 0x00	; 0
 57c:	81 e0       	ldi	r24, 0x01	; 1
 57e:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
                    _delay_ms(50);
                    while(!get_bit(ENTR_BTN)); //wait for button release
                }
            } while(!ok);
            ok = 0;
            char fill_delay = 1;
 582:	99 24       	eor	r9, r9
 584:	93 94       	inc	r9
 586:	60 e0       	ldi	r22, 0x00	; 0
 588:	80 e8       	ldi	r24, 0x80	; 128
 58a:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
			lcd_clear();
            do
            {
                lcd_move_cursor(0,0);
                lcd_write("Delay:");
 58e:	85 e5       	ldi	r24, 0x55	; 85
 590:	91 e0       	ldi	r25, 0x01	; 1
 592:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
 596:	60 e0       	ldi	r22, 0x00	; 0
 598:	80 ec       	ldi	r24, 0xC0	; 192
 59a:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
                lcd_move_cursor(0, 1);
                snprintf(n_buff, 5, "%02i s", fill_delay);
 59e:	a9 2c       	mov	r10, r9
 5a0:	b1 2c       	mov	r11, r1
 5a2:	1f 92       	push	r1
 5a4:	9f 92       	push	r9
 5a6:	ff 92       	push	r15
 5a8:	ef 92       	push	r14
 5aa:	1f 92       	push	r1
 5ac:	5f 92       	push	r5
 5ae:	21 e0       	ldi	r18, 0x01	; 1
 5b0:	30 e0       	ldi	r19, 0x00	; 0
 5b2:	2c 0f       	add	r18, r28
 5b4:	3d 1f       	adc	r19, r29
 5b6:	3f 93       	push	r19
 5b8:	2f 93       	push	r18
 5ba:	0e 94 7f 04 	call	0x8fe	; 0x8fe <snprintf>
                lcd_write(n_buff);
 5be:	87 2d       	mov	r24, r7
 5c0:	98 2d       	mov	r25, r8
 5c2:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>

                while(get_bit(UP_BTN) && get_bit(DWN_BTN) && get_bit(ENTR_BTN)) {
 5c6:	0f b6       	in	r0, 0x3f	; 63
 5c8:	f8 94       	cli
 5ca:	de bf       	out	0x3e, r29	; 62
 5cc:	0f be       	out	0x3f, r0	; 63
 5ce:	cd bf       	out	0x3d, r28	; 61
 5d0:	1f 9b       	sbis	0x03, 7	; 3
 5d2:	04 c0       	rjmp	.+8      	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
 5d4:	30 9b       	sbis	0x06, 0	; 6
 5d6:	02 c0       	rjmp	.+4      	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
 5d8:	31 99       	sbic	0x06, 1	; 6
 5da:	fa cf       	rjmp	.-12     	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
                    //draw_idle();
                }
                // increment lot amount
                if(!get_bit(UP_BTN)) {
 5dc:	1f 99       	sbic	0x03, 7	; 3
 5de:	13 c0       	rjmp	.+38     	; 0x606 <__LOCK_REGION_LENGTH__+0x206>
                    fill_delay = fill_delay >= 99 ? 1 : fill_delay + 1;
 5e0:	92 e6       	ldi	r25, 0x62	; 98
 5e2:	99 15       	cp	r25, r9
 5e4:	10 f0       	brcs	.+4      	; 0x5ea <__LOCK_REGION_LENGTH__+0x1ea>
 5e6:	93 94       	inc	r9
 5e8:	02 c0       	rjmp	.+4      	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
 5ea:	99 24       	eor	r9, r9
 5ec:	93 94       	inc	r9
 5ee:	2f ef       	ldi	r18, 0xFF	; 255
 5f0:	30 e7       	ldi	r19, 0x70	; 112
 5f2:	82 e0       	ldi	r24, 0x02	; 2
 5f4:	21 50       	subi	r18, 0x01	; 1
 5f6:	30 40       	sbci	r19, 0x00	; 0
 5f8:	80 40       	sbci	r24, 0x00	; 0
 5fa:	e1 f7       	brne	.-8      	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
 5fc:	00 c0       	rjmp	.+0      	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
 5fe:	00 00       	nop
                    _delay_ms(50);
                    while(!get_bit(UP_BTN)); //wait button release
 600:	1f 9b       	sbis	0x03, 7	; 3
 602:	fe cf       	rjmp	.-4      	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
 604:	c0 cf       	rjmp	.-128    	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
                }
                //decrement lot size
                else if (!get_bit(DWN_BTN)) {
 606:	30 99       	sbic	0x06, 0	; 6
 608:	15 c0       	rjmp	.+42     	; 0x634 <__LOCK_REGION_LENGTH__+0x234>
                    fill_delay = fill_delay == 1 ? 99 : fill_delay - 1;
 60a:	91 e0       	ldi	r25, 0x01	; 1
 60c:	99 16       	cp	r9, r25
 60e:	11 f0       	breq	.+4      	; 0x614 <__LOCK_REGION_LENGTH__+0x214>
 610:	9a 94       	dec	r9
 612:	04 c0       	rjmp	.+8      	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
 614:	0f 2e       	mov	r0, r31
 616:	f3 e6       	ldi	r31, 0x63	; 99
 618:	9f 2e       	mov	r9, r31
 61a:	f0 2d       	mov	r31, r0
 61c:	2f ef       	ldi	r18, 0xFF	; 255
 61e:	30 e7       	ldi	r19, 0x70	; 112
 620:	82 e0       	ldi	r24, 0x02	; 2
 622:	21 50       	subi	r18, 0x01	; 1
 624:	30 40       	sbci	r19, 0x00	; 0
 626:	80 40       	sbci	r24, 0x00	; 0
 628:	e1 f7       	brne	.-8      	; 0x622 <__LOCK_REGION_LENGTH__+0x222>
 62a:	00 c0       	rjmp	.+0      	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>
 62c:	00 00       	nop
                    _delay_ms(50);
                    while(!get_bit(DWN_BTN)); //wait button release
 62e:	30 9b       	sbis	0x06, 0	; 6
 630:	fe cf       	rjmp	.-4      	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
 632:	a9 cf       	rjmp	.-174    	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
                }
                //confirm
                else if (!get_bit(ENTR_BTN)) {
 634:	31 99       	sbic	0x06, 1	; 6
 636:	a7 cf       	rjmp	.-178    	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
                    ok = 1;
                    fill_delay_ms = 1000 * fill_delay;
 638:	28 ee       	ldi	r18, 0xE8	; 232
 63a:	33 e0       	ldi	r19, 0x03	; 3
 63c:	a2 9e       	mul	r10, r18
 63e:	c0 01       	movw	r24, r0
 640:	a3 9e       	mul	r10, r19
 642:	90 0d       	add	r25, r0
 644:	b2 9e       	mul	r11, r18
 646:	90 0d       	add	r25, r0
 648:	11 24       	eor	r1, r1
 64a:	09 2e       	mov	r0, r25
 64c:	00 0c       	add	r0, r0
 64e:	aa 0b       	sbc	r26, r26
 650:	bb 0b       	sbc	r27, r27
 652:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <fill_delay_ms>
 656:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <fill_delay_ms+0x1>
 65a:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <fill_delay_ms+0x2>
 65e:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <fill_delay_ms+0x3>
 662:	3f ef       	ldi	r19, 0xFF	; 255
 664:	80 e7       	ldi	r24, 0x70	; 112
 666:	92 e0       	ldi	r25, 0x02	; 2
 668:	31 50       	subi	r19, 0x01	; 1
 66a:	80 40       	sbci	r24, 0x00	; 0
 66c:	90 40       	sbci	r25, 0x00	; 0
 66e:	e1 f7       	brne	.-8      	; 0x668 <__LOCK_REGION_LENGTH__+0x268>
 670:	00 c0       	rjmp	.+0      	; 0x672 <__LOCK_REGION_LENGTH__+0x272>
 672:	00 00       	nop
                    _delay_ms(50);
                    while(!get_bit(ENTR_BTN)); //wait for button release
 674:	31 9b       	sbis	0x06, 1	; 6
 676:	fe cf       	rjmp	.-4      	; 0x674 <__LOCK_REGION_LENGTH__+0x274>
                }
            } while(!ok);
			lcd_clear();
 678:	60 e0       	ldi	r22, 0x00	; 0
 67a:	81 e0       	ldi	r24, 0x01	; 1
 67c:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
            major_state=READY;
 680:	83 e0       	ldi	r24, 0x03	; 3
 682:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <major_state>
 686:	60 e0       	ldi	r22, 0x00	; 0
 688:	80 e8       	ldi	r24, 0x80	; 128
 68a:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
        case READY:
			lcd_move_cursor(0,0);
            lcd_write("Ready press STR");
 68e:	83 e6       	ldi	r24, 0x63	; 99
 690:	91 e0       	ldi	r25, 0x01	; 1
 692:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
            if (get_bit(STRT_STOP_BTN)==0)
 696:	32 99       	sbic	0x06, 2	; 6
 698:	d8 c0       	rjmp	.+432    	; 0x84a <__LOCK_REGION_LENGTH__+0x44a>
            {
                major_state=RUN;
 69a:	60 92 35 02 	sts	0x0235, r6	; 0x800235 <major_state>
 69e:	d5 c0       	rjmp	.+426    	; 0x84a <__LOCK_REGION_LENGTH__+0x44a>
            break;
        case RUN:
            ;
            //Segunda linha do LCD, status do lote:
            char buff[17];
            snprintf(buff,17, "Lot %02i, box %02i ",lot_number,lot_quantity+1);
 6a0:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <__data_end>
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	01 96       	adiw	r24, 0x01	; 1
 6a8:	9f 93       	push	r25
 6aa:	8f 93       	push	r24
 6ac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 6b0:	1f 92       	push	r1
 6b2:	8f 93       	push	r24
 6b4:	3f 92       	push	r3
 6b6:	2f 92       	push	r2
 6b8:	1f 92       	push	r1
 6ba:	81 e1       	ldi	r24, 0x11	; 17
 6bc:	8f 93       	push	r24
 6be:	21 e0       	ldi	r18, 0x01	; 1
 6c0:	30 e0       	ldi	r19, 0x00	; 0
 6c2:	2c 0f       	add	r18, r28
 6c4:	3d 1f       	adc	r19, r29
 6c6:	3f 93       	push	r19
 6c8:	2f 93       	push	r18
 6ca:	0e 94 7f 04 	call	0x8fe	; 0x8fe <snprintf>
 6ce:	60 e0       	ldi	r22, 0x00	; 0
 6d0:	80 ec       	ldi	r24, 0xC0	; 192
 6d2:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
            lcd_move_cursor(0,1);
            lcd_write(buff);
 6d6:	87 2d       	mov	r24, r7
 6d8:	98 2d       	mov	r25, r8
 6da:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
            switch(run_state) {
 6de:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <run_state>
 6e2:	0f b6       	in	r0, 0x3f	; 63
 6e4:	f8 94       	cli
 6e6:	de bf       	out	0x3e, r29	; 62
 6e8:	0f be       	out	0x3f, r0	; 63
 6ea:	cd bf       	out	0x3d, r28	; 61
 6ec:	82 30       	cpi	r24, 0x02	; 2
 6ee:	59 f1       	breq	.+86     	; 0x746 <__LOCK_REGION_LENGTH__+0x346>
 6f0:	28 f4       	brcc	.+10     	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
 6f2:	88 23       	and	r24, r24
 6f4:	41 f0       	breq	.+16     	; 0x706 <__LOCK_REGION_LENGTH__+0x306>
 6f6:	81 30       	cpi	r24, 0x01	; 1
 6f8:	a1 f0       	breq	.+40     	; 0x722 <__LOCK_REGION_LENGTH__+0x322>
 6fa:	a7 c0       	rjmp	.+334    	; 0x84a <__LOCK_REGION_LENGTH__+0x44a>
 6fc:	83 30       	cpi	r24, 0x03	; 3
 6fe:	91 f1       	breq	.+100    	; 0x764 <__LOCK_REGION_LENGTH__+0x364>
 700:	84 30       	cpi	r24, 0x04	; 4
 702:	f1 f1       	breq	.+124    	; 0x780 <__LOCK_REGION_LENGTH__+0x380>
 704:	a2 c0       	rjmp	.+324    	; 0x84a <__LOCK_REGION_LENGTH__+0x44a>
 706:	60 e0       	ldi	r22, 0x00	; 0
 708:	80 e8       	ldi	r24, 0x80	; 128
 70a:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
            case WAITING:
                lcd_move_cursor(0,0);
                lcd_write("Waiting box    ");
 70e:	87 e8       	ldi	r24, 0x87	; 135
 710:	91 e0       	ldi	r25, 0x01	; 1
 712:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
                if(get_bit(SNS_CX)==0) {
 716:	1e 99       	sbic	0x03, 6	; 3
 718:	98 c0       	rjmp	.+304    	; 0x84a <__LOCK_REGION_LENGTH__+0x44a>
                    run_state = DETECTED;
 71a:	81 e0       	ldi	r24, 0x01	; 1
 71c:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <run_state>
 720:	94 c0       	rjmp	.+296    	; 0x84a <__LOCK_REGION_LENGTH__+0x44a>
 722:	60 e0       	ldi	r22, 0x00	; 0
 724:	80 e8       	ldi	r24, 0x80	; 128
 726:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
                }
                break;
            case DETECTED:
                lcd_move_cursor(0,0);
                lcd_write("Box detected   ");
 72a:	87 e9       	ldi	r24, 0x97	; 151
 72c:	91 e0       	ldi	r25, 0x01	; 1
 72e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
                set_bit(CYL_A);
 732:	43 9a       	sbi	0x08, 3	; 8
                set_bit(CYL_B);
 734:	44 9a       	sbi	0x08, 4	; 8
                if(get_bit(A_1)==0 && get_bit(B_1)==0) {
 736:	19 99       	sbic	0x03, 1	; 3
 738:	88 c0       	rjmp	.+272    	; 0x84a <__LOCK_REGION_LENGTH__+0x44a>
 73a:	1b 99       	sbic	0x03, 3	; 3
 73c:	86 c0       	rjmp	.+268    	; 0x84a <__LOCK_REGION_LENGTH__+0x44a>
                    run_state = LOADING;
 73e:	82 e0       	ldi	r24, 0x02	; 2
 740:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <run_state>
 744:	82 c0       	rjmp	.+260    	; 0x84a <__LOCK_REGION_LENGTH__+0x44a>
 746:	60 e0       	ldi	r22, 0x00	; 0
 748:	80 e8       	ldi	r24, 0x80	; 128
 74a:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
                }
                break;
            case LOADING:
                lcd_move_cursor(0,0);
                lcd_write("Loading box    ");
 74e:	87 ea       	ldi	r24, 0xA7	; 167
 750:	91 e0       	ldi	r25, 0x01	; 1
 752:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
                rst_bit(CYL_C);
 756:	45 98       	cbi	0x08, 5	; 8
                //_delay_ms(fill_delay_ms); TODO
                if(get_bit(C_0)==0) {
 758:	1c 99       	sbic	0x03, 4	; 3
 75a:	77 c0       	rjmp	.+238    	; 0x84a <__LOCK_REGION_LENGTH__+0x44a>
                    run_state = CLOSING;
 75c:	83 e0       	ldi	r24, 0x03	; 3
 75e:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <run_state>
 762:	73 c0       	rjmp	.+230    	; 0x84a <__LOCK_REGION_LENGTH__+0x44a>
 764:	60 e0       	ldi	r22, 0x00	; 0
 766:	80 e8       	ldi	r24, 0x80	; 128
 768:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
                }
                break;
            case CLOSING:
                lcd_move_cursor(0,0);
                lcd_write("Closing disp.  ");
 76c:	87 eb       	ldi	r24, 0xB7	; 183
 76e:	91 e0       	ldi	r25, 0x01	; 1
 770:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
                set_bit(CYL_C);
 774:	45 9a       	sbi	0x08, 5	; 8
                if(get_bit(C_1)==0) {
 776:	1d 99       	sbic	0x03, 5	; 3
 778:	68 c0       	rjmp	.+208    	; 0x84a <__LOCK_REGION_LENGTH__+0x44a>
                    run_state = RELEASING;
 77a:	60 92 34 02 	sts	0x0234, r6	; 0x800234 <run_state>
 77e:	65 c0       	rjmp	.+202    	; 0x84a <__LOCK_REGION_LENGTH__+0x44a>
 780:	60 e0       	ldi	r22, 0x00	; 0
 782:	80 e8       	ldi	r24, 0x80	; 128
 784:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
                }
                break;
            case RELEASING:
                lcd_move_cursor(0,0);
                lcd_write("Releasing box  ");
 788:	87 ec       	ldi	r24, 0xC7	; 199
 78a:	91 e0       	ldi	r25, 0x01	; 1
 78c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
                rst_bit(CYL_A);
 790:	43 98       	cbi	0x08, 3	; 8
                rst_bit(CYL_B);
 792:	44 98       	cbi	0x08, 4	; 8
                if(get_bit(A_0)==0 && get_bit(B_0)==0) {
 794:	18 99       	sbic	0x03, 0	; 3
 796:	59 c0       	rjmp	.+178    	; 0x84a <__LOCK_REGION_LENGTH__+0x44a>
 798:	1a 99       	sbic	0x03, 2	; 3
 79a:	57 c0       	rjmp	.+174    	; 0x84a <__LOCK_REGION_LENGTH__+0x44a>
 79c:	60 e0       	ldi	r22, 0x00	; 0
 79e:	80 e8       	ldi	r24, 0x80	; 128
 7a0:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
                    lcd_move_cursor(0,0);
                    lcd_write("Box finished   ");
 7a4:	87 ed       	ldi	r24, 0xD7	; 215
 7a6:	91 e0       	ldi	r25, 0x01	; 1
 7a8:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
 7ac:	3f ef       	ldi	r19, 0xFF	; 255
 7ae:	87 ea       	ldi	r24, 0xA7	; 167
 7b0:	91 e6       	ldi	r25, 0x61	; 97
 7b2:	31 50       	subi	r19, 0x01	; 1
 7b4:	80 40       	sbci	r24, 0x00	; 0
 7b6:	90 40       	sbci	r25, 0x00	; 0
 7b8:	e1 f7       	brne	.-8      	; 0x7b2 <__LOCK_REGION_LENGTH__+0x3b2>
 7ba:	00 c0       	rjmp	.+0      	; 0x7bc <__LOCK_REGION_LENGTH__+0x3bc>
 7bc:	00 00       	nop
                    _delay_ms(2000);
                    ++ lot_quantity; //Incrementa uma caixa no lote atual
 7be:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <__data_end>
 7c2:	8f 5f       	subi	r24, 0xFF	; 255
 7c4:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <__data_end>
                    if (lot_quantity == lot_size) //Se o lote atual atingiu o número de caixas desejado
 7c8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <lot_size>
 7cc:	89 13       	cpse	r24, r25
 7ce:	29 c0       	rjmp	.+82     	; 0x822 <__LOCK_REGION_LENGTH__+0x422>
                    {
                        ++ lot_number; //Incrementa número de lotes prontos
 7d0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 7d4:	8f 5f       	subi	r24, 0xFF	; 255
 7d6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
                        lot_quantity = 0; //Reinicia contagem de caixas no lote
 7da:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <__data_end>
 7de:	60 e0       	ldi	r22, 0x00	; 0
 7e0:	80 e8       	ldi	r24, 0x80	; 128
 7e2:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
                        lcd_move_cursor(0,0);
                        lcd_write("Lot finished   ");
 7e6:	87 ee       	ldi	r24, 0xE7	; 231
 7e8:	91 e0       	ldi	r25, 0x01	; 1
 7ea:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
 7ee:	2f ef       	ldi	r18, 0xFF	; 255
 7f0:	33 ed       	ldi	r19, 0xD3	; 211
 7f2:	80 e3       	ldi	r24, 0x30	; 48
 7f4:	21 50       	subi	r18, 0x01	; 1
 7f6:	30 40       	sbci	r19, 0x00	; 0
 7f8:	80 40       	sbci	r24, 0x00	; 0
 7fa:	e1 f7       	brne	.-8      	; 0x7f4 <__LOCK_REGION_LENGTH__+0x3f4>
 7fc:	00 c0       	rjmp	.+0      	; 0x7fe <__LOCK_REGION_LENGTH__+0x3fe>
 7fe:	00 00       	nop
 800:	60 e0       	ldi	r22, 0x00	; 0
 802:	80 e8       	ldi	r24, 0x80	; 128
 804:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
                        _delay_ms(1000);
                        lcd_move_cursor(0,0);
                        lcd_write("Start next lot ");
 808:	87 ef       	ldi	r24, 0xF7	; 247
 80a:	91 e0       	ldi	r25, 0x01	; 1
 80c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
 810:	9f ef       	ldi	r25, 0xFF	; 255
 812:	23 ed       	ldi	r18, 0xD3	; 211
 814:	30 e3       	ldi	r19, 0x30	; 48
 816:	91 50       	subi	r25, 0x01	; 1
 818:	20 40       	sbci	r18, 0x00	; 0
 81a:	30 40       	sbci	r19, 0x00	; 0
 81c:	e1 f7       	brne	.-8      	; 0x816 <__LOCK_REGION_LENGTH__+0x416>
 81e:	00 c0       	rjmp	.+0      	; 0x820 <__LOCK_REGION_LENGTH__+0x420>
 820:	00 00       	nop
                        _delay_ms(1000);
                    }
                    run_state = WAITING;
 822:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <run_state>
 826:	11 c0       	rjmp	.+34     	; 0x84a <__LOCK_REGION_LENGTH__+0x44a>
 828:	60 e0       	ldi	r22, 0x00	; 0
 82a:	80 e8       	ldi	r24, 0x80	; 128
 82c:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
                break;
            }
            break;
        case PAUSE:
            lcd_move_cursor(0,0);
            lcd_write("System paused..");
 830:	87 e0       	ldi	r24, 0x07	; 7
 832:	92 e0       	ldi	r25, 0x02	; 2
 834:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
            break;
 838:	08 c0       	rjmp	.+16     	; 0x84a <__LOCK_REGION_LENGTH__+0x44a>
        default:
        case ERROR:
            lcd_clear();
 83a:	60 e0       	ldi	r22, 0x00	; 0
 83c:	81 e0       	ldi	r24, 0x01	; 1
 83e:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_cmd>
            lcd_write("SYSTEM ERROR");
 842:	87 e1       	ldi	r24, 0x17	; 23
 844:	92 e0       	ldi	r25, 0x02	; 2
 846:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
            break;
        }
		//Situações impossíveis dos cilindros:
		if ((get_bit(A_0) == 0 && get_bit(A_1) == 0)||(get_bit(B_0) == 0 && get_bit(B_1) == 0)
 84a:	18 99       	sbic	0x03, 0	; 3
 84c:	02 c0       	rjmp	.+4      	; 0x852 <__LOCK_REGION_LENGTH__+0x452>
 84e:	19 9b       	sbis	0x03, 1	; 3
 850:	0c c0       	rjmp	.+24     	; 0x86a <__LOCK_REGION_LENGTH__+0x46a>
 852:	1a 99       	sbic	0x03, 2	; 3
 854:	02 c0       	rjmp	.+4      	; 0x85a <__LOCK_REGION_LENGTH__+0x45a>
 856:	1b 9b       	sbis	0x03, 3	; 3
 858:	08 c0       	rjmp	.+16     	; 0x86a <__LOCK_REGION_LENGTH__+0x46a>
			||(get_bit(C_0) == 0 && get_bit(C_1) == 0)||(get_bit(B_0)==0 && get_bit(C_0) == 0)) 
 85a:	1c 99       	sbic	0x03, 4	; 3
 85c:	02 c0       	rjmp	.+4      	; 0x862 <__LOCK_REGION_LENGTH__+0x462>
 85e:	1d 9b       	sbis	0x03, 5	; 3
 860:	04 c0       	rjmp	.+8      	; 0x86a <__LOCK_REGION_LENGTH__+0x46a>
 862:	1a 99       	sbic	0x03, 2	; 3
 864:	49 cd       	rjmp	.-1390   	; 0x2f8 <main+0xe4>
 866:	1c 99       	sbic	0x03, 4	; 3
 868:	47 cd       	rjmp	.-1394   	; 0x2f8 <main+0xe4>
		{//Se os dois sensores de um cilindro estiverem acionados ao mesmo tempo, ou se B e C estiverem abertos ao mesmo tempo (vazamento)
			major_state = ERROR;
 86a:	86 e0       	ldi	r24, 0x06	; 6
 86c:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <major_state>
 870:	43 cd       	rjmp	.-1402   	; 0x2f8 <main+0xe4>

00000872 <__vector_1>:
	}
}

/*--------- Interrupts ---------*/
ISR(E_STOP_INTR) //Emergency stop button ISR
{
 872:	1f 92       	push	r1
 874:	0f 92       	push	r0
 876:	0f b6       	in	r0, 0x3f	; 63
 878:	0f 92       	push	r0
 87a:	11 24       	eor	r1, r1
 87c:	8f 93       	push	r24
    major_state = ERROR;
 87e:	86 e0       	ldi	r24, 0x06	; 6
 880:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <major_state>
    set_bit(CYL_B);
 884:	44 9a       	sbi	0x08, 4	; 8
    set_bit(CYL_C);
 886:	45 9a       	sbi	0x08, 5	; 8
    rst_bit(CYL_A);
 888:	43 98       	cbi	0x08, 3	; 8

    while(!get_bit(E_STOP_BTN)); //lock the machine while the emergency button is pressed
 88a:	4a 9b       	sbis	0x09, 2	; 9
 88c:	fe cf       	rjmp	.-4      	; 0x88a <__vector_1+0x18>
}
 88e:	8f 91       	pop	r24
 890:	0f 90       	pop	r0
 892:	0f be       	out	0x3f, r0	; 63
 894:	0f 90       	pop	r0
 896:	1f 90       	pop	r1
 898:	18 95       	reti

0000089a <__vector_2>:
ISR(PAUSE_INT)
{
 89a:	1f 92       	push	r1
 89c:	0f 92       	push	r0
 89e:	0f b6       	in	r0, 0x3f	; 63
 8a0:	0f 92       	push	r0
 8a2:	11 24       	eor	r1, r1
 8a4:	8f 93       	push	r24
 8a6:	9f 93       	push	r25
    major_state = (major_state == RUN ? PAUSE : (major_state ==  PAUSE ? RUN : major_state));
 8a8:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <major_state>
 8ac:	84 30       	cpi	r24, 0x04	; 4
 8ae:	39 f0       	breq	.+14     	; 0x8be <__vector_2+0x24>
 8b0:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <major_state>
 8b4:	85 30       	cpi	r24, 0x05	; 5
 8b6:	29 f0       	breq	.+10     	; 0x8c2 <__vector_2+0x28>
 8b8:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <major_state>
 8bc:	03 c0       	rjmp	.+6      	; 0x8c4 <__vector_2+0x2a>
 8be:	85 e0       	ldi	r24, 0x05	; 5
 8c0:	01 c0       	rjmp	.+2      	; 0x8c4 <__vector_2+0x2a>
 8c2:	84 e0       	ldi	r24, 0x04	; 4
 8c4:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <major_state>
 8c8:	8f e3       	ldi	r24, 0x3F	; 63
 8ca:	9c e9       	ldi	r25, 0x9C	; 156
 8cc:	01 97       	sbiw	r24, 0x01	; 1
 8ce:	f1 f7       	brne	.-4      	; 0x8cc <__vector_2+0x32>
 8d0:	00 c0       	rjmp	.+0      	; 0x8d2 <__vector_2+0x38>
 8d2:	00 00       	nop
    _delay_ms(10); //button debounce
}
 8d4:	9f 91       	pop	r25
 8d6:	8f 91       	pop	r24
 8d8:	0f 90       	pop	r0
 8da:	0f be       	out	0x3f, r0	; 63
 8dc:	0f 90       	pop	r0
 8de:	1f 90       	pop	r1
 8e0:	18 95       	reti

000008e2 <strncmp>:
 8e2:	fb 01       	movw	r30, r22
 8e4:	dc 01       	movw	r26, r24
 8e6:	41 50       	subi	r20, 0x01	; 1
 8e8:	50 40       	sbci	r21, 0x00	; 0
 8ea:	30 f0       	brcs	.+12     	; 0x8f8 <strncmp+0x16>
 8ec:	8d 91       	ld	r24, X+
 8ee:	01 90       	ld	r0, Z+
 8f0:	80 19       	sub	r24, r0
 8f2:	19 f4       	brne	.+6      	; 0x8fa <strncmp+0x18>
 8f4:	00 20       	and	r0, r0
 8f6:	b9 f7       	brne	.-18     	; 0x8e6 <strncmp+0x4>
 8f8:	88 1b       	sub	r24, r24
 8fa:	99 0b       	sbc	r25, r25
 8fc:	08 95       	ret

000008fe <snprintf>:
 8fe:	ae e0       	ldi	r26, 0x0E	; 14
 900:	b0 e0       	ldi	r27, 0x00	; 0
 902:	e5 e8       	ldi	r30, 0x85	; 133
 904:	f4 e0       	ldi	r31, 0x04	; 4
 906:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__prologue_saves__+0x1c>
 90a:	0d 89       	ldd	r16, Y+21	; 0x15
 90c:	1e 89       	ldd	r17, Y+22	; 0x16
 90e:	8f 89       	ldd	r24, Y+23	; 0x17
 910:	98 8d       	ldd	r25, Y+24	; 0x18
 912:	26 e0       	ldi	r18, 0x06	; 6
 914:	2c 83       	std	Y+4, r18	; 0x04
 916:	1a 83       	std	Y+2, r17	; 0x02
 918:	09 83       	std	Y+1, r16	; 0x01
 91a:	97 ff       	sbrs	r25, 7
 91c:	02 c0       	rjmp	.+4      	; 0x922 <__stack+0x23>
 91e:	80 e0       	ldi	r24, 0x00	; 0
 920:	90 e8       	ldi	r25, 0x80	; 128
 922:	01 97       	sbiw	r24, 0x01	; 1
 924:	9e 83       	std	Y+6, r25	; 0x06
 926:	8d 83       	std	Y+5, r24	; 0x05
 928:	ae 01       	movw	r20, r28
 92a:	45 5e       	subi	r20, 0xE5	; 229
 92c:	5f 4f       	sbci	r21, 0xFF	; 255
 92e:	69 8d       	ldd	r22, Y+25	; 0x19
 930:	7a 8d       	ldd	r23, Y+26	; 0x1a
 932:	ce 01       	movw	r24, r28
 934:	01 96       	adiw	r24, 0x01	; 1
 936:	0e 94 af 04 	call	0x95e	; 0x95e <vfprintf>
 93a:	4d 81       	ldd	r20, Y+5	; 0x05
 93c:	5e 81       	ldd	r21, Y+6	; 0x06
 93e:	57 fd       	sbrc	r21, 7
 940:	0a c0       	rjmp	.+20     	; 0x956 <__stack+0x57>
 942:	2f 81       	ldd	r18, Y+7	; 0x07
 944:	38 85       	ldd	r19, Y+8	; 0x08
 946:	42 17       	cp	r20, r18
 948:	53 07       	cpc	r21, r19
 94a:	0c f4       	brge	.+2      	; 0x94e <__stack+0x4f>
 94c:	9a 01       	movw	r18, r20
 94e:	f8 01       	movw	r30, r16
 950:	e2 0f       	add	r30, r18
 952:	f3 1f       	adc	r31, r19
 954:	10 82       	st	Z, r1
 956:	2e 96       	adiw	r28, 0x0e	; 14
 958:	e4 e0       	ldi	r30, 0x04	; 4
 95a:	0c 94 6a 07 	jmp	0xed4	; 0xed4 <__epilogue_restores__+0x1c>

0000095e <vfprintf>:
 95e:	ab e0       	ldi	r26, 0x0B	; 11
 960:	b0 e0       	ldi	r27, 0x00	; 0
 962:	e5 eb       	ldi	r30, 0xB5	; 181
 964:	f4 e0       	ldi	r31, 0x04	; 4
 966:	0c 94 40 07 	jmp	0xe80	; 0xe80 <__prologue_saves__>
 96a:	6c 01       	movw	r12, r24
 96c:	7b 01       	movw	r14, r22
 96e:	8a 01       	movw	r16, r20
 970:	fc 01       	movw	r30, r24
 972:	17 82       	std	Z+7, r1	; 0x07
 974:	16 82       	std	Z+6, r1	; 0x06
 976:	83 81       	ldd	r24, Z+3	; 0x03
 978:	81 ff       	sbrs	r24, 1
 97a:	cc c1       	rjmp	.+920    	; 0xd14 <vfprintf+0x3b6>
 97c:	ce 01       	movw	r24, r28
 97e:	01 96       	adiw	r24, 0x01	; 1
 980:	3c 01       	movw	r6, r24
 982:	f6 01       	movw	r30, r12
 984:	93 81       	ldd	r25, Z+3	; 0x03
 986:	f7 01       	movw	r30, r14
 988:	93 fd       	sbrc	r25, 3
 98a:	85 91       	lpm	r24, Z+
 98c:	93 ff       	sbrs	r25, 3
 98e:	81 91       	ld	r24, Z+
 990:	7f 01       	movw	r14, r30
 992:	88 23       	and	r24, r24
 994:	09 f4       	brne	.+2      	; 0x998 <vfprintf+0x3a>
 996:	ba c1       	rjmp	.+884    	; 0xd0c <vfprintf+0x3ae>
 998:	85 32       	cpi	r24, 0x25	; 37
 99a:	39 f4       	brne	.+14     	; 0x9aa <vfprintf+0x4c>
 99c:	93 fd       	sbrc	r25, 3
 99e:	85 91       	lpm	r24, Z+
 9a0:	93 ff       	sbrs	r25, 3
 9a2:	81 91       	ld	r24, Z+
 9a4:	7f 01       	movw	r14, r30
 9a6:	85 32       	cpi	r24, 0x25	; 37
 9a8:	29 f4       	brne	.+10     	; 0x9b4 <vfprintf+0x56>
 9aa:	b6 01       	movw	r22, r12
 9ac:	90 e0       	ldi	r25, 0x00	; 0
 9ae:	0e 94 a6 06 	call	0xd4c	; 0xd4c <fputc>
 9b2:	e7 cf       	rjmp	.-50     	; 0x982 <vfprintf+0x24>
 9b4:	91 2c       	mov	r9, r1
 9b6:	21 2c       	mov	r2, r1
 9b8:	31 2c       	mov	r3, r1
 9ba:	ff e1       	ldi	r31, 0x1F	; 31
 9bc:	f3 15       	cp	r31, r3
 9be:	d8 f0       	brcs	.+54     	; 0x9f6 <vfprintf+0x98>
 9c0:	8b 32       	cpi	r24, 0x2B	; 43
 9c2:	79 f0       	breq	.+30     	; 0x9e2 <vfprintf+0x84>
 9c4:	38 f4       	brcc	.+14     	; 0x9d4 <vfprintf+0x76>
 9c6:	80 32       	cpi	r24, 0x20	; 32
 9c8:	79 f0       	breq	.+30     	; 0x9e8 <vfprintf+0x8a>
 9ca:	83 32       	cpi	r24, 0x23	; 35
 9cc:	a1 f4       	brne	.+40     	; 0x9f6 <vfprintf+0x98>
 9ce:	23 2d       	mov	r18, r3
 9d0:	20 61       	ori	r18, 0x10	; 16
 9d2:	1d c0       	rjmp	.+58     	; 0xa0e <vfprintf+0xb0>
 9d4:	8d 32       	cpi	r24, 0x2D	; 45
 9d6:	61 f0       	breq	.+24     	; 0x9f0 <vfprintf+0x92>
 9d8:	80 33       	cpi	r24, 0x30	; 48
 9da:	69 f4       	brne	.+26     	; 0x9f6 <vfprintf+0x98>
 9dc:	23 2d       	mov	r18, r3
 9de:	21 60       	ori	r18, 0x01	; 1
 9e0:	16 c0       	rjmp	.+44     	; 0xa0e <vfprintf+0xb0>
 9e2:	83 2d       	mov	r24, r3
 9e4:	82 60       	ori	r24, 0x02	; 2
 9e6:	38 2e       	mov	r3, r24
 9e8:	e3 2d       	mov	r30, r3
 9ea:	e4 60       	ori	r30, 0x04	; 4
 9ec:	3e 2e       	mov	r3, r30
 9ee:	2a c0       	rjmp	.+84     	; 0xa44 <vfprintf+0xe6>
 9f0:	f3 2d       	mov	r31, r3
 9f2:	f8 60       	ori	r31, 0x08	; 8
 9f4:	1d c0       	rjmp	.+58     	; 0xa30 <vfprintf+0xd2>
 9f6:	37 fc       	sbrc	r3, 7
 9f8:	2d c0       	rjmp	.+90     	; 0xa54 <vfprintf+0xf6>
 9fa:	20 ed       	ldi	r18, 0xD0	; 208
 9fc:	28 0f       	add	r18, r24
 9fe:	2a 30       	cpi	r18, 0x0A	; 10
 a00:	40 f0       	brcs	.+16     	; 0xa12 <vfprintf+0xb4>
 a02:	8e 32       	cpi	r24, 0x2E	; 46
 a04:	b9 f4       	brne	.+46     	; 0xa34 <vfprintf+0xd6>
 a06:	36 fc       	sbrc	r3, 6
 a08:	81 c1       	rjmp	.+770    	; 0xd0c <vfprintf+0x3ae>
 a0a:	23 2d       	mov	r18, r3
 a0c:	20 64       	ori	r18, 0x40	; 64
 a0e:	32 2e       	mov	r3, r18
 a10:	19 c0       	rjmp	.+50     	; 0xa44 <vfprintf+0xe6>
 a12:	36 fe       	sbrs	r3, 6
 a14:	06 c0       	rjmp	.+12     	; 0xa22 <vfprintf+0xc4>
 a16:	8a e0       	ldi	r24, 0x0A	; 10
 a18:	98 9e       	mul	r9, r24
 a1a:	20 0d       	add	r18, r0
 a1c:	11 24       	eor	r1, r1
 a1e:	92 2e       	mov	r9, r18
 a20:	11 c0       	rjmp	.+34     	; 0xa44 <vfprintf+0xe6>
 a22:	ea e0       	ldi	r30, 0x0A	; 10
 a24:	2e 9e       	mul	r2, r30
 a26:	20 0d       	add	r18, r0
 a28:	11 24       	eor	r1, r1
 a2a:	22 2e       	mov	r2, r18
 a2c:	f3 2d       	mov	r31, r3
 a2e:	f0 62       	ori	r31, 0x20	; 32
 a30:	3f 2e       	mov	r3, r31
 a32:	08 c0       	rjmp	.+16     	; 0xa44 <vfprintf+0xe6>
 a34:	8c 36       	cpi	r24, 0x6C	; 108
 a36:	21 f4       	brne	.+8      	; 0xa40 <vfprintf+0xe2>
 a38:	83 2d       	mov	r24, r3
 a3a:	80 68       	ori	r24, 0x80	; 128
 a3c:	38 2e       	mov	r3, r24
 a3e:	02 c0       	rjmp	.+4      	; 0xa44 <vfprintf+0xe6>
 a40:	88 36       	cpi	r24, 0x68	; 104
 a42:	41 f4       	brne	.+16     	; 0xa54 <vfprintf+0xf6>
 a44:	f7 01       	movw	r30, r14
 a46:	93 fd       	sbrc	r25, 3
 a48:	85 91       	lpm	r24, Z+
 a4a:	93 ff       	sbrs	r25, 3
 a4c:	81 91       	ld	r24, Z+
 a4e:	7f 01       	movw	r14, r30
 a50:	81 11       	cpse	r24, r1
 a52:	b3 cf       	rjmp	.-154    	; 0x9ba <vfprintf+0x5c>
 a54:	98 2f       	mov	r25, r24
 a56:	9f 7d       	andi	r25, 0xDF	; 223
 a58:	95 54       	subi	r25, 0x45	; 69
 a5a:	93 30       	cpi	r25, 0x03	; 3
 a5c:	28 f4       	brcc	.+10     	; 0xa68 <vfprintf+0x10a>
 a5e:	0c 5f       	subi	r16, 0xFC	; 252
 a60:	1f 4f       	sbci	r17, 0xFF	; 255
 a62:	9f e3       	ldi	r25, 0x3F	; 63
 a64:	99 83       	std	Y+1, r25	; 0x01
 a66:	0d c0       	rjmp	.+26     	; 0xa82 <vfprintf+0x124>
 a68:	83 36       	cpi	r24, 0x63	; 99
 a6a:	31 f0       	breq	.+12     	; 0xa78 <vfprintf+0x11a>
 a6c:	83 37       	cpi	r24, 0x73	; 115
 a6e:	71 f0       	breq	.+28     	; 0xa8c <vfprintf+0x12e>
 a70:	83 35       	cpi	r24, 0x53	; 83
 a72:	09 f0       	breq	.+2      	; 0xa76 <vfprintf+0x118>
 a74:	59 c0       	rjmp	.+178    	; 0xb28 <vfprintf+0x1ca>
 a76:	21 c0       	rjmp	.+66     	; 0xaba <vfprintf+0x15c>
 a78:	f8 01       	movw	r30, r16
 a7a:	80 81       	ld	r24, Z
 a7c:	89 83       	std	Y+1, r24	; 0x01
 a7e:	0e 5f       	subi	r16, 0xFE	; 254
 a80:	1f 4f       	sbci	r17, 0xFF	; 255
 a82:	88 24       	eor	r8, r8
 a84:	83 94       	inc	r8
 a86:	91 2c       	mov	r9, r1
 a88:	53 01       	movw	r10, r6
 a8a:	13 c0       	rjmp	.+38     	; 0xab2 <vfprintf+0x154>
 a8c:	28 01       	movw	r4, r16
 a8e:	f2 e0       	ldi	r31, 0x02	; 2
 a90:	4f 0e       	add	r4, r31
 a92:	51 1c       	adc	r5, r1
 a94:	f8 01       	movw	r30, r16
 a96:	a0 80       	ld	r10, Z
 a98:	b1 80       	ldd	r11, Z+1	; 0x01
 a9a:	36 fe       	sbrs	r3, 6
 a9c:	03 c0       	rjmp	.+6      	; 0xaa4 <vfprintf+0x146>
 a9e:	69 2d       	mov	r22, r9
 aa0:	70 e0       	ldi	r23, 0x00	; 0
 aa2:	02 c0       	rjmp	.+4      	; 0xaa8 <vfprintf+0x14a>
 aa4:	6f ef       	ldi	r22, 0xFF	; 255
 aa6:	7f ef       	ldi	r23, 0xFF	; 255
 aa8:	c5 01       	movw	r24, r10
 aaa:	0e 94 9b 06 	call	0xd36	; 0xd36 <strnlen>
 aae:	4c 01       	movw	r8, r24
 ab0:	82 01       	movw	r16, r4
 ab2:	f3 2d       	mov	r31, r3
 ab4:	ff 77       	andi	r31, 0x7F	; 127
 ab6:	3f 2e       	mov	r3, r31
 ab8:	16 c0       	rjmp	.+44     	; 0xae6 <vfprintf+0x188>
 aba:	28 01       	movw	r4, r16
 abc:	22 e0       	ldi	r18, 0x02	; 2
 abe:	42 0e       	add	r4, r18
 ac0:	51 1c       	adc	r5, r1
 ac2:	f8 01       	movw	r30, r16
 ac4:	a0 80       	ld	r10, Z
 ac6:	b1 80       	ldd	r11, Z+1	; 0x01
 ac8:	36 fe       	sbrs	r3, 6
 aca:	03 c0       	rjmp	.+6      	; 0xad2 <vfprintf+0x174>
 acc:	69 2d       	mov	r22, r9
 ace:	70 e0       	ldi	r23, 0x00	; 0
 ad0:	02 c0       	rjmp	.+4      	; 0xad6 <vfprintf+0x178>
 ad2:	6f ef       	ldi	r22, 0xFF	; 255
 ad4:	7f ef       	ldi	r23, 0xFF	; 255
 ad6:	c5 01       	movw	r24, r10
 ad8:	0e 94 90 06 	call	0xd20	; 0xd20 <strnlen_P>
 adc:	4c 01       	movw	r8, r24
 ade:	f3 2d       	mov	r31, r3
 ae0:	f0 68       	ori	r31, 0x80	; 128
 ae2:	3f 2e       	mov	r3, r31
 ae4:	82 01       	movw	r16, r4
 ae6:	33 fc       	sbrc	r3, 3
 ae8:	1b c0       	rjmp	.+54     	; 0xb20 <vfprintf+0x1c2>
 aea:	82 2d       	mov	r24, r2
 aec:	90 e0       	ldi	r25, 0x00	; 0
 aee:	88 16       	cp	r8, r24
 af0:	99 06       	cpc	r9, r25
 af2:	b0 f4       	brcc	.+44     	; 0xb20 <vfprintf+0x1c2>
 af4:	b6 01       	movw	r22, r12
 af6:	80 e2       	ldi	r24, 0x20	; 32
 af8:	90 e0       	ldi	r25, 0x00	; 0
 afa:	0e 94 a6 06 	call	0xd4c	; 0xd4c <fputc>
 afe:	2a 94       	dec	r2
 b00:	f4 cf       	rjmp	.-24     	; 0xaea <vfprintf+0x18c>
 b02:	f5 01       	movw	r30, r10
 b04:	37 fc       	sbrc	r3, 7
 b06:	85 91       	lpm	r24, Z+
 b08:	37 fe       	sbrs	r3, 7
 b0a:	81 91       	ld	r24, Z+
 b0c:	5f 01       	movw	r10, r30
 b0e:	b6 01       	movw	r22, r12
 b10:	90 e0       	ldi	r25, 0x00	; 0
 b12:	0e 94 a6 06 	call	0xd4c	; 0xd4c <fputc>
 b16:	21 10       	cpse	r2, r1
 b18:	2a 94       	dec	r2
 b1a:	21 e0       	ldi	r18, 0x01	; 1
 b1c:	82 1a       	sub	r8, r18
 b1e:	91 08       	sbc	r9, r1
 b20:	81 14       	cp	r8, r1
 b22:	91 04       	cpc	r9, r1
 b24:	71 f7       	brne	.-36     	; 0xb02 <vfprintf+0x1a4>
 b26:	e8 c0       	rjmp	.+464    	; 0xcf8 <vfprintf+0x39a>
 b28:	84 36       	cpi	r24, 0x64	; 100
 b2a:	11 f0       	breq	.+4      	; 0xb30 <vfprintf+0x1d2>
 b2c:	89 36       	cpi	r24, 0x69	; 105
 b2e:	41 f5       	brne	.+80     	; 0xb80 <vfprintf+0x222>
 b30:	f8 01       	movw	r30, r16
 b32:	37 fe       	sbrs	r3, 7
 b34:	07 c0       	rjmp	.+14     	; 0xb44 <vfprintf+0x1e6>
 b36:	60 81       	ld	r22, Z
 b38:	71 81       	ldd	r23, Z+1	; 0x01
 b3a:	82 81       	ldd	r24, Z+2	; 0x02
 b3c:	93 81       	ldd	r25, Z+3	; 0x03
 b3e:	0c 5f       	subi	r16, 0xFC	; 252
 b40:	1f 4f       	sbci	r17, 0xFF	; 255
 b42:	08 c0       	rjmp	.+16     	; 0xb54 <vfprintf+0x1f6>
 b44:	60 81       	ld	r22, Z
 b46:	71 81       	ldd	r23, Z+1	; 0x01
 b48:	07 2e       	mov	r0, r23
 b4a:	00 0c       	add	r0, r0
 b4c:	88 0b       	sbc	r24, r24
 b4e:	99 0b       	sbc	r25, r25
 b50:	0e 5f       	subi	r16, 0xFE	; 254
 b52:	1f 4f       	sbci	r17, 0xFF	; 255
 b54:	f3 2d       	mov	r31, r3
 b56:	ff 76       	andi	r31, 0x6F	; 111
 b58:	3f 2e       	mov	r3, r31
 b5a:	97 ff       	sbrs	r25, 7
 b5c:	09 c0       	rjmp	.+18     	; 0xb70 <vfprintf+0x212>
 b5e:	90 95       	com	r25
 b60:	80 95       	com	r24
 b62:	70 95       	com	r23
 b64:	61 95       	neg	r22
 b66:	7f 4f       	sbci	r23, 0xFF	; 255
 b68:	8f 4f       	sbci	r24, 0xFF	; 255
 b6a:	9f 4f       	sbci	r25, 0xFF	; 255
 b6c:	f0 68       	ori	r31, 0x80	; 128
 b6e:	3f 2e       	mov	r3, r31
 b70:	2a e0       	ldi	r18, 0x0A	; 10
 b72:	30 e0       	ldi	r19, 0x00	; 0
 b74:	a3 01       	movw	r20, r6
 b76:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <__ultoa_invert>
 b7a:	88 2e       	mov	r8, r24
 b7c:	86 18       	sub	r8, r6
 b7e:	45 c0       	rjmp	.+138    	; 0xc0a <vfprintf+0x2ac>
 b80:	85 37       	cpi	r24, 0x75	; 117
 b82:	31 f4       	brne	.+12     	; 0xb90 <vfprintf+0x232>
 b84:	23 2d       	mov	r18, r3
 b86:	2f 7e       	andi	r18, 0xEF	; 239
 b88:	b2 2e       	mov	r11, r18
 b8a:	2a e0       	ldi	r18, 0x0A	; 10
 b8c:	30 e0       	ldi	r19, 0x00	; 0
 b8e:	25 c0       	rjmp	.+74     	; 0xbda <vfprintf+0x27c>
 b90:	93 2d       	mov	r25, r3
 b92:	99 7f       	andi	r25, 0xF9	; 249
 b94:	b9 2e       	mov	r11, r25
 b96:	8f 36       	cpi	r24, 0x6F	; 111
 b98:	c1 f0       	breq	.+48     	; 0xbca <vfprintf+0x26c>
 b9a:	18 f4       	brcc	.+6      	; 0xba2 <vfprintf+0x244>
 b9c:	88 35       	cpi	r24, 0x58	; 88
 b9e:	79 f0       	breq	.+30     	; 0xbbe <vfprintf+0x260>
 ba0:	b5 c0       	rjmp	.+362    	; 0xd0c <vfprintf+0x3ae>
 ba2:	80 37       	cpi	r24, 0x70	; 112
 ba4:	19 f0       	breq	.+6      	; 0xbac <vfprintf+0x24e>
 ba6:	88 37       	cpi	r24, 0x78	; 120
 ba8:	21 f0       	breq	.+8      	; 0xbb2 <vfprintf+0x254>
 baa:	b0 c0       	rjmp	.+352    	; 0xd0c <vfprintf+0x3ae>
 bac:	e9 2f       	mov	r30, r25
 bae:	e0 61       	ori	r30, 0x10	; 16
 bb0:	be 2e       	mov	r11, r30
 bb2:	b4 fe       	sbrs	r11, 4
 bb4:	0d c0       	rjmp	.+26     	; 0xbd0 <vfprintf+0x272>
 bb6:	fb 2d       	mov	r31, r11
 bb8:	f4 60       	ori	r31, 0x04	; 4
 bba:	bf 2e       	mov	r11, r31
 bbc:	09 c0       	rjmp	.+18     	; 0xbd0 <vfprintf+0x272>
 bbe:	34 fe       	sbrs	r3, 4
 bc0:	0a c0       	rjmp	.+20     	; 0xbd6 <vfprintf+0x278>
 bc2:	29 2f       	mov	r18, r25
 bc4:	26 60       	ori	r18, 0x06	; 6
 bc6:	b2 2e       	mov	r11, r18
 bc8:	06 c0       	rjmp	.+12     	; 0xbd6 <vfprintf+0x278>
 bca:	28 e0       	ldi	r18, 0x08	; 8
 bcc:	30 e0       	ldi	r19, 0x00	; 0
 bce:	05 c0       	rjmp	.+10     	; 0xbda <vfprintf+0x27c>
 bd0:	20 e1       	ldi	r18, 0x10	; 16
 bd2:	30 e0       	ldi	r19, 0x00	; 0
 bd4:	02 c0       	rjmp	.+4      	; 0xbda <vfprintf+0x27c>
 bd6:	20 e1       	ldi	r18, 0x10	; 16
 bd8:	32 e0       	ldi	r19, 0x02	; 2
 bda:	f8 01       	movw	r30, r16
 bdc:	b7 fe       	sbrs	r11, 7
 bde:	07 c0       	rjmp	.+14     	; 0xbee <vfprintf+0x290>
 be0:	60 81       	ld	r22, Z
 be2:	71 81       	ldd	r23, Z+1	; 0x01
 be4:	82 81       	ldd	r24, Z+2	; 0x02
 be6:	93 81       	ldd	r25, Z+3	; 0x03
 be8:	0c 5f       	subi	r16, 0xFC	; 252
 bea:	1f 4f       	sbci	r17, 0xFF	; 255
 bec:	06 c0       	rjmp	.+12     	; 0xbfa <vfprintf+0x29c>
 bee:	60 81       	ld	r22, Z
 bf0:	71 81       	ldd	r23, Z+1	; 0x01
 bf2:	80 e0       	ldi	r24, 0x00	; 0
 bf4:	90 e0       	ldi	r25, 0x00	; 0
 bf6:	0e 5f       	subi	r16, 0xFE	; 254
 bf8:	1f 4f       	sbci	r17, 0xFF	; 255
 bfa:	a3 01       	movw	r20, r6
 bfc:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <__ultoa_invert>
 c00:	88 2e       	mov	r8, r24
 c02:	86 18       	sub	r8, r6
 c04:	fb 2d       	mov	r31, r11
 c06:	ff 77       	andi	r31, 0x7F	; 127
 c08:	3f 2e       	mov	r3, r31
 c0a:	36 fe       	sbrs	r3, 6
 c0c:	0d c0       	rjmp	.+26     	; 0xc28 <vfprintf+0x2ca>
 c0e:	23 2d       	mov	r18, r3
 c10:	2e 7f       	andi	r18, 0xFE	; 254
 c12:	a2 2e       	mov	r10, r18
 c14:	89 14       	cp	r8, r9
 c16:	58 f4       	brcc	.+22     	; 0xc2e <vfprintf+0x2d0>
 c18:	34 fe       	sbrs	r3, 4
 c1a:	0b c0       	rjmp	.+22     	; 0xc32 <vfprintf+0x2d4>
 c1c:	32 fc       	sbrc	r3, 2
 c1e:	09 c0       	rjmp	.+18     	; 0xc32 <vfprintf+0x2d4>
 c20:	83 2d       	mov	r24, r3
 c22:	8e 7e       	andi	r24, 0xEE	; 238
 c24:	a8 2e       	mov	r10, r24
 c26:	05 c0       	rjmp	.+10     	; 0xc32 <vfprintf+0x2d4>
 c28:	b8 2c       	mov	r11, r8
 c2a:	a3 2c       	mov	r10, r3
 c2c:	03 c0       	rjmp	.+6      	; 0xc34 <vfprintf+0x2d6>
 c2e:	b8 2c       	mov	r11, r8
 c30:	01 c0       	rjmp	.+2      	; 0xc34 <vfprintf+0x2d6>
 c32:	b9 2c       	mov	r11, r9
 c34:	a4 fe       	sbrs	r10, 4
 c36:	0f c0       	rjmp	.+30     	; 0xc56 <vfprintf+0x2f8>
 c38:	fe 01       	movw	r30, r28
 c3a:	e8 0d       	add	r30, r8
 c3c:	f1 1d       	adc	r31, r1
 c3e:	80 81       	ld	r24, Z
 c40:	80 33       	cpi	r24, 0x30	; 48
 c42:	21 f4       	brne	.+8      	; 0xc4c <vfprintf+0x2ee>
 c44:	9a 2d       	mov	r25, r10
 c46:	99 7e       	andi	r25, 0xE9	; 233
 c48:	a9 2e       	mov	r10, r25
 c4a:	09 c0       	rjmp	.+18     	; 0xc5e <vfprintf+0x300>
 c4c:	a2 fe       	sbrs	r10, 2
 c4e:	06 c0       	rjmp	.+12     	; 0xc5c <vfprintf+0x2fe>
 c50:	b3 94       	inc	r11
 c52:	b3 94       	inc	r11
 c54:	04 c0       	rjmp	.+8      	; 0xc5e <vfprintf+0x300>
 c56:	8a 2d       	mov	r24, r10
 c58:	86 78       	andi	r24, 0x86	; 134
 c5a:	09 f0       	breq	.+2      	; 0xc5e <vfprintf+0x300>
 c5c:	b3 94       	inc	r11
 c5e:	a3 fc       	sbrc	r10, 3
 c60:	11 c0       	rjmp	.+34     	; 0xc84 <vfprintf+0x326>
 c62:	a0 fe       	sbrs	r10, 0
 c64:	06 c0       	rjmp	.+12     	; 0xc72 <vfprintf+0x314>
 c66:	b2 14       	cp	r11, r2
 c68:	88 f4       	brcc	.+34     	; 0xc8c <vfprintf+0x32e>
 c6a:	28 0c       	add	r2, r8
 c6c:	92 2c       	mov	r9, r2
 c6e:	9b 18       	sub	r9, r11
 c70:	0e c0       	rjmp	.+28     	; 0xc8e <vfprintf+0x330>
 c72:	b2 14       	cp	r11, r2
 c74:	60 f4       	brcc	.+24     	; 0xc8e <vfprintf+0x330>
 c76:	b6 01       	movw	r22, r12
 c78:	80 e2       	ldi	r24, 0x20	; 32
 c7a:	90 e0       	ldi	r25, 0x00	; 0
 c7c:	0e 94 a6 06 	call	0xd4c	; 0xd4c <fputc>
 c80:	b3 94       	inc	r11
 c82:	f7 cf       	rjmp	.-18     	; 0xc72 <vfprintf+0x314>
 c84:	b2 14       	cp	r11, r2
 c86:	18 f4       	brcc	.+6      	; 0xc8e <vfprintf+0x330>
 c88:	2b 18       	sub	r2, r11
 c8a:	02 c0       	rjmp	.+4      	; 0xc90 <vfprintf+0x332>
 c8c:	98 2c       	mov	r9, r8
 c8e:	21 2c       	mov	r2, r1
 c90:	a4 fe       	sbrs	r10, 4
 c92:	10 c0       	rjmp	.+32     	; 0xcb4 <vfprintf+0x356>
 c94:	b6 01       	movw	r22, r12
 c96:	80 e3       	ldi	r24, 0x30	; 48
 c98:	90 e0       	ldi	r25, 0x00	; 0
 c9a:	0e 94 a6 06 	call	0xd4c	; 0xd4c <fputc>
 c9e:	a2 fe       	sbrs	r10, 2
 ca0:	17 c0       	rjmp	.+46     	; 0xcd0 <vfprintf+0x372>
 ca2:	a1 fc       	sbrc	r10, 1
 ca4:	03 c0       	rjmp	.+6      	; 0xcac <vfprintf+0x34e>
 ca6:	88 e7       	ldi	r24, 0x78	; 120
 ca8:	90 e0       	ldi	r25, 0x00	; 0
 caa:	02 c0       	rjmp	.+4      	; 0xcb0 <vfprintf+0x352>
 cac:	88 e5       	ldi	r24, 0x58	; 88
 cae:	90 e0       	ldi	r25, 0x00	; 0
 cb0:	b6 01       	movw	r22, r12
 cb2:	0c c0       	rjmp	.+24     	; 0xccc <vfprintf+0x36e>
 cb4:	8a 2d       	mov	r24, r10
 cb6:	86 78       	andi	r24, 0x86	; 134
 cb8:	59 f0       	breq	.+22     	; 0xcd0 <vfprintf+0x372>
 cba:	a1 fe       	sbrs	r10, 1
 cbc:	02 c0       	rjmp	.+4      	; 0xcc2 <vfprintf+0x364>
 cbe:	8b e2       	ldi	r24, 0x2B	; 43
 cc0:	01 c0       	rjmp	.+2      	; 0xcc4 <vfprintf+0x366>
 cc2:	80 e2       	ldi	r24, 0x20	; 32
 cc4:	a7 fc       	sbrc	r10, 7
 cc6:	8d e2       	ldi	r24, 0x2D	; 45
 cc8:	b6 01       	movw	r22, r12
 cca:	90 e0       	ldi	r25, 0x00	; 0
 ccc:	0e 94 a6 06 	call	0xd4c	; 0xd4c <fputc>
 cd0:	89 14       	cp	r8, r9
 cd2:	38 f4       	brcc	.+14     	; 0xce2 <vfprintf+0x384>
 cd4:	b6 01       	movw	r22, r12
 cd6:	80 e3       	ldi	r24, 0x30	; 48
 cd8:	90 e0       	ldi	r25, 0x00	; 0
 cda:	0e 94 a6 06 	call	0xd4c	; 0xd4c <fputc>
 cde:	9a 94       	dec	r9
 ce0:	f7 cf       	rjmp	.-18     	; 0xcd0 <vfprintf+0x372>
 ce2:	8a 94       	dec	r8
 ce4:	f3 01       	movw	r30, r6
 ce6:	e8 0d       	add	r30, r8
 ce8:	f1 1d       	adc	r31, r1
 cea:	80 81       	ld	r24, Z
 cec:	b6 01       	movw	r22, r12
 cee:	90 e0       	ldi	r25, 0x00	; 0
 cf0:	0e 94 a6 06 	call	0xd4c	; 0xd4c <fputc>
 cf4:	81 10       	cpse	r8, r1
 cf6:	f5 cf       	rjmp	.-22     	; 0xce2 <vfprintf+0x384>
 cf8:	22 20       	and	r2, r2
 cfa:	09 f4       	brne	.+2      	; 0xcfe <vfprintf+0x3a0>
 cfc:	42 ce       	rjmp	.-892    	; 0x982 <vfprintf+0x24>
 cfe:	b6 01       	movw	r22, r12
 d00:	80 e2       	ldi	r24, 0x20	; 32
 d02:	90 e0       	ldi	r25, 0x00	; 0
 d04:	0e 94 a6 06 	call	0xd4c	; 0xd4c <fputc>
 d08:	2a 94       	dec	r2
 d0a:	f6 cf       	rjmp	.-20     	; 0xcf8 <vfprintf+0x39a>
 d0c:	f6 01       	movw	r30, r12
 d0e:	86 81       	ldd	r24, Z+6	; 0x06
 d10:	97 81       	ldd	r25, Z+7	; 0x07
 d12:	02 c0       	rjmp	.+4      	; 0xd18 <vfprintf+0x3ba>
 d14:	8f ef       	ldi	r24, 0xFF	; 255
 d16:	9f ef       	ldi	r25, 0xFF	; 255
 d18:	2b 96       	adiw	r28, 0x0b	; 11
 d1a:	e2 e1       	ldi	r30, 0x12	; 18
 d1c:	0c 94 5c 07 	jmp	0xeb8	; 0xeb8 <__epilogue_restores__>

00000d20 <strnlen_P>:
 d20:	fc 01       	movw	r30, r24
 d22:	05 90       	lpm	r0, Z+
 d24:	61 50       	subi	r22, 0x01	; 1
 d26:	70 40       	sbci	r23, 0x00	; 0
 d28:	01 10       	cpse	r0, r1
 d2a:	d8 f7       	brcc	.-10     	; 0xd22 <strnlen_P+0x2>
 d2c:	80 95       	com	r24
 d2e:	90 95       	com	r25
 d30:	8e 0f       	add	r24, r30
 d32:	9f 1f       	adc	r25, r31
 d34:	08 95       	ret

00000d36 <strnlen>:
 d36:	fc 01       	movw	r30, r24
 d38:	61 50       	subi	r22, 0x01	; 1
 d3a:	70 40       	sbci	r23, 0x00	; 0
 d3c:	01 90       	ld	r0, Z+
 d3e:	01 10       	cpse	r0, r1
 d40:	d8 f7       	brcc	.-10     	; 0xd38 <strnlen+0x2>
 d42:	80 95       	com	r24
 d44:	90 95       	com	r25
 d46:	8e 0f       	add	r24, r30
 d48:	9f 1f       	adc	r25, r31
 d4a:	08 95       	ret

00000d4c <fputc>:
 d4c:	0f 93       	push	r16
 d4e:	1f 93       	push	r17
 d50:	cf 93       	push	r28
 d52:	df 93       	push	r29
 d54:	fb 01       	movw	r30, r22
 d56:	23 81       	ldd	r18, Z+3	; 0x03
 d58:	21 fd       	sbrc	r18, 1
 d5a:	03 c0       	rjmp	.+6      	; 0xd62 <fputc+0x16>
 d5c:	8f ef       	ldi	r24, 0xFF	; 255
 d5e:	9f ef       	ldi	r25, 0xFF	; 255
 d60:	2c c0       	rjmp	.+88     	; 0xdba <fputc+0x6e>
 d62:	22 ff       	sbrs	r18, 2
 d64:	16 c0       	rjmp	.+44     	; 0xd92 <fputc+0x46>
 d66:	46 81       	ldd	r20, Z+6	; 0x06
 d68:	57 81       	ldd	r21, Z+7	; 0x07
 d6a:	24 81       	ldd	r18, Z+4	; 0x04
 d6c:	35 81       	ldd	r19, Z+5	; 0x05
 d6e:	42 17       	cp	r20, r18
 d70:	53 07       	cpc	r21, r19
 d72:	44 f4       	brge	.+16     	; 0xd84 <fputc+0x38>
 d74:	a0 81       	ld	r26, Z
 d76:	b1 81       	ldd	r27, Z+1	; 0x01
 d78:	9d 01       	movw	r18, r26
 d7a:	2f 5f       	subi	r18, 0xFF	; 255
 d7c:	3f 4f       	sbci	r19, 0xFF	; 255
 d7e:	31 83       	std	Z+1, r19	; 0x01
 d80:	20 83       	st	Z, r18
 d82:	8c 93       	st	X, r24
 d84:	26 81       	ldd	r18, Z+6	; 0x06
 d86:	37 81       	ldd	r19, Z+7	; 0x07
 d88:	2f 5f       	subi	r18, 0xFF	; 255
 d8a:	3f 4f       	sbci	r19, 0xFF	; 255
 d8c:	37 83       	std	Z+7, r19	; 0x07
 d8e:	26 83       	std	Z+6, r18	; 0x06
 d90:	14 c0       	rjmp	.+40     	; 0xdba <fputc+0x6e>
 d92:	8b 01       	movw	r16, r22
 d94:	ec 01       	movw	r28, r24
 d96:	fb 01       	movw	r30, r22
 d98:	00 84       	ldd	r0, Z+8	; 0x08
 d9a:	f1 85       	ldd	r31, Z+9	; 0x09
 d9c:	e0 2d       	mov	r30, r0
 d9e:	09 95       	icall
 da0:	89 2b       	or	r24, r25
 da2:	e1 f6       	brne	.-72     	; 0xd5c <fputc+0x10>
 da4:	d8 01       	movw	r26, r16
 da6:	16 96       	adiw	r26, 0x06	; 6
 da8:	8d 91       	ld	r24, X+
 daa:	9c 91       	ld	r25, X
 dac:	17 97       	sbiw	r26, 0x07	; 7
 dae:	01 96       	adiw	r24, 0x01	; 1
 db0:	17 96       	adiw	r26, 0x07	; 7
 db2:	9c 93       	st	X, r25
 db4:	8e 93       	st	-X, r24
 db6:	16 97       	sbiw	r26, 0x06	; 6
 db8:	ce 01       	movw	r24, r28
 dba:	df 91       	pop	r29
 dbc:	cf 91       	pop	r28
 dbe:	1f 91       	pop	r17
 dc0:	0f 91       	pop	r16
 dc2:	08 95       	ret

00000dc4 <__ultoa_invert>:
 dc4:	fa 01       	movw	r30, r20
 dc6:	aa 27       	eor	r26, r26
 dc8:	28 30       	cpi	r18, 0x08	; 8
 dca:	51 f1       	breq	.+84     	; 0xe20 <__ultoa_invert+0x5c>
 dcc:	20 31       	cpi	r18, 0x10	; 16
 dce:	81 f1       	breq	.+96     	; 0xe30 <__ultoa_invert+0x6c>
 dd0:	e8 94       	clt
 dd2:	6f 93       	push	r22
 dd4:	6e 7f       	andi	r22, 0xFE	; 254
 dd6:	6e 5f       	subi	r22, 0xFE	; 254
 dd8:	7f 4f       	sbci	r23, 0xFF	; 255
 dda:	8f 4f       	sbci	r24, 0xFF	; 255
 ddc:	9f 4f       	sbci	r25, 0xFF	; 255
 dde:	af 4f       	sbci	r26, 0xFF	; 255
 de0:	b1 e0       	ldi	r27, 0x01	; 1
 de2:	3e d0       	rcall	.+124    	; 0xe60 <__ultoa_invert+0x9c>
 de4:	b4 e0       	ldi	r27, 0x04	; 4
 de6:	3c d0       	rcall	.+120    	; 0xe60 <__ultoa_invert+0x9c>
 de8:	67 0f       	add	r22, r23
 dea:	78 1f       	adc	r23, r24
 dec:	89 1f       	adc	r24, r25
 dee:	9a 1f       	adc	r25, r26
 df0:	a1 1d       	adc	r26, r1
 df2:	68 0f       	add	r22, r24
 df4:	79 1f       	adc	r23, r25
 df6:	8a 1f       	adc	r24, r26
 df8:	91 1d       	adc	r25, r1
 dfa:	a1 1d       	adc	r26, r1
 dfc:	6a 0f       	add	r22, r26
 dfe:	71 1d       	adc	r23, r1
 e00:	81 1d       	adc	r24, r1
 e02:	91 1d       	adc	r25, r1
 e04:	a1 1d       	adc	r26, r1
 e06:	20 d0       	rcall	.+64     	; 0xe48 <__ultoa_invert+0x84>
 e08:	09 f4       	brne	.+2      	; 0xe0c <__ultoa_invert+0x48>
 e0a:	68 94       	set
 e0c:	3f 91       	pop	r19
 e0e:	2a e0       	ldi	r18, 0x0A	; 10
 e10:	26 9f       	mul	r18, r22
 e12:	11 24       	eor	r1, r1
 e14:	30 19       	sub	r19, r0
 e16:	30 5d       	subi	r19, 0xD0	; 208
 e18:	31 93       	st	Z+, r19
 e1a:	de f6       	brtc	.-74     	; 0xdd2 <__ultoa_invert+0xe>
 e1c:	cf 01       	movw	r24, r30
 e1e:	08 95       	ret
 e20:	46 2f       	mov	r20, r22
 e22:	47 70       	andi	r20, 0x07	; 7
 e24:	40 5d       	subi	r20, 0xD0	; 208
 e26:	41 93       	st	Z+, r20
 e28:	b3 e0       	ldi	r27, 0x03	; 3
 e2a:	0f d0       	rcall	.+30     	; 0xe4a <__ultoa_invert+0x86>
 e2c:	c9 f7       	brne	.-14     	; 0xe20 <__ultoa_invert+0x5c>
 e2e:	f6 cf       	rjmp	.-20     	; 0xe1c <__ultoa_invert+0x58>
 e30:	46 2f       	mov	r20, r22
 e32:	4f 70       	andi	r20, 0x0F	; 15
 e34:	40 5d       	subi	r20, 0xD0	; 208
 e36:	4a 33       	cpi	r20, 0x3A	; 58
 e38:	18 f0       	brcs	.+6      	; 0xe40 <__ultoa_invert+0x7c>
 e3a:	49 5d       	subi	r20, 0xD9	; 217
 e3c:	31 fd       	sbrc	r19, 1
 e3e:	40 52       	subi	r20, 0x20	; 32
 e40:	41 93       	st	Z+, r20
 e42:	02 d0       	rcall	.+4      	; 0xe48 <__ultoa_invert+0x84>
 e44:	a9 f7       	brne	.-22     	; 0xe30 <__ultoa_invert+0x6c>
 e46:	ea cf       	rjmp	.-44     	; 0xe1c <__ultoa_invert+0x58>
 e48:	b4 e0       	ldi	r27, 0x04	; 4
 e4a:	a6 95       	lsr	r26
 e4c:	97 95       	ror	r25
 e4e:	87 95       	ror	r24
 e50:	77 95       	ror	r23
 e52:	67 95       	ror	r22
 e54:	ba 95       	dec	r27
 e56:	c9 f7       	brne	.-14     	; 0xe4a <__ultoa_invert+0x86>
 e58:	00 97       	sbiw	r24, 0x00	; 0
 e5a:	61 05       	cpc	r22, r1
 e5c:	71 05       	cpc	r23, r1
 e5e:	08 95       	ret
 e60:	9b 01       	movw	r18, r22
 e62:	ac 01       	movw	r20, r24
 e64:	0a 2e       	mov	r0, r26
 e66:	06 94       	lsr	r0
 e68:	57 95       	ror	r21
 e6a:	47 95       	ror	r20
 e6c:	37 95       	ror	r19
 e6e:	27 95       	ror	r18
 e70:	ba 95       	dec	r27
 e72:	c9 f7       	brne	.-14     	; 0xe66 <__ultoa_invert+0xa2>
 e74:	62 0f       	add	r22, r18
 e76:	73 1f       	adc	r23, r19
 e78:	84 1f       	adc	r24, r20
 e7a:	95 1f       	adc	r25, r21
 e7c:	a0 1d       	adc	r26, r0
 e7e:	08 95       	ret

00000e80 <__prologue_saves__>:
 e80:	2f 92       	push	r2
 e82:	3f 92       	push	r3
 e84:	4f 92       	push	r4
 e86:	5f 92       	push	r5
 e88:	6f 92       	push	r6
 e8a:	7f 92       	push	r7
 e8c:	8f 92       	push	r8
 e8e:	9f 92       	push	r9
 e90:	af 92       	push	r10
 e92:	bf 92       	push	r11
 e94:	cf 92       	push	r12
 e96:	df 92       	push	r13
 e98:	ef 92       	push	r14
 e9a:	ff 92       	push	r15
 e9c:	0f 93       	push	r16
 e9e:	1f 93       	push	r17
 ea0:	cf 93       	push	r28
 ea2:	df 93       	push	r29
 ea4:	cd b7       	in	r28, 0x3d	; 61
 ea6:	de b7       	in	r29, 0x3e	; 62
 ea8:	ca 1b       	sub	r28, r26
 eaa:	db 0b       	sbc	r29, r27
 eac:	0f b6       	in	r0, 0x3f	; 63
 eae:	f8 94       	cli
 eb0:	de bf       	out	0x3e, r29	; 62
 eb2:	0f be       	out	0x3f, r0	; 63
 eb4:	cd bf       	out	0x3d, r28	; 61
 eb6:	09 94       	ijmp

00000eb8 <__epilogue_restores__>:
 eb8:	2a 88       	ldd	r2, Y+18	; 0x12
 eba:	39 88       	ldd	r3, Y+17	; 0x11
 ebc:	48 88       	ldd	r4, Y+16	; 0x10
 ebe:	5f 84       	ldd	r5, Y+15	; 0x0f
 ec0:	6e 84       	ldd	r6, Y+14	; 0x0e
 ec2:	7d 84       	ldd	r7, Y+13	; 0x0d
 ec4:	8c 84       	ldd	r8, Y+12	; 0x0c
 ec6:	9b 84       	ldd	r9, Y+11	; 0x0b
 ec8:	aa 84       	ldd	r10, Y+10	; 0x0a
 eca:	b9 84       	ldd	r11, Y+9	; 0x09
 ecc:	c8 84       	ldd	r12, Y+8	; 0x08
 ece:	df 80       	ldd	r13, Y+7	; 0x07
 ed0:	ee 80       	ldd	r14, Y+6	; 0x06
 ed2:	fd 80       	ldd	r15, Y+5	; 0x05
 ed4:	0c 81       	ldd	r16, Y+4	; 0x04
 ed6:	1b 81       	ldd	r17, Y+3	; 0x03
 ed8:	aa 81       	ldd	r26, Y+2	; 0x02
 eda:	b9 81       	ldd	r27, Y+1	; 0x01
 edc:	ce 0f       	add	r28, r30
 ede:	d1 1d       	adc	r29, r1
 ee0:	0f b6       	in	r0, 0x3f	; 63
 ee2:	f8 94       	cli
 ee4:	de bf       	out	0x3e, r29	; 62
 ee6:	0f be       	out	0x3f, r0	; 63
 ee8:	cd bf       	out	0x3d, r28	; 61
 eea:	ed 01       	movw	r28, r26
 eec:	08 95       	ret

00000eee <_exit>:
 eee:	f8 94       	cli

00000ef0 <__stop_program>:
 ef0:	ff cf       	rjmp	.-2      	; 0xef0 <__stop_program>
